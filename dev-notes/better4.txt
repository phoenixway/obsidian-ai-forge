import { ItemView, WorkspaceLeaf, setIcon, MarkdownRenderer } from "obsidian";
import OllamaPlugin from "./main";
import { MessageService } from "./messageService";

export const VIEW_TYPE_OLLAMA = "ollama-chat-view";

interface Message {
  role: "user" | "assistant";
  content: string;
  timestamp: Date;
}

interface RequestOptions {
  num_ctx?: number;
}

export class OllamaView extends ItemView {
  private readonly plugin: OllamaPlugin;
  private chatContainerEl: HTMLElement;
  private inputEl: HTMLTextAreaElement;
  private chatContainer: HTMLElement;
  private sendButton: HTMLElement;
  private voiceButton: HTMLElement;
  private menuButton: HTMLElement;
  private menuDropdown: HTMLElement;
  private settingsOption: HTMLElement;
  private messages: Message[] = [];
  private isProcessing = false;
  private scrollTimeout: number | null = null;
  private static instance: OllamaView | null = null;
  private speechWorker: Worker | null = null;
  private mediaRecorder: MediaRecorder | null = null;
  private systemMessageInterval = 0;
  private messagesPairCount = 0;
  private readonly messageService: MessageService;
  private emptyStateEl: HTMLElement | null = null;

  constructor(leaf: WorkspaceLeaf, plugin: OllamaPlugin) {
    super(leaf);
    this.plugin = plugin;

    if (OllamaView.instance) {
      return OllamaView.instance;
    }
    OllamaView.instance = this;
    
    if (this.plugin.apiService) {
      this.plugin.apiService.setOllamaView(this);
    }

    this.messageService = new MessageService(plugin);
    this.messageService.setView(this);
  }

  // ====================
  // Lifecycle Methods
  // ====================

  getViewType(): string {
    return VIEW_TYPE_OLLAMA;
  }

  getDisplayText(): string {
    return "Ollama Chat";
  }

  getIcon(): string {
    return "message-square";
  }

  async onOpen(): Promise<void> {
    this.createUIElements();
    this.showEmptyHistory();

    setTimeout(async () => {
      this.scrollToBottom();
      this.inputEl.focus();
      this.inputEl.dispatchEvent(new Event('input'));
      this.attachEventListeners();
      await this.messageService.loadMessageHistory();
      this.setupTextareaAutoResize();
    }, 500);
  }

  // ====================
  // UI Creation Methods
  // ====================

  private createUIElements(): void {
    this.chatContainerEl = this.contentEl.createDiv({ cls: "ollama-container" });
    this.chatContainer = this.chatContainerEl.createDiv({ cls: "ollama-chat-container" });

    const inputContainer = this.chatContainerEl.createDiv({ cls: "chat-input-container" });
    this.inputEl = inputContainer.createEl("textarea", {
      attr: { placeholder: `Text to ${this.plugin.settings.modelName}...` }
    });

    const buttonsContainer = inputContainer.createDiv({ cls: "buttons-container" });
    this.createActionButtons(buttonsContainer);
    this.createMenuDropdown(inputContainer);
  }

  private createActionButtons(container: HTMLElement): void {
    this.sendButton = container.createEl("button", { cls: "send-button" });
    setIcon(this.sendButton, "send");

    this.voiceButton = container.createEl("button", { cls: "voice-button" });
    setIcon(this.voiceButton, "microphone");

    this.menuButton = container.createEl("button", { cls: "menu-button" });
    setIcon(this.menuButton, "more-vertical");
  }

  private createMenuDropdown(container: HTMLElement): void {
    this.menuDropdown = container.createEl("div", { cls: "menu-dropdown" });
    this.menuDropdown.style.display = "none";

    this.settingsOption = this.menuDropdown.createEl("div", { cls: "menu-option settings-option" });
    const settingsIcon = this.settingsOption.createEl("span", { cls: "menu-option-icon" });
    setIcon(settingsIcon, "settings");
    this.settingsOption.createEl("span", { cls: "menu-option-text", text: "Settings" });
  }

  // ====================
  // Event Handling
  // ====================

  private attachEventListeners(): void {
    this.setupInputHandlers();
    this.setupButtonHandlers();
    this.setupMenuHandlers();
    this.setupPluginEventHandlers();
    this.setupVisibilityHandlers();
  }

  private setupInputHandlers(): void {
    this.inputEl.addEventListener("keydown", (e) => {
      if (e.key === "Enter" && !e.shiftKey) {
        e.preventDefault();
        this.sendMessage();
      }
    });
  }

  private setupButtonHandlers(): void {
    this.sendButton.addEventListener("click", () => this.sendMessage());
    this.voiceButton.addEventListener("click", () => this.toggleVoiceRecognition());
  }

  private setupMenuHandlers(): void {
    const closeMenu = () => {
      this.menuDropdown.style.display = "none";
      document.removeEventListener("click", closeMenu);
    };

    this.menuButton.addEventListener("click", (e) => {
      e.stopPropagation();
      this.menuDropdown.style.display = this.menuDropdown.style.display === "none" ? "block" : "none";
      if (this.menuDropdown.style.display === "block") {
        setTimeout(() => document.addEventListener("click", closeMenu), 0);
      }
    });

    this.settingsOption.addEventListener("click", async () => {
      const setting = (this.app as any).setting;
      await setting.open();
      setting.openTabById("obsidian-ollama-duet");
      closeMenu();
    });
  }

  private setupPluginEventHandlers(): void {
    const removeListener = this.plugin.on('model-changed', (modelName: string) => {
      this.updateInputPlaceholder(modelName);
      this.plugin.messageService.addSystemMessage(`Model changed to: ${modelName}`);
    });
    this.register(() => removeListener());
  }

  private setupVisibilityHandlers(): void {
    this.registerDomEvent(document, 'visibilitychange', () => {
      if (document.visibilityState === 'visible') {
        setTimeout(() => {
          this.scrollToBottom();
          this.inputEl.dispatchEvent(new Event('input'));
        }, 200);
      }
    });

    this.registerEvent(this.app.workspace.on('active-leaf-change', () => {
      if (this.app.workspace.getActiveViewOfType(this.constructor as any) === this) {
        setTimeout(() => this.scrollToBottom(), 100);
      }
    }));
  }

  // ====================
  // Message Handling
  // ====================

  public getChatContainer(): HTMLElement {
    return this.chatContainer;
  }

  public clearChatContainer(): void {
    this.chatContainer.empty();
  }

  public scrollToBottom(): void {
    if (this.scrollTimeout) {
      clearTimeout(this.scrollTimeout);
    }

    this.scrollTimeout = window.setTimeout(() => {
      requestAnimationFrame(() => {
        if (this.chatContainer) {
          this.chatContainer.scrollTop = this.chatContainer.scrollHeight;
        }
      });
    }, 50);
  }

  public clearInputField(): void {
    this.inputEl.value = "";
    setTimeout(() => this.inputEl.dispatchEvent(new Event('input')), 100);
  }

  public createGroupElement(className: string): HTMLElement {
    return this.chatContainer.createDiv({ cls: className });
  }

  public createMessageElement(parent: HTMLElement, className: string): HTMLElement {
    return parent.createDiv({ cls: className });
  }

  public createContentContainer(parent: HTMLElement): HTMLElement {
    return parent.createDiv({ cls: "message-content-container" });
  }

  public createContentElement(parent: HTMLElement): HTMLElement {
    return parent.createDiv({ cls: "message-content" });
  }

  public addLoadingMessage(): HTMLElement {
    const messageGroup = this.chatContainer.createDiv({
      cls: "message-group ollama-message-group",
    });

    const messageEl = messageGroup.createDiv({
      cls: "message ollama-message ollama-message-tail",
    });

    const dotsContainer = messageEl.createDiv({ cls: "thinking-dots" });
    for (let i = 0; i < 3; i++) {
      dotsContainer.createDiv({ cls: "thinking-dot" });
    }

    this.scrollToBottom();
    return messageGroup;
  }

  // ====================
  // Empty State Handling
  // ====================

  public showEmptyHistory(): void {
    if (this.messages.length === 0 && !this.emptyStateEl) {
      this.emptyStateEl = this.chatContainer.createDiv({ cls: "ollama-empty-state" });
      this.emptyStateEl.createDiv({
        cls: "empty-state-message",
        text: "No messages yet"
      });
      this.emptyStateEl.createDiv({
        cls: "empty-state-tip",
        text: `Type a message to start chatting with ${this.plugin.settings.modelName}`
      });
    }
  }

  public hideEmptyState(): void {
    if (this.emptyStateEl?.parentNode) {
      this.emptyStateEl.remove();
      this.emptyStateEl = null;
    }
  }

  // ====================
  // Textarea Management
  // ====================

  private setupTextareaAutoResize(): void {
    const adjustHeight = () => {
      const buttonsContainer = this.contentEl.querySelector('.buttons-container') as HTMLElement;
      if (!buttonsContainer || !this.inputEl) return;

      const maxHeight = this.contentEl.clientHeight * 0.66;

      requestAnimationFrame(() => {
        this.inputEl.style.height = 'auto';
        const newHeight = Math.min(this.inputEl.scrollHeight, maxHeight);
        this.inputEl.style.height = `${newHeight}px`;

        buttonsContainer.style.cssText = newHeight > 40 
          ? 'bottom: 10px; top: auto; transform: translateY(0);' 
          : 'bottom: 50%; top: auto; transform: translateY(50%);';

        this.inputEl.classList.toggle('expanded', this.inputEl.scrollHeight > maxHeight);
      });
    };

    const handleInput = () => {
      window.requestAnimationFrame(adjustHeight);
    };

    this.inputEl.addEventListener('input', handleInput);
    this.registerDomEvent(window, 'resize', handleInput);
    this.registerEvent(this.app.workspace.on('resize', handleInput));

    setTimeout(adjustHeight, 100);
  }

  private updateInputPlaceholder(modelName: string): void {
    if (this.inputEl) {
      this.inputEl.placeholder = `Text to ${modelName}...`;
    }
  }

  // ====================
  // Message Operations
  // ====================

  async sendMessage(): Promise<void> {
    const content = this.inputEl.value.trim();
    if (content) {
      await this.messageService.sendMessage(content);
    }
  }

  addMessage(role: "user" | "assistant", content: string): void {
    const message: Message = {
      role,
      content,
      timestamp: new Date(),
    };

    this.messages.push(message);
    this.renderMessage(message);

    if (role === "assistant" && this.messages.length >= 2) {
      if (this.messages[this.messages.length - 2].role === "user") {
        this.messagesPairCount++;
      }
    }

    this.saveMessageHistory();
    this.scheduleScrollToBottom();
  }

  private scheduleScrollToBottom(): void {
    setTimeout(() => this.scrollToBottom(), 100);
  }

  async saveMessageHistory(): Promise<void> {
    if (this.messages.length === 0) return;

    try {
      const serializedMessages = this.messages.map(msg => ({
        role: msg.role,
        content: msg.content,
        timestamp: msg.timestamp.toISOString(),
      }));
      await this.plugin.saveMessageHistory(JSON.stringify(serializedMessages));
    } catch (error) {
      console.error("Error saving message history:", error);
    }
  }

  // ====================
  // Voice Recognition
  // ====================

  private initSpeechWorker(): void {
    try {
      const workerCode = `

onmessage = async (event) => {
    try {
      const { apiKey, audioBlob, languageCode = 'uk-UA' } = event.data;
      
      if (!apiKey || apiKey.trim() === '') {

        postMessage({ error: true, message: 'Google API Key is not configured. Please add it in plugin settings.' });
        return;
      }

      const url = "https://speech.googleapis.com/v1/speech:recognize?key=" + apiKey;
      
      const arrayBuffer = await audioBlob.arrayBuffer();
      const base64Audio = btoa(
        new Uint8Array(arrayBuffer).reduce(
          (data, byte) => data + String.fromCharCode(byte), ''

        )
      );
      
      const response = await fetch(url, {
        method: 'POST',
        body: JSON.stringify({

          config: {
            encoding: 'WEBM_OPUS',
            sampleRateHertz: 48000,
            languageCode: languageCode,
            model: 'latest_long',
            enableAutomaticPunctuation: true,
          },
          audio: {
            content: base64Audio
          },
        }),
        headers: {
          'Content-Type': 'application/json',
        },
      });

  
      if (!response.ok) {
        const errorData = await response.json();
        postMessage({ 
          error: true, 
          message: "Error from Google Speech API: " + (errorData.error?.message || response.status)

        });
        return;
      }
  
      const data = await response.json();

      
      if (data.results && data.results.length > 0) {
        const transcript = data.results
          .map(result => result.alternatives[0].transcript)
          .join(' ')
          .trim();
        
        postMessage(transcript);
      } else {
        postMessage({ error: true, message: 'No speech detected' });
      }
    } catch (error) {
      postMessage({ 
        error: true, 
        message: 'Error processing speech recognition: ' + error.message 
      });
    }
};
`;
      
      const workerBlob = new Blob([workerCode], { type: 'application/javascript' });
      this.speechWorker = new Worker(URL.createObjectURL(workerBlob));
      this.setupSpeechWorkerHandlers();
    } catch (error) {
      console.error("Failed to initialize worker:", error);
    }
  }

  private setupSpeechWorkerHandlers(): void {
    if (!this.speechWorker) return;

    this.speechWorker.onmessage = (event) => {
      const data = event.data;
      if (data?.error) {
        console.error("Speech recognition error:", data.message);
        return;
      }

      const transcript = typeof data === 'string' ? data : '';
      if (!transcript) return;

      const cursorPosition = this.inputEl.selectionStart || 0;
      const currentValue = this.inputEl.value;

      let insertText = transcript;
      if (cursorPosition > 0 && currentValue.charAt(cursorPosition - 1) !== ' ' && insertText.charAt(0) !== ' ') {
        insertText = ' ' + insertText;
      }

      this.inputEl.value = currentValue.substring(0, cursorPosition) +
        insertText +
        currentValue.substring(cursorPosition);

      this.inputEl.setSelectionRange(cursorPosition + insertText.length, cursorPosition + insertText.length);
      this.inputEl.focus();
    };

    this.speechWorker.onerror = (error) => {
      console.error("Worker error:", error);
    };
  }

  private async toggleVoiceRecognition(): Promise<void> {
    const voiceButton = this.contentEl.querySelector('.voice-button');
    if (!voiceButton) return;

    if (voiceButton.classList.contains('recording')) {
      this.stopVoiceRecording();
      return;
    }

    await this.startVoiceRecording();
  }

  private async startVoiceRecording(): Promise<void> {
    const voiceButton = this.contentEl.querySelector('.voice-button');
    if (!voiceButton) return;

    try {
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      this.mediaRecorder = new MediaRecorder(stream);
      const audioChunks: Blob[] = [];

      voiceButton.classList.add('recording');
      this.inputEl.placeholder = "Recording...";

      this.mediaRecorder.ondataavailable = (event) => {
        if (event.data.size > 0) {
          audioChunks.push(event.data);
        }
      };

      this.mediaRecorder.onstop = () => {
        voiceButton.classList.remove('recording');
        this.updateInputPlaceholder(this.plugin.settings.modelName);
        stream.getTracks().forEach(track => track.stop());

        if (audioChunks.length > 0 && this.speechWorker) {
          const audioBlob = new Blob(audioChunks, { type: this.mediaRecorder?.mimeType });
          this.speechWorker.postMessage({
            apiKey: this.plugin.settings.googleApiKey,
            audioBlob
          });
        }
      };

      this.mediaRecorder.start(100);

      setTimeout(() => {
        if (this.mediaRecorder?.state === 'recording') {
          this.stopVoiceRecording();
        }
      }, 15000);
    } catch (error) {
      console.error("Error accessing microphone:", error);
      this.contentEl.querySelector('.voice-button')?.classList.remove('recording');
    }
  }

  private stopVoiceRecording(): void {
    if (this.mediaRecorder?.state === 'recording') {
      this.mediaRecorder.stop();
    }
    this.contentEl.querySelector('.voice-button')?.classList.remove('recording');
    this.updateInputPlaceholder(this.plugin.settings.modelName);
  }

  // ====================
  // Message Rendering
  // ====================

  renderMessage(message: Message): void {
    const isUser = message.role === "user";
    const isFirstInGroup = this.isFirstMessageInGroup(message);
    const isLastInGroup = this.isLastMessageInGroup(message);

    const messageGroup = isFirstInGroup 
      ? this.createNewMessageGroup(isUser)
      : this.chatContainer.lastElementChild as HTMLElement;

    const messageEl = this.createMessageElement(messageGroup, isUser, isLastInGroup);
    const contentContainer = messageEl.createDiv({ cls: "message-content-container" });
    const contentEl = contentContainer.createDiv({ cls: "message-content" });

    this.renderMessageContent(message, contentEl);
    this.addCopyButton(contentContainer, message);

    if (isLastInGroup) {
      this.addTimestamp(messageEl, message.timestamp);
    }
  }

  private createNewMessageGroup(isUser: boolean): HTMLElement {
    return this.chatContainer.createDiv({
      cls: `message-group ${isUser ? "user-message-group" : "ollama-message-group"}`
    });
  }

  private createMessageElement(parent: HTMLElement, isUser: boolean, isLastInGroup: boolean): HTMLElement {
    const baseClass = isUser ? "user-message bubble user-bubble" : "ollama-message bubble ollama-bubble";
    const tailClass = isLastInGroup ? (isUser ? "user-message-tail" : "ollama-message-tail") : "";
    return parent.createDiv({ cls: `message ${baseClass} ${tailClass}` });
  }

  private renderMessageContent(message: Message, contentEl: HTMLElement): void {
    if (message.role === "assistant") {
      this.renderAssistantMessage(message.content, contentEl);
    } else {
      this.renderUserMessage(message.content, contentEl);
    }
  }

  private renderAssistantMessage(content: string, contentEl: HTMLElement): void {
    const decodedContent = this.decodeHtmlEntities(content);
    const hasThinkingTags = decodedContent.includes("<think>");

    if (hasThinkingTags) {
      const processedContent = this.processThinkingTags(decodedContent);
      contentEl.innerHTML = processedContent;
      this.addThinkingToggleListeners(contentEl);
    } else {
      MarkdownRenderer.renderMarkdown(content, contentEl, "", this as any);
    }
  }

  private renderUserMessage(content: string, contentEl: HTMLElement): void {
    content.split("\n").forEach((line, index, array) => {
      contentEl.createSpan({ text: line });
      if (index < array.length - 1) {
        contentEl.createEl("br");
      }
    });
  }

  private addCopyButton(container: HTMLElement, message: Message): void {
    const copyButton = container.createEl("button", {
      cls: "copy-button",
      attr: { title: "Copy message" },
    });
    setIcon(copyButton, "copy");

    copyButton.addEventListener("click", () => {
      let textToCopy = message.content;
      if (message.role === "assistant" && textToCopy.includes("<think>")) {
        textToCopy = textToCopy.replace(/<think>[\s\S]*?<\/think>/g, "");
      }

      navigator.clipboard.writeText(textToCopy);
      this.showCopyFeedback(copyButton);
    });
  }

  private showCopyFeedback(button: HTMLElement): void {
    button.setText("Copied!");
    setTimeout(() => {
      button.empty();
      setIcon(button, "copy");
    }, 2000);
  }

  private addTimestamp(element: HTMLElement, timestamp: Date): void {
    element.createDiv({
      cls: "message-timestamp",
      text: this.formatTime(timestamp),
    });
  }

  // ====================
  // Thinking Blocks Logic
  // ====================

  private processThinkingTags(content: string): string {
    if (!content.includes("<think>")) return content;

    const parts: string[] = [];
    let currentPosition = 0;
    const thinkingRegex = /<think>([\s\S]*?)<\/think>/g;
    let match;

    while ((match = thinkingRegex.exec(content)) !== null) {
      if (match.index > currentPosition) {
        parts.push(this.markdownToHtml(content.substring(currentPosition, match.index)));
      }
      parts.push(this.createThinkingBlockHtml(match[1]));
      currentPosition = match.index + match[0].length;
    }

    if (currentPosition < content.length) {
      parts.push(this.markdownToHtml(content.substring(currentPosition)));
    }

    return parts.join("");
  }

  private createThinkingBlockHtml(content: string): string {
    return `
      <div class="thinking-block">
        <div class="thinking-header" data-fold-state="expanded">
          <div class="thinking-toggle">▼</div>
          <div class="thinking-title">Thinking</div>
        </div>
        <div class="thinking-content">${this.markdownToHtml(content)}</div>
      </div>
    `;
  }

  private markdownToHtml(markdown: string): string {
    if (!markdown?.trim()) return "";

    const tempDiv = document.createElement("div");
    MarkdownRenderer.renderMarkdown(markdown, tempDiv, "", this as any);
    return tempDiv.innerHTML;
  }

  private addThinkingToggleListeners(contentEl: HTMLElement): void {
    const thinkingHeaders = contentEl.querySelectorAll(".thinking-header");

    thinkingHeaders.forEach(header => {
      header.addEventListener("click", () => {
        const content = header.nextElementSibling as HTMLElement;
        const toggleIcon = header.querySelector(".thinking-toggle") as HTMLElement;

        if (!content || !toggleIcon) return;

        const isFolded = header.getAttribute("data-fold-state") === "folded";
        if (isFolded) {
          this.expandThinkingBlock(content, toggleIcon, header);
        } else {
          this.collapseThinkingBlock(content, toggleIcon, header);
        }
      });
    });
  }

  private expandThinkingBlock(content: HTMLElement, toggleIcon: HTMLElement, header: Element): void {
    content.style.display = "block";
    toggleIcon.textContent = "▼";
    header.setAttribute("data-fold-state", "expanded");
  }

  private collapseThinkingBlock(content: HTMLElement, toggleIcon: HTMLElement, header: Element): void {
    content.style.display = "none";
    toggleIcon.textContent = "►";
    header.setAttribute("data-fold-state", "folded");
  }

  private initializeThinkingBlocks(): void {
    setTimeout(() => {
      const thinkingHeaders = this.chatContainer.querySelectorAll(".thinking-header");
      thinkingHeaders.forEach(header => {
        const content = header.nextElementSibling as HTMLElement;
        const toggleIcon = header.querySelector(".thinking-toggle") as HTMLElement;
        if (content && toggleIcon) {
          this.collapseThinkingBlock(content, toggleIcon, header);
        }
      });
    }, 100);
  }

  // ====================
  // Helper Methods
  // ====================

  private isFirstMessageInGroup(message: Message): boolean {
    const index = this.messages.indexOf(message);
    return index === 0 || this.messages[index - 1].role !== message.role;
  }

  private isLastMessageInGroup(message: Message): boolean {
    const index = this.messages.indexOf(message);
    return index === this.messages.length - 1 || this.messages[index + 1].role !== message.role;
  }

  private formatTime(date: Date): string {
    return date.toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" });
  }

  private decodeHtmlEntities(text: string): string {
    const textArea = document.createElement("textarea");
    textArea.innerHTML = text;
    return textArea.value;
  }

  // ====================
  // Cleanup
  // ====================

  onClose(): void {
    if (this.speechWorker) {
      this.speechWorker.terminate();
    }
    if (this.mediaRecorder?.state === 'recording') {
      this.mediaRecorder.stop();
    }
    OllamaView.instance = null;
  }
}
