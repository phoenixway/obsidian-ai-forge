export const CSS_CLASSES = {
    MESSAGE_GROUP: "message-group",
    SYSTEM_GROUP: "system-message-group",
    MESSAGE: "message",
    SYSTEM_MESSAGE: "system-message",
    OLLAMA_MESSAGE: "ollama-message", // <-- Add/Uncomment
    CONTENT_CONTAINER: "message-content-container",
    CONTENT_COLLAPSIBLE: "message-content-collapsible", // <-- Add/Uncomment
    SYSTEM_ICON: "system-icon",
    SYSTEM_TEXT: "system-message-text",
    TIMESTAMP: "message-timestamp",
    DANGER_OPTION: "danger-option",
    CONTENT: "message-content",
    USER_GROUP: "user-message-group", // Likely needed if not already defined
    OLLAMA_GROUP: "ollama-message-group", // <-- Add/Uncomment
    THINKING_DOTS: "thinking-dots", // Needed by sendMessage placeholder
    THINKING_DOT: "thinking-dot", // Needed by sendMessage placeholder
    USER_MESSAGE: "user-message", // Likely needed if not already defined
    REGENERATE_BUTTON: "regenerate-button", // Likely needed
    COPY_BUTTON: "copy-button", // Likely needed
    DELETE_MESSAGE_BUTTON: "delete-message-button", // Likely needed
    MESSAGE_ARRIVING: "message-arriving",
    VISIBLE: "visible",
    DISABLED: "disabled",
    ERROR_TEXT: "error-message-text", // Додаємо відсутню константу
    SHOW_MORE_BUTTON: "show-more-button",
    SUBMENU_CONTENT_HIDDEN: "submenu-content-hidden",
    CODE_BLOCK_COPY_BUTTON: "code-block-copy-button",
    CODE_BLOCK_LANGUAGE: "code-block-language",
    AVATAR: "message-group-avatar",
    // Roles/Types
    USER_MESSAGE_GROUP: "user-message-group",
    ERROR_GROUP: "error-message-group",
    ERROR_MESSAGE: "error-message",
    // Content Specific
    CONTENT_COLLAPSED: "message-content-collapsed",
    ERROR_ICON: "error-icon",
    TRANSLATION_CONTAINER: "translation-container",
    TRANSLATION_CONTENT: "translation-content",
    AVATAR_USER: "user-avatar",
    AVATAR_AI: "ai-avatar",
    // Buttons & Actions
    TRANSLATE_BUTTON: "translate-button",
    SUMMARIZE_BUTTON: "summarize-button",
    STOP_BUTTON: "stop-generating-button",
    SCROLL_BOTTOM_BUTTON: "scroll-to-bottom-button",
    // States & Modifiers
    TRANSLATION_PENDING: "translation-pending", // For translate button maybe?
    RECORDING: "recording", // For voice button
    TOOL_MESSAGE: "tool-message", // Клас для повідомлення від інструменту
    TOOL_RESULT_HEADER: "tool-result-header", // Клас для заголовка результату інструменту
    TOOL_RESULT_ICON: "tool-result-icon", // Клас для іконки в заголовку результату
    TOOL_RESULT_CONTENT: "tool-result-content", // Клас для контенту результату інструменту
    TOOL_MESSAGE_GROUP: "tool-message-group", // Клас для обгортки групи повідомлення інструменту
    MESSAGE_WRAPPER: "message-wrapper", // Клас для внутрішньої обгортки повідомлення (між аватаром та вмістом)
    SYSTEM_MESSAGE_TEXT: "system-message-text", // <--- ДОДАЙТЕ ЦЕЙ КЛАС для тексту всередині
    MESSAGE_ACTIONS: "message-actions-wrapper", // <--- ДОДАЙТЕ/ПЕРЕВІРТЕ ЦЕЙ
    MESSAGE_ACTION_BUTTON: "message-action-button", // <--- ДОДАЙТЕ/ПЕРЕВІРТЕ ЦЕЙ
    // --- ДОДАЙТЕ АБО ПЕРЕВІРТЕ НАЯВНІСТЬ ЦИХ КЛАСІВ ДЛЯ АВАТАРІВ ---
    AVATAR_CONTAINER: "avatar-container", // Головний контейнер аватара
    AVATAR_USER_SPECIFIC: "user-avatar", // Специфічний клас для аватара користувача
    AVATAR_AI_SPECIFIC: "ai-avatar", // Специфічний клас для аватара AI
    AVATAR_IMAGE: "avatar-image", // Для <img> аватара
    AVATAR_ICON: "avatar-icon", // Для <span> з іконкою аватара
    AVATAR_INITIALS: "avatar-initials", // Для <div> з ініціалами
    THINKING_BLOCK: "thinking-block",
    THINKING_HEADER: "thinking-header",
    THINKING_TOGGLE: "thinking-toggle",
    THINKING_TITLE: "thinking-title",
    THINKING_CONTENT: "thinking-content",
    // --- ДОДАЙТЕ АБО ПЕРЕВІРТЕ НАЯВНІСТЬ ЦИХ КЛАСІВ ДЛЯ БЛОКІВ КОДУ ---
};
export const SCROLL_THRESHOLD = 150;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RhbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY29uc3RhbnRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRztJQUN2QixhQUFhLEVBQUUsZUFBZTtJQUM5QixZQUFZLEVBQUUsc0JBQXNCO0lBQ3BDLE9BQU8sRUFBRSxTQUFTO0lBQ2xCLGNBQWMsRUFBRSxnQkFBZ0I7SUFDaEMsY0FBYyxFQUFFLGdCQUFnQixFQUFFLG9CQUFvQjtJQUN0RCxpQkFBaUIsRUFBRSwyQkFBMkI7SUFDOUMsbUJBQW1CLEVBQUUsNkJBQTZCLEVBQUUsb0JBQW9CO0lBQ3hFLFdBQVcsRUFBRSxhQUFhO0lBQzFCLFdBQVcsRUFBRSxxQkFBcUI7SUFDbEMsU0FBUyxFQUFFLG1CQUFtQjtJQUM5QixhQUFhLEVBQUUsZUFBZTtJQUM5QixPQUFPLEVBQUUsaUJBQWlCO0lBQzFCLFVBQVUsRUFBRSxvQkFBb0IsRUFBRSx1Q0FBdUM7SUFDekUsWUFBWSxFQUFFLHNCQUFzQixFQUFFLG9CQUFvQjtJQUMxRCxhQUFhLEVBQUUsZUFBZSxFQUFFLG9DQUFvQztJQUNwRSxZQUFZLEVBQUUsY0FBYyxFQUFFLG9DQUFvQztJQUNsRSxZQUFZLEVBQUUsY0FBYyxFQUFFLHVDQUF1QztJQUNyRSxpQkFBaUIsRUFBRSxtQkFBbUIsRUFBRSxnQkFBZ0I7SUFDeEQsV0FBVyxFQUFFLGFBQWEsRUFBRSxnQkFBZ0I7SUFDNUMscUJBQXFCLEVBQUUsdUJBQXVCLEVBQUUsZ0JBQWdCO0lBQ2hFLGdCQUFnQixFQUFFLGtCQUFrQjtJQUNwQyxPQUFPLEVBQUUsU0FBUztJQUNsQixRQUFRLEVBQUUsVUFBVTtJQUNwQixVQUFVLEVBQUUsb0JBQW9CLEVBQUUsNkJBQTZCO0lBQy9ELGdCQUFnQixFQUFFLGtCQUFrQjtJQUNwQyxzQkFBc0IsRUFBRSx3QkFBd0I7SUFDaEQsc0JBQXNCLEVBQUUsd0JBQXdCO0lBQ2hELG1CQUFtQixFQUFFLHFCQUFxQjtJQUMxQyxNQUFNLEVBQUUsc0JBQXNCO0lBRTlCLGNBQWM7SUFDZCxrQkFBa0IsRUFBRSxvQkFBb0I7SUFDeEMsV0FBVyxFQUFFLHFCQUFxQjtJQUNsQyxhQUFhLEVBQUUsZUFBZTtJQUU5QixtQkFBbUI7SUFDbkIsaUJBQWlCLEVBQUUsMkJBQTJCO0lBQzlDLFVBQVUsRUFBRSxZQUFZO0lBQ3hCLHFCQUFxQixFQUFFLHVCQUF1QjtJQUM5QyxtQkFBbUIsRUFBRSxxQkFBcUI7SUFDMUMsV0FBVyxFQUFFLGFBQWE7SUFDMUIsU0FBUyxFQUFFLFdBQVc7SUFFdEIsb0JBQW9CO0lBQ3BCLGdCQUFnQixFQUFFLGtCQUFrQjtJQUNwQyxnQkFBZ0IsRUFBRSxrQkFBa0I7SUFDcEMsV0FBVyxFQUFFLHdCQUF3QjtJQUNyQyxvQkFBb0IsRUFBRSx5QkFBeUI7SUFFaEQscUJBQXFCO0lBQ3BCLG1CQUFtQixFQUFFLHFCQUFxQixFQUFFLDhCQUE4QjtJQUMxRSxTQUFTLEVBQUUsV0FBVyxFQUFFLG1CQUFtQjtJQUUzQyxZQUFZLEVBQUUsY0FBYyxFQUFFLHdDQUF3QztJQUN0RSxrQkFBa0IsRUFBRSxvQkFBb0IsRUFBRSw0Q0FBNEM7SUFDdEYsZ0JBQWdCLEVBQUUsa0JBQWtCLEVBQUUseUNBQXlDO0lBQy9FLG1CQUFtQixFQUFFLHFCQUFxQixFQUFFLDJDQUEyQztJQUV2RixrQkFBa0IsRUFBRSxvQkFBb0IsRUFBRSxtREFBbUQ7SUFDN0YsZUFBZSxFQUFFLGlCQUFpQixFQUFPLHVFQUF1RTtJQUNoSCxtQkFBbUIsRUFBRSxxQkFBcUIsRUFBRSw2Q0FBNkM7SUFFekYsZUFBZSxFQUFFLHlCQUF5QixFQUFFLDZCQUE2QjtJQUN6RSxxQkFBcUIsRUFBRSx1QkFBdUIsRUFBRSw2QkFBNkI7SUFFNUUsa0VBQWtFO0lBQ2xFLGdCQUFnQixFQUFFLGtCQUFrQixFQUFVLDZCQUE2QjtJQUMzRSxvQkFBb0IsRUFBRSxhQUFhLEVBQU8sMkNBQTJDO0lBQ3JGLGtCQUFrQixFQUFFLFdBQVcsRUFBVyxrQ0FBa0M7SUFDNUUsWUFBWSxFQUFFLGNBQWMsRUFBYyxvQkFBb0I7SUFDOUQsV0FBVyxFQUFFLGFBQWEsRUFBZ0IsK0JBQStCO0lBQ3pFLGVBQWUsRUFBRSxpQkFBaUIsRUFBUSx5QkFBeUI7SUFFbkUsY0FBYyxFQUFFLGdCQUFnQjtJQUNoQyxlQUFlLEVBQUUsaUJBQWlCO0lBQ2xDLGVBQWUsRUFBRyxpQkFBaUI7SUFDbkMsY0FBYyxFQUFFLGdCQUFnQjtJQUNoQyxnQkFBZ0IsRUFBRSxrQkFBa0I7SUFFcEMscUVBQXFFO0NBQ3pFLENBQUM7QUFDRixNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxHQUFHLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgQ1NTX0NMQVNTRVMgPSB7XG4gICAgTUVTU0FHRV9HUk9VUDogXCJtZXNzYWdlLWdyb3VwXCIsXG4gICAgU1lTVEVNX0dST1VQOiBcInN5c3RlbS1tZXNzYWdlLWdyb3VwXCIsXG4gICAgTUVTU0FHRTogXCJtZXNzYWdlXCIsXG4gICAgU1lTVEVNX01FU1NBR0U6IFwic3lzdGVtLW1lc3NhZ2VcIixcbiAgICBPTExBTUFfTUVTU0FHRTogXCJvbGxhbWEtbWVzc2FnZVwiLCAvLyA8LS0gQWRkL1VuY29tbWVudFxuICAgIENPTlRFTlRfQ09OVEFJTkVSOiBcIm1lc3NhZ2UtY29udGVudC1jb250YWluZXJcIixcbiAgICBDT05URU5UX0NPTExBUFNJQkxFOiBcIm1lc3NhZ2UtY29udGVudC1jb2xsYXBzaWJsZVwiLCAvLyA8LS0gQWRkL1VuY29tbWVudFxuICAgIFNZU1RFTV9JQ09OOiBcInN5c3RlbS1pY29uXCIsXG4gICAgU1lTVEVNX1RFWFQ6IFwic3lzdGVtLW1lc3NhZ2UtdGV4dFwiLFxuICAgIFRJTUVTVEFNUDogXCJtZXNzYWdlLXRpbWVzdGFtcFwiLFxuICAgIERBTkdFUl9PUFRJT046IFwiZGFuZ2VyLW9wdGlvblwiLFxuICAgIENPTlRFTlQ6IFwibWVzc2FnZS1jb250ZW50XCIsXG4gICAgVVNFUl9HUk9VUDogXCJ1c2VyLW1lc3NhZ2UtZ3JvdXBcIiwgLy8gTGlrZWx5IG5lZWRlZCBpZiBub3QgYWxyZWFkeSBkZWZpbmVkXG4gICAgT0xMQU1BX0dST1VQOiBcIm9sbGFtYS1tZXNzYWdlLWdyb3VwXCIsIC8vIDwtLSBBZGQvVW5jb21tZW50XG4gICAgVEhJTktJTkdfRE9UUzogXCJ0aGlua2luZy1kb3RzXCIsIC8vIE5lZWRlZCBieSBzZW5kTWVzc2FnZSBwbGFjZWhvbGRlclxuICAgIFRISU5LSU5HX0RPVDogXCJ0aGlua2luZy1kb3RcIiwgLy8gTmVlZGVkIGJ5IHNlbmRNZXNzYWdlIHBsYWNlaG9sZGVyXG4gICAgVVNFUl9NRVNTQUdFOiBcInVzZXItbWVzc2FnZVwiLCAvLyBMaWtlbHkgbmVlZGVkIGlmIG5vdCBhbHJlYWR5IGRlZmluZWRcbiAgICBSRUdFTkVSQVRFX0JVVFRPTjogXCJyZWdlbmVyYXRlLWJ1dHRvblwiLCAvLyBMaWtlbHkgbmVlZGVkXG4gICAgQ09QWV9CVVRUT046IFwiY29weS1idXR0b25cIiwgLy8gTGlrZWx5IG5lZWRlZFxuICAgIERFTEVURV9NRVNTQUdFX0JVVFRPTjogXCJkZWxldGUtbWVzc2FnZS1idXR0b25cIiwgLy8gTGlrZWx5IG5lZWRlZFxuICAgIE1FU1NBR0VfQVJSSVZJTkc6IFwibWVzc2FnZS1hcnJpdmluZ1wiLFxuICAgIFZJU0lCTEU6IFwidmlzaWJsZVwiLCBcbiAgICBESVNBQkxFRDogXCJkaXNhYmxlZFwiLFxuICAgIEVSUk9SX1RFWFQ6IFwiZXJyb3ItbWVzc2FnZS10ZXh0XCIsIC8vINCU0L7QtNCw0ZTQvNC+INCy0ZbQtNGB0YPRgtC90Y4g0LrQvtC90YHRgtCw0L3RgtGDXG4gICAgU0hPV19NT1JFX0JVVFRPTjogXCJzaG93LW1vcmUtYnV0dG9uXCIsXG4gICAgU1VCTUVOVV9DT05URU5UX0hJRERFTjogXCJzdWJtZW51LWNvbnRlbnQtaGlkZGVuXCIsXG4gICAgQ09ERV9CTE9DS19DT1BZX0JVVFRPTjogXCJjb2RlLWJsb2NrLWNvcHktYnV0dG9uXCIsXG4gICAgQ09ERV9CTE9DS19MQU5HVUFHRTogXCJjb2RlLWJsb2NrLWxhbmd1YWdlXCIsXG4gICAgQVZBVEFSOiBcIm1lc3NhZ2UtZ3JvdXAtYXZhdGFyXCIsXG5cbiAgICAvLyBSb2xlcy9UeXBlc1xuICAgIFVTRVJfTUVTU0FHRV9HUk9VUDogXCJ1c2VyLW1lc3NhZ2UtZ3JvdXBcIixcbiAgICBFUlJPUl9HUk9VUDogXCJlcnJvci1tZXNzYWdlLWdyb3VwXCIsXG4gICAgRVJST1JfTUVTU0FHRTogXCJlcnJvci1tZXNzYWdlXCIsXG5cbiAgICAvLyBDb250ZW50IFNwZWNpZmljXG4gICAgQ09OVEVOVF9DT0xMQVBTRUQ6IFwibWVzc2FnZS1jb250ZW50LWNvbGxhcHNlZFwiLFxuICAgIEVSUk9SX0lDT046IFwiZXJyb3ItaWNvblwiLFxuICAgIFRSQU5TTEFUSU9OX0NPTlRBSU5FUjogXCJ0cmFuc2xhdGlvbi1jb250YWluZXJcIixcbiAgICBUUkFOU0xBVElPTl9DT05URU5UOiBcInRyYW5zbGF0aW9uLWNvbnRlbnRcIixcbiAgICBBVkFUQVJfVVNFUjogXCJ1c2VyLWF2YXRhclwiLFxuICAgIEFWQVRBUl9BSTogXCJhaS1hdmF0YXJcIixcblxuICAgIC8vIEJ1dHRvbnMgJiBBY3Rpb25zXG4gICAgVFJBTlNMQVRFX0JVVFRPTjogXCJ0cmFuc2xhdGUtYnV0dG9uXCIsXG4gICAgU1VNTUFSSVpFX0JVVFRPTjogXCJzdW1tYXJpemUtYnV0dG9uXCIsXG4gICAgU1RPUF9CVVRUT046IFwic3RvcC1nZW5lcmF0aW5nLWJ1dHRvblwiLFxuICAgIFNDUk9MTF9CT1RUT01fQlVUVE9OOiBcInNjcm9sbC10by1ib3R0b20tYnV0dG9uXCIsXG5cbiAgIC8vIFN0YXRlcyAmIE1vZGlmaWVyc1xuICAgIFRSQU5TTEFUSU9OX1BFTkRJTkc6IFwidHJhbnNsYXRpb24tcGVuZGluZ1wiLCAvLyBGb3IgdHJhbnNsYXRlIGJ1dHRvbiBtYXliZT9cbiAgICBSRUNPUkRJTkc6IFwicmVjb3JkaW5nXCIsIC8vIEZvciB2b2ljZSBidXR0b25cblxuICAgIFRPT0xfTUVTU0FHRTogXCJ0b29sLW1lc3NhZ2VcIiwgLy8g0JrQu9Cw0YEg0LTQu9GPINC/0L7QstGW0LTQvtC80LvQtdC90L3RjyDQstGW0LQg0ZbQvdGB0YLRgNGD0LzQtdC90YLRg1xuICAgIFRPT0xfUkVTVUxUX0hFQURFUjogXCJ0b29sLXJlc3VsdC1oZWFkZXJcIiwgLy8g0JrQu9Cw0YEg0LTQu9GPINC30LDQs9C+0LvQvtCy0LrQsCDRgNC10LfRg9C70YzRgtCw0YLRgyDRltC90YHRgtGA0YPQvNC10L3RgtGDXG4gICAgVE9PTF9SRVNVTFRfSUNPTjogXCJ0b29sLXJlc3VsdC1pY29uXCIsIC8vINCa0LvQsNGBINC00LvRjyDRltC60L7QvdC60Lgg0LIg0LfQsNCz0L7Qu9C+0LLQutGDINGA0LXQt9GD0LvRjNGC0LDRgtGDXG4gICAgVE9PTF9SRVNVTFRfQ09OVEVOVDogXCJ0b29sLXJlc3VsdC1jb250ZW50XCIsIC8vINCa0LvQsNGBINC00LvRjyDQutC+0L3RgtC10L3RgtGDINGA0LXQt9GD0LvRjNGC0LDRgtGDINGW0L3RgdGC0YDRg9C80LXQvdGC0YNcblxuICAgIFRPT0xfTUVTU0FHRV9HUk9VUDogXCJ0b29sLW1lc3NhZ2UtZ3JvdXBcIiwgLy8g0JrQu9Cw0YEg0LTQu9GPINC+0LHQs9C+0YDRgtC60Lgg0LPRgNGD0L/QuCDQv9C+0LLRltC00L7QvNC70LXQvdC90Y8g0ZbQvdGB0YLRgNGD0LzQtdC90YLRg1xuICAgIE1FU1NBR0VfV1JBUFBFUjogXCJtZXNzYWdlLXdyYXBwZXJcIiAgICwgICAvLyDQmtC70LDRgSDQtNC70Y8g0LLQvdGD0YLRgNGW0YjQvdGM0L7RlyDQvtCx0LPQvtGA0YLQutC4INC/0L7QstGW0LTQvtC80LvQtdC90L3RjyAo0LzRltC2INCw0LLQsNGC0LDRgNC+0Lwg0YLQsCDQstC80ZbRgdGC0L7QvClcbiAgICBTWVNURU1fTUVTU0FHRV9URVhUOiBcInN5c3RlbS1tZXNzYWdlLXRleHRcIiwgLy8gPC0tLSDQlNCe0JTQkNCZ0KLQlSDQptCV0Jkg0JrQm9CQ0KEg0LTQu9GPINGC0LXQutGB0YLRgyDQstGB0LXRgNC10LTQuNC90ZZcblxuICAgIE1FU1NBR0VfQUNUSU9OUzogXCJtZXNzYWdlLWFjdGlvbnMtd3JhcHBlclwiLCAvLyA8LS0tINCU0J7QlNCQ0JnQotCVL9Cf0JXQoNCV0JLQhtCg0KLQlSDQptCV0JlcbiAgICBNRVNTQUdFX0FDVElPTl9CVVRUT046IFwibWVzc2FnZS1hY3Rpb24tYnV0dG9uXCIsIC8vIDwtLS0g0JTQntCU0JDQmdCi0JUv0J/QldCg0JXQktCG0KDQotCVINCm0JXQmVxuXG4gICAgIC8vIC0tLSDQlNCe0JTQkNCZ0KLQlSDQkNCR0J4g0J/QldCg0JXQktCG0KDQotCVINCd0JDQr9CS0J3QhtCh0KLQrCDQptCY0KUg0JrQm9CQ0KHQhtCSINCU0JvQryDQkNCS0JDQotCQ0KDQhtCSIC0tLVxuICAgICBBVkFUQVJfQ09OVEFJTkVSOiBcImF2YXRhci1jb250YWluZXJcIiwgICAgICAgICAvLyDQk9C+0LvQvtCy0L3QuNC5INC60L7QvdGC0LXQudC90LXRgCDQsNCy0LDRgtCw0YDQsFxuICAgICBBVkFUQVJfVVNFUl9TUEVDSUZJQzogXCJ1c2VyLWF2YXRhclwiLCAgICAgIC8vINCh0L/QtdGG0LjRhNGW0YfQvdC40Lkg0LrQu9Cw0YEg0LTQu9GPINCw0LLQsNGC0LDRgNCwINC60L7RgNC40YHRgtGD0LLQsNGH0LBcbiAgICAgQVZBVEFSX0FJX1NQRUNJRklDOiBcImFpLWF2YXRhclwiLCAgICAgICAgICAvLyDQodC/0LXRhtC40YTRltGH0L3QuNC5INC60LvQsNGBINC00LvRjyDQsNCy0LDRgtCw0YDQsCBBSVxuICAgICBBVkFUQVJfSU1BR0U6IFwiYXZhdGFyLWltYWdlXCIsICAgICAgICAgICAgIC8vINCU0LvRjyA8aW1nPiDQsNCy0LDRgtCw0YDQsFxuICAgICBBVkFUQVJfSUNPTjogXCJhdmF0YXItaWNvblwiLCAgICAgICAgICAgICAgIC8vINCU0LvRjyA8c3Bhbj4g0Lcg0ZbQutC+0L3QutC+0Y4g0LDQstCw0YLQsNGA0LBcbiAgICAgQVZBVEFSX0lOSVRJQUxTOiBcImF2YXRhci1pbml0aWFsc1wiLCAgICAgICAvLyDQlNC70Y8gPGRpdj4g0Lcg0ZbQvdGW0YbRltCw0LvQsNC80LhcbiBcbiAgICAgVEhJTktJTkdfQkxPQ0s6IFwidGhpbmtpbmctYmxvY2tcIixcbiAgICAgVEhJTktJTkdfSEVBREVSOiBcInRoaW5raW5nLWhlYWRlclwiLFxuICAgICBUSElOS0lOR19UT0dHTEU6ICBcInRoaW5raW5nLXRvZ2dsZVwiLFxuICAgICBUSElOS0lOR19USVRMRTogXCJ0aGlua2luZy10aXRsZVwiLFxuICAgICBUSElOS0lOR19DT05URU5UOiBcInRoaW5raW5nLWNvbnRlbnRcIiwgICAgICAgICAgICAgICAgIFxuXG4gICAgIC8vIC0tLSDQlNCe0JTQkNCZ0KLQlSDQkNCR0J4g0J/QldCg0JXQktCG0KDQotCVINCd0JDQr9CS0J3QhtCh0KLQrCDQptCY0KUg0JrQm9CQ0KHQhtCSINCU0JvQryDQkdCb0J7QmtCG0JIg0JrQntCU0KMgLS0tXG59O1xuZXhwb3J0IGNvbnN0IFNDUk9MTF9USFJFU0hPTEQgPSAxNTA7Il19