// Добавьте этот файл в ваш проект как stateManager.ts
export class StateManager {
    constructor() {
        this.state = {
            currentPhase: "next goal choosing",
            currentGoal: "Identify if there are any urgent tasks",
            userActivity: "talking with AI",
            hasUrgentTasks: "unknown",
            urgentTasksList: [],
            currentUrgentTask: null,
            planExists: "unknown",
            lastUpdateTime: new Date()
        };
    }
    // Singleton паттерн для доступа к состоянию
    static getInstance() {
        if (!StateManager.instance) {
            StateManager.instance = new StateManager();
        }
        return StateManager.instance;
    }
    // Получить текущее состояние
    getState() {
        // Обновляем время перед возвратом
        this.state.lastUpdateTime = new Date();
        return Object.assign({}, this.state);
    }
    // Обновить состояние
    updateState(newState) {
        this.state = Object.assign(Object.assign(Object.assign({}, this.state), newState), { lastUpdateTime: new Date() });
    }
    // Добавление задачи в список срочных задач
    addUrgentTask(task) {
        if (!this.state.urgentTasksList.includes(task)) {
            this.state.urgentTasksList.push(task);
            // Если нет текущей задачи, устанавливаем первую из списка
            if (!this.state.currentUrgentTask && this.state.urgentTasksList.length > 0) {
                this.state.currentUrgentTask = this.state.urgentTasksList[0];
            }
            this.state.hasUrgentTasks = true;
        }
    }
    // Удаление задачи из списка и обновление текущей задачи
    completeUrgentTask(task) {
        const index = this.state.urgentTasksList.indexOf(task);
        if (index !== -1) {
            this.state.urgentTasksList.splice(index, 1);
            // Если список не пуст, обновляем текущую задачу
            if (this.state.urgentTasksList.length > 0) {
                this.state.currentUrgentTask = this.state.urgentTasksList[0];
            }
            else {
                this.state.currentUrgentTask = null;
                this.state.hasUrgentTasks = false;
            }
        }
    }
    // Получить состояние в формате для вставки в сообщение
    getStateFormatted() {
        const currentTime = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
        return `- **[day phase]** ${this.state.currentPhase}
  - **[next goal]** ${this.state.currentGoal}
  - **[user activity]** ${this.state.userActivity}
  - **[AI time]** ${currentTime}`;
    }
    // Анализ сообщения пользователя для обновления состояния
    processUserMessage(message) {
    }
    // Сохранение состояния в локальное хранилище
    saveStateToStorage() {
        localStorage.setItem('assistantState', JSON.stringify(this.state));
    }
    // Загрузка состояния из локального хранилища
    loadStateFromStorage() {
        const savedState = localStorage.getItem('assistantState');
        if (savedState) {
            try {
                const parsedState = JSON.parse(savedState);
                // Восстанавливаем дату
                parsedState.lastUpdateTime = new Date(parsedState.lastUpdateTime);
                this.state = parsedState;
                return true;
            }
            catch (e) {
                console.error('Error parsing saved state:', e);
            }
        }
        return false;
    }
}
//# sourceMappingURL=data:application/json;base64,