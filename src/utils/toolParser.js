// src/utils/toolParser.ts
/**
 * Parses a text string to find and extract all valid textual tool_call blocks.
 * Each tool_call block is expected to be wrapped in <tool_call>...</tool_call> tags
 * and contain a valid JSON object with "name" and "arguments" properties.
 *
 * @param text The input string to parse.
 * @param logger A logger instance for logging errors or warnings.
 * @returns An array of parsed tool calls. Returns an empty array if no valid calls are found.
 */
export function parseAllTextualToolCalls(text, logger) {
    const calls = [];
    if (!text || typeof text !== 'string') {
        return calls;
    }
    const openTag = "<tool_call>";
    const closeTag = "</tool_call>";
    let currentIndex = 0;
    while (currentIndex < text.length) {
        const openTagIndex = text.indexOf(openTag, currentIndex);
        if (openTagIndex === -1) {
            break; // Більше немає відкриваючих тегів
        }
        // Шукаємо закриваючий тег ПІСЛЯ поточного відкриваючого
        const closeTagIndex = text.indexOf(closeTag, openTagIndex + openTag.length);
        if (closeTagIndex === -1) {
            break;
        }
        const jsonString = text.substring(openTagIndex + openTag.length, closeTagIndex).trim();
        if (!jsonString) {
            currentIndex = closeTagIndex + closeTag.length;
            continue;
        }
        try {
            const parsedJson = JSON.parse(jsonString);
            if (parsedJson &&
                typeof parsedJson.name === 'string' &&
                (typeof parsedJson.arguments === 'object' || parsedJson.arguments === undefined || parsedJson.arguments === null)) {
                calls.push({ name: parsedJson.name, arguments: parsedJson.arguments || {} });
            }
            else {
                logger.error("[toolParser] Parsed JSON does not match expected structure (name: string, arguments: object/undefined/null).", { jsonString, parsedJson });
            }
        }
        catch (e) {
            logger.error(`[toolParser] Failed to parse JSON from tool_call content. JSON string was: "${jsonString}". Error: ${e.message}`);
            // Не додаємо цей виклик, якщо JSON невалідний, і продовжуємо пошук наступних
        }
        currentIndex = closeTagIndex + closeTag.length; // Переходимо до наступного пошуку
    }
    if (calls.length > 0) {
    }
    else if (text.includes(openTag)) {
        // Цей лог може бути корисним, якщо теги є, але жоден не містив валідного JSON
    }
    return calls;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9vbFBhcnNlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInRvb2xQYXJzZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsMEJBQTBCO0FBZ0J4Qjs7Ozs7Ozs7R0FRRztBQUNILE1BQU0sVUFBVSx3QkFBd0IsQ0FBQyxJQUFZLEVBQUUsTUFBYztJQUNuRSxNQUFNLEtBQUssR0FBcUIsRUFBRSxDQUFDO0lBQ25DLElBQUksQ0FBQyxJQUFJLElBQUksT0FBTyxJQUFJLEtBQUssUUFBUSxFQUFFLENBQUM7UUFDaEMsT0FBTyxLQUFLLENBQUM7SUFDckIsQ0FBQztJQUVELE1BQU0sT0FBTyxHQUFHLGFBQWEsQ0FBQztJQUM5QixNQUFNLFFBQVEsR0FBRyxjQUFjLENBQUM7SUFDaEMsSUFBSSxZQUFZLEdBQUcsQ0FBQyxDQUFDO0lBR3JCLE9BQU8sWUFBWSxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNsQyxNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxZQUFZLENBQUMsQ0FBQztRQUN6RCxJQUFJLFlBQVksS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDO1lBQ2hCLE1BQU0sQ0FBQyxrQ0FBa0M7UUFDbkQsQ0FBQztRQUVELHdEQUF3RDtRQUN4RCxNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxZQUFZLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzVFLElBQUksYUFBYSxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUM7WUFDakIsTUFBTTtRQUNoQixDQUFDO1FBRUQsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLEdBQUcsT0FBTyxDQUFDLE1BQU0sRUFBRSxhQUFhLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUV2RixJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7WUFDSixZQUFZLEdBQUcsYUFBYSxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUM7WUFDekQsU0FBUztRQUNiLENBQUM7UUFFRCxJQUFJLENBQUM7WUFDSCxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQzFDLElBQUksVUFBVTtnQkFDVixPQUFPLFVBQVUsQ0FBQyxJQUFJLEtBQUssUUFBUTtnQkFDbkMsQ0FBQyxPQUFPLFVBQVUsQ0FBQyxTQUFTLEtBQUssUUFBUSxJQUFJLFVBQVUsQ0FBQyxTQUFTLEtBQUssU0FBUyxJQUFJLFVBQVUsQ0FBQyxTQUFTLEtBQUssSUFBSSxDQUFDLEVBQ2hILENBQUM7Z0JBQ0osS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksRUFBRSxVQUFVLENBQUMsSUFBSSxFQUFFLFNBQVMsRUFBRSxVQUFVLENBQUMsU0FBUyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDckUsQ0FBQztpQkFBTSxDQUFDO2dCQUNoQixNQUFNLENBQUMsS0FBSyxDQUFDLDhHQUE4RyxFQUFFLEVBQUMsVUFBVSxFQUFFLFVBQVUsRUFBQyxDQUFDLENBQUM7WUFDekosQ0FBQztRQUNILENBQUM7UUFBQyxPQUFPLENBQU0sRUFBRSxDQUFDO1lBQ2hCLE1BQU0sQ0FBQyxLQUFLLENBQUMsK0VBQStFLFVBQVUsYUFBYSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztZQUNoSSw2RUFBNkU7UUFDL0UsQ0FBQztRQUNELFlBQVksR0FBRyxhQUFhLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLGtDQUFrQztJQUNwRixDQUFDO0lBRUQsSUFBSSxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDO0lBQ2pCLENBQUM7U0FBTSxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztRQUN4Qyw4RUFBOEU7SUFDMUUsQ0FBQztJQUNQLE9BQU8sS0FBSyxDQUFDO0FBQ2YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy91dGlscy90b29sUGFyc2VyLnRzXG5cbi8vINCf0YDQuNC/0YPRgdC60LDRlNC80L4sINGJ0L4g0YMg0LLQsNGBINGUINCw0LHQviDQsdGD0LTQtSDRgtC40L8gTG9nZ2VyXG4vLyDQr9C60YnQviDQvdGWLCDQvNC+0LbQtdGC0LUg0YLQuNC80YfQsNGB0L7QstC+INCy0LjQutC+0YDQuNGB0YLQvtCy0YPQstCw0YLQuCBhbnkg0LDQsdC+INCy0LjQt9C90LDRh9C40YLQuCDQv9GA0L7RgdGC0LjQuSDRltC90YLQtdGA0YTQtdC50YEg0YLRg9GCXG5pbnRlcmZhY2UgTG9nZ2VyIHtcbiAgICBkZWJ1ZzogKG1lc3NhZ2U/OiBhbnksIC4uLm9wdGlvbmFsUGFyYW1zOiBhbnlbXSkgPT4gdm9pZDtcbiAgICBpbmZvOiAobWVzc2FnZT86IGFueSwgLi4ub3B0aW9uYWxQYXJhbXM6IGFueVtdKSA9PiB2b2lkO1xuICAgIHdhcm46IChtZXNzYWdlPzogYW55LCAuLi5vcHRpb25hbFBhcmFtczogYW55W10pID0+IHZvaWQ7XG4gICAgZXJyb3I6IChtZXNzYWdlPzogYW55LCAuLi5vcHRpb25hbFBhcmFtczogYW55W10pID0+IHZvaWQ7XG4gIH1cbiAgXG4gIGV4cG9ydCBpbnRlcmZhY2UgUGFyc2VkVG9vbENhbGwge1xuICAgIG5hbWU6IHN0cmluZztcbiAgICBhcmd1bWVudHM6IGFueTsgLy8g0JzQvtC20L3QsCDRg9GC0L7Rh9C90LjRgtC4INGC0LjQvywg0Y/QutGJ0L4g0LLRltC00L7QvNCwINGB0YLRgNGD0LrRgtGD0YDQsCDQsNGA0LPRg9C80LXQvdGC0ZbQslxuICB9XG4gIFxuICAvKipcbiAgICogUGFyc2VzIGEgdGV4dCBzdHJpbmcgdG8gZmluZCBhbmQgZXh0cmFjdCBhbGwgdmFsaWQgdGV4dHVhbCB0b29sX2NhbGwgYmxvY2tzLlxuICAgKiBFYWNoIHRvb2xfY2FsbCBibG9jayBpcyBleHBlY3RlZCB0byBiZSB3cmFwcGVkIGluIDx0b29sX2NhbGw+Li4uPC90b29sX2NhbGw+IHRhZ3NcbiAgICogYW5kIGNvbnRhaW4gYSB2YWxpZCBKU09OIG9iamVjdCB3aXRoIFwibmFtZVwiIGFuZCBcImFyZ3VtZW50c1wiIHByb3BlcnRpZXMuXG4gICAqXG4gICAqIEBwYXJhbSB0ZXh0IFRoZSBpbnB1dCBzdHJpbmcgdG8gcGFyc2UuXG4gICAqIEBwYXJhbSBsb2dnZXIgQSBsb2dnZXIgaW5zdGFuY2UgZm9yIGxvZ2dpbmcgZXJyb3JzIG9yIHdhcm5pbmdzLlxuICAgKiBAcmV0dXJucyBBbiBhcnJheSBvZiBwYXJzZWQgdG9vbCBjYWxscy4gUmV0dXJucyBhbiBlbXB0eSBhcnJheSBpZiBubyB2YWxpZCBjYWxscyBhcmUgZm91bmQuXG4gICAqL1xuICBleHBvcnQgZnVuY3Rpb24gcGFyc2VBbGxUZXh0dWFsVG9vbENhbGxzKHRleHQ6IHN0cmluZywgbG9nZ2VyOiBMb2dnZXIpOiBQYXJzZWRUb29sQ2FsbFtdIHtcbiAgICBjb25zdCBjYWxsczogUGFyc2VkVG9vbENhbGxbXSA9IFtdO1xuICAgIGlmICghdGV4dCB8fCB0eXBlb2YgdGV4dCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWxscztcbiAgICB9XG4gIFxuICAgIGNvbnN0IG9wZW5UYWcgPSBcIjx0b29sX2NhbGw+XCI7XG4gICAgY29uc3QgY2xvc2VUYWcgPSBcIjwvdG9vbF9jYWxsPlwiO1xuICAgIGxldCBjdXJyZW50SW5kZXggPSAwO1xuICBcbiAgICAgIFxuICAgIHdoaWxlIChjdXJyZW50SW5kZXggPCB0ZXh0Lmxlbmd0aCkge1xuICAgICAgY29uc3Qgb3BlblRhZ0luZGV4ID0gdGV4dC5pbmRleE9mKG9wZW5UYWcsIGN1cnJlbnRJbmRleCk7XG4gICAgICBpZiAob3BlblRhZ0luZGV4ID09PSAtMSkge1xuICAgICAgICAgICAgICAgIGJyZWFrOyAvLyDQkdGW0LvRjNGI0LUg0L3QtdC80LDRlCDQstGW0LTQutGA0LjQstCw0Y7Rh9C40YUg0YLQtdCz0ZbQslxuICAgICAgfVxuICBcbiAgICAgIC8vINCo0YPQutCw0ZTQvNC+INC30LDQutGA0LjQstCw0Y7Rh9C40Lkg0YLQtdCzINCf0IbQodCb0K8g0L/QvtGC0L7Rh9C90L7Qs9C+INCy0ZbQtNC60YDQuNCy0LDRjtGH0L7Qs9C+XG4gICAgICBjb25zdCBjbG9zZVRhZ0luZGV4ID0gdGV4dC5pbmRleE9mKGNsb3NlVGFnLCBvcGVuVGFnSW5kZXggKyBvcGVuVGFnLmxlbmd0aCk7XG4gICAgICBpZiAoY2xvc2VUYWdJbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICBicmVhazsgXG4gICAgICB9XG4gIFxuICAgICAgY29uc3QganNvblN0cmluZyA9IHRleHQuc3Vic3RyaW5nKG9wZW5UYWdJbmRleCArIG9wZW5UYWcubGVuZ3RoLCBjbG9zZVRhZ0luZGV4KS50cmltKCk7XG4gICAgICAgICAgICBcbiAgICAgIGlmICghanNvblN0cmluZykge1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50SW5kZXggPSBjbG9zZVRhZ0luZGV4ICsgY2xvc2VUYWcubGVuZ3RoO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICBcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHBhcnNlZEpzb24gPSBKU09OLnBhcnNlKGpzb25TdHJpbmcpO1xuICAgICAgICBpZiAocGFyc2VkSnNvbiAmJiBcbiAgICAgICAgICAgIHR5cGVvZiBwYXJzZWRKc29uLm5hbWUgPT09ICdzdHJpbmcnICYmIFxuICAgICAgICAgICAgKHR5cGVvZiBwYXJzZWRKc29uLmFyZ3VtZW50cyA9PT0gJ29iamVjdCcgfHwgcGFyc2VkSnNvbi5hcmd1bWVudHMgPT09IHVuZGVmaW5lZCB8fCBwYXJzZWRKc29uLmFyZ3VtZW50cyA9PT0gbnVsbClcbiAgICAgICAgICAgKSB7XG4gICAgICAgICAgY2FsbHMucHVzaCh7IG5hbWU6IHBhcnNlZEpzb24ubmFtZSwgYXJndW1lbnRzOiBwYXJzZWRKc29uLmFyZ3VtZW50cyB8fCB7fSB9KTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbG9nZ2VyLmVycm9yKFwiW3Rvb2xQYXJzZXJdIFBhcnNlZCBKU09OIGRvZXMgbm90IG1hdGNoIGV4cGVjdGVkIHN0cnVjdHVyZSAobmFtZTogc3RyaW5nLCBhcmd1bWVudHM6IG9iamVjdC91bmRlZmluZWQvbnVsbCkuXCIsIHtqc29uU3RyaW5nLCBwYXJzZWRKc29ufSk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGU6IGFueSkge1xuICAgICAgICBsb2dnZXIuZXJyb3IoYFt0b29sUGFyc2VyXSBGYWlsZWQgdG8gcGFyc2UgSlNPTiBmcm9tIHRvb2xfY2FsbCBjb250ZW50LiBKU09OIHN0cmluZyB3YXM6IFwiJHtqc29uU3RyaW5nfVwiLiBFcnJvcjogJHtlLm1lc3NhZ2V9YCk7XG4gICAgICAgIC8vINCd0LUg0LTQvtC00LDRlNC80L4g0YbQtdC5INCy0LjQutC70LjQuiwg0Y/QutGJ0L4gSlNPTiDQvdC10LLQsNC70ZbQtNC90LjQuSwg0ZYg0L/RgNC+0LTQvtCy0LbRg9GU0LzQviDQv9C+0YjRg9C6INC90LDRgdGC0YPQv9C90LjRhVxuICAgICAgfVxuICAgICAgY3VycmVudEluZGV4ID0gY2xvc2VUYWdJbmRleCArIGNsb3NlVGFnLmxlbmd0aDsgLy8g0J/QtdGA0LXRhdC+0LTQuNC80L4g0LTQviDQvdCw0YHRgtGD0L/QvdC+0LPQviDQv9C+0YjRg9C60YNcbiAgICB9XG4gIFxuICAgIGlmIChjYWxscy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgfSBlbHNlIGlmICh0ZXh0LmluY2x1ZGVzKG9wZW5UYWcpKSB7XG4gICAgICAvLyDQptC10Lkg0LvQvtCzINC80L7QttC1INCx0YPRgtC4INC60L7RgNC40YHQvdC40LwsINGP0LrRidC+INGC0LXQs9C4INGULCDQsNC70LUg0LbQvtC00LXQvSDQvdC1INC80ZbRgdGC0LjQsiDQstCw0LvRltC00L3QvtCz0L4gSlNPTlxuICAgICAgICAgIH1cbiAgICByZXR1cm4gY2FsbHM7XG4gIH0iXX0=