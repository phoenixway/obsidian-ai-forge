// PromptModal.ts
import { Modal, Setting } from 'obsidian';
export class PromptModal extends Modal {
    constructor(app, title, promptText, initialValue = "", onSubmit // Функція, яка приймає введене значення
    ) {
        super(app);
        this.title = title;
        this.promptText = promptText;
        this.initialValue = initialValue;
        this.onSubmit = onSubmit;
        // Приватний метод для обробки відправки (щоб уникнути дублювання коду для кнопки та Enter)
        this.submitInput = () => {
            // Перевіряємо, чи щось введено (опціонально)
            // if (!this.inputValue?.trim()) {
            //     new Notice("Please enter a value.");
            //     return;
            // }
            this.onSubmit(this.inputValue); // Передаємо значення у callback
            this.close();
        };
        this.title = title;
        this.promptText = promptText;
        this.inputValue = initialValue; // Початкове значення для поля вводу
        this.onSubmit = onSubmit;
    }
    onOpen() {
        const { contentEl, titleEl } = this;
        let textInput; // Зберігаємо посилання на поле вводу
        titleEl.setText(this.title);
        // Додаємо текст підказки (якщо є)
        if (this.promptText) {
            contentEl.createEl('p', { text: this.promptText });
        }
        // Додаємо поле для введення тексту
        new Setting(contentEl)
            .setName("New value:") // Назва поля (можна прибрати, якщо текст вище достатній)
            .addText(text => {
            textInput = text; // Зберігаємо посилання
            text.setValue(this.inputValue)
                .onChange(value => {
                this.inputValue = value; // Оновлюємо значення при зміні
            });
            // Дозволяємо відправку по Enter
            text.inputEl.addEventListener('keydown', (event) => {
                if (event.key === 'Enter') {
                    event.preventDefault(); // Запобігаємо стандартній дії Enter
                    this.submitInput();
                }
            });
        });
        // Додаємо кнопки
        new Setting(contentEl)
            .addButton(button => button
            .setButtonText('Submit')
            .setCta()
            .onClick(this.submitInput)) // Викликаємо наш метод відправки
            .addButton(button => button
            .setButtonText('Cancel')
            .onClick(() => {
            this.close();
        }));
        // Встановлюємо фокус на поле вводу при відкритті
        // Потрібно невелику затримку, щоб поле встигло відрендеритися
        setTimeout(() => {
            var _a, _b;
            (_a = textInput === null || textInput === void 0 ? void 0 : textInput.inputEl) === null || _a === void 0 ? void 0 : _a.focus();
            (_b = textInput === null || textInput === void 0 ? void 0 : textInput.inputEl) === null || _b === void 0 ? void 0 : _b.select(); // Виділяємо початкове значення
        }, 50);
    }
    onClose() {
        const { contentEl } = this;
        contentEl.empty();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUHJvbXB0TW9kYWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJQcm9tcHRNb2RhbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxpQkFBaUI7QUFDakIsT0FBTyxFQUFPLEtBQUssRUFBRSxPQUFPLEVBQWlCLE1BQU0sVUFBVSxDQUFDO0FBRTlELE1BQU0sT0FBTyxXQUFZLFNBQVEsS0FBSztJQUdsQyxZQUNJLEdBQVEsRUFDRCxLQUFhLEVBQ2IsVUFBa0IsRUFDbEIsZUFBdUIsRUFBRSxFQUN6QixRQUFpQyxDQUFDLHdDQUF3Qzs7UUFFakYsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBTEosVUFBSyxHQUFMLEtBQUssQ0FBUTtRQUNiLGVBQVUsR0FBVixVQUFVLENBQVE7UUFDbEIsaUJBQVksR0FBWixZQUFZLENBQWE7UUFDekIsYUFBUSxHQUFSLFFBQVEsQ0FBeUI7UUEyRDVDLDJGQUEyRjtRQUNuRixnQkFBVyxHQUFHLEdBQUcsRUFBRTtZQUN2Qiw2Q0FBNkM7WUFDN0Msa0NBQWtDO1lBQ2xDLDJDQUEyQztZQUMzQyxjQUFjO1lBQ2QsSUFBSTtZQUNKLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsZ0NBQWdDO1lBQ2hFLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUNqQixDQUFDLENBQUE7UUFqRUcsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7UUFDN0IsSUFBSSxDQUFDLFVBQVUsR0FBRyxZQUFZLENBQUMsQ0FBQyxvQ0FBb0M7UUFDcEUsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7SUFDN0IsQ0FBQztJQUVELE1BQU07UUFDRixNQUFNLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFBRSxHQUFHLElBQUksQ0FBQztRQUNwQyxJQUFJLFNBQXdCLENBQUMsQ0FBQyxxQ0FBcUM7UUFFbkUsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFNUIsa0NBQWtDO1FBQ2xDLElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1lBQ2xCLFNBQVMsQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDO1FBQ3ZELENBQUM7UUFFRCxtQ0FBbUM7UUFDbkMsSUFBSSxPQUFPLENBQUMsU0FBUyxDQUFDO2FBQ2pCLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQyx5REFBeUQ7YUFDL0UsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ1osU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLHVCQUF1QjtZQUN6QyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUM7aUJBQ3pCLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBRTtnQkFDZCxJQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQyxDQUFDLCtCQUErQjtZQUM1RCxDQUFDLENBQUMsQ0FBQztZQUNQLGdDQUFnQztZQUNoQyxJQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFO2dCQUMvQyxJQUFJLEtBQUssQ0FBQyxHQUFHLEtBQUssT0FBTyxFQUFFLENBQUM7b0JBQ3hCLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDLG9DQUFvQztvQkFDNUQsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO2dCQUN2QixDQUFDO1lBQ0wsQ0FBQyxDQUFDLENBQUM7UUFDUCxDQUFDLENBQUMsQ0FBQztRQUVQLGlCQUFpQjtRQUNqQixJQUFJLE9BQU8sQ0FBQyxTQUFTLENBQUM7YUFDakIsU0FBUyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTTthQUN0QixhQUFhLENBQUMsUUFBUSxDQUFDO2FBQ3ZCLE1BQU0sRUFBRTthQUNSLE9BQU8sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxpQ0FBaUM7YUFDaEUsU0FBUyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTTthQUN0QixhQUFhLENBQUMsUUFBUSxDQUFDO2FBQ3ZCLE9BQU8sQ0FBQyxHQUFHLEVBQUU7WUFDVixJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDakIsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUVaLGlEQUFpRDtRQUNqRCw4REFBOEQ7UUFDOUQsVUFBVSxDQUFDLEdBQUcsRUFBRTs7WUFDWixNQUFBLFNBQVMsYUFBVCxTQUFTLHVCQUFULFNBQVMsQ0FBRSxPQUFPLDBDQUFFLEtBQUssRUFBRSxDQUFDO1lBQzVCLE1BQUEsU0FBUyxhQUFULFNBQVMsdUJBQVQsU0FBUyxDQUFFLE9BQU8sMENBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQywrQkFBK0I7UUFDakUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBRVgsQ0FBQztJQWFELE9BQU87UUFDSCxNQUFNLEVBQUUsU0FBUyxFQUFFLEdBQUcsSUFBSSxDQUFDO1FBQzNCLFNBQVMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUN0QixDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBQcm9tcHRNb2RhbC50c1xuaW1wb3J0IHsgQXBwLCBNb2RhbCwgU2V0dGluZywgVGV4dENvbXBvbmVudCB9IGZyb20gJ29ic2lkaWFuJztcblxuZXhwb3J0IGNsYXNzIFByb21wdE1vZGFsIGV4dGVuZHMgTW9kYWwge1xuICAgIHByaXZhdGUgaW5wdXRWYWx1ZTogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIGFwcDogQXBwLFxuICAgICAgICBwdWJsaWMgdGl0bGU6IHN0cmluZyxcbiAgICAgICAgcHVibGljIHByb21wdFRleHQ6IHN0cmluZyxcbiAgICAgICAgcHVibGljIGluaXRpYWxWYWx1ZTogc3RyaW5nID0gXCJcIixcbiAgICAgICAgcHVibGljIG9uU3VibWl0OiAodmFsdWU6IHN0cmluZykgPT4gdm9pZCAvLyDQpNGD0L3QutGG0ZbRjywg0Y/QutCwINC/0YDQuNC50LzQsNGUINCy0LLQtdC00LXQvdC1INC30L3QsNGH0LXQvdC90Y9cbiAgICApIHtcbiAgICAgICAgc3VwZXIoYXBwKTtcbiAgICAgICAgdGhpcy50aXRsZSA9IHRpdGxlO1xuICAgICAgICB0aGlzLnByb21wdFRleHQgPSBwcm9tcHRUZXh0O1xuICAgICAgICB0aGlzLmlucHV0VmFsdWUgPSBpbml0aWFsVmFsdWU7IC8vINCf0L7Rh9Cw0YLQutC+0LLQtSDQt9C90LDRh9C10L3QvdGPINC00LvRjyDQv9C+0LvRjyDQstCy0L7QtNGDXG4gICAgICAgIHRoaXMub25TdWJtaXQgPSBvblN1Ym1pdDtcbiAgICB9XG5cbiAgICBvbk9wZW4oKSB7XG4gICAgICAgIGNvbnN0IHsgY29udGVudEVsLCB0aXRsZUVsIH0gPSB0aGlzO1xuICAgICAgICBsZXQgdGV4dElucHV0OiBUZXh0Q29tcG9uZW50OyAvLyDQl9Cx0LXRgNGW0LPQsNGU0LzQviDQv9C+0YHQuNC70LDQvdC90Y8g0L3QsCDQv9C+0LvQtSDQstCy0L7QtNGDXG5cbiAgICAgICAgdGl0bGVFbC5zZXRUZXh0KHRoaXMudGl0bGUpO1xuXG4gICAgICAgIC8vINCU0L7QtNCw0ZTQvNC+INGC0LXQutGB0YIg0L/RltC00LrQsNC30LrQuCAo0Y/QutGJ0L4g0ZQpXG4gICAgICAgIGlmICh0aGlzLnByb21wdFRleHQpIHtcbiAgICAgICAgICAgIGNvbnRlbnRFbC5jcmVhdGVFbCgncCcsIHsgdGV4dDogdGhpcy5wcm9tcHRUZXh0IH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8g0JTQvtC00LDRlNC80L4g0L/QvtC70LUg0LTQu9GPINCy0LLQtdC00LXQvdC90Y8g0YLQtdC60YHRgtGDXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRlbnRFbClcbiAgICAgICAgICAgIC5zZXROYW1lKFwiTmV3IHZhbHVlOlwiKSAvLyDQndCw0LfQstCwINC/0L7Qu9GPICjQvNC+0LbQvdCwINC/0YDQuNCx0YDQsNGC0LgsINGP0LrRidC+INGC0LXQutGB0YIg0LLQuNGJ0LUg0LTQvtGB0YLQsNGC0L3RltC5KVxuICAgICAgICAgICAgLmFkZFRleHQodGV4dCA9PiB7XG4gICAgICAgICAgICAgICAgdGV4dElucHV0ID0gdGV4dDsgLy8g0JfQsdC10YDRltCz0LDRlNC80L4g0L/QvtGB0LjQu9Cw0L3QvdGPXG4gICAgICAgICAgICAgICAgdGV4dC5zZXRWYWx1ZSh0aGlzLmlucHV0VmFsdWUpXG4gICAgICAgICAgICAgICAgICAgIC5vbkNoYW5nZSh2YWx1ZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlucHV0VmFsdWUgPSB2YWx1ZTsgLy8g0J7QvdC+0LLQu9GO0ZTQvNC+INC30L3QsNGH0LXQvdC90Y8g0L/RgNC4INC30LzRltC90ZZcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgLy8g0JTQvtC30LLQvtC70Y/RlNC80L4g0LLRltC00L/RgNCw0LLQutGDINC/0L4gRW50ZXJcbiAgICAgICAgICAgICAgICB0ZXh0LmlucHV0RWwuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQua2V5ID09PSAnRW50ZXInKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOyAvLyDQl9Cw0L/QvtCx0ZbQs9Cw0ZTQvNC+INGB0YLQsNC90LTQsNGA0YLQvdGW0Lkg0LTRltGXIEVudGVyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN1Ym1pdElucHV0KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIC8vINCU0L7QtNCw0ZTQvNC+INC60L3QvtC/0LrQuFxuICAgICAgICBuZXcgU2V0dGluZyhjb250ZW50RWwpXG4gICAgICAgICAgICAuYWRkQnV0dG9uKGJ1dHRvbiA9PiBidXR0b25cbiAgICAgICAgICAgICAgICAuc2V0QnV0dG9uVGV4dCgnU3VibWl0JylcbiAgICAgICAgICAgICAgICAuc2V0Q3RhKClcbiAgICAgICAgICAgICAgICAub25DbGljayh0aGlzLnN1Ym1pdElucHV0KSkgLy8g0JLQuNC60LvQuNC60LDRlNC80L4g0L3QsNGIINC80LXRgtC+0LQg0LLRltC00L/RgNCw0LLQutC4XG4gICAgICAgICAgICAuYWRkQnV0dG9uKGJ1dHRvbiA9PiBidXR0b25cbiAgICAgICAgICAgICAgICAuc2V0QnV0dG9uVGV4dCgnQ2FuY2VsJylcbiAgICAgICAgICAgICAgICAub25DbGljaygoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgLy8g0JLRgdGC0LDQvdC+0LLQu9GO0ZTQvNC+INGE0L7QutGD0YEg0L3QsCDQv9C+0LvQtSDQstCy0L7QtNGDINC/0YDQuCDQstGW0LTQutGA0LjRgtGC0ZZcbiAgICAgICAgLy8g0J/QvtGC0YDRltCx0L3QviDQvdC10LLQtdC70LjQutGDINC30LDRgtGA0LjQvNC60YMsINGJ0L7QsSDQv9C+0LvQtSDQstGB0YLQuNCz0LvQviDQstGW0LTRgNC10L3QtNC10YDQuNGC0LjRgdGPXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgdGV4dElucHV0Py5pbnB1dEVsPy5mb2N1cygpO1xuICAgICAgICAgICAgdGV4dElucHV0Py5pbnB1dEVsPy5zZWxlY3QoKTsgLy8g0JLQuNC00ZbQu9GP0ZTQvNC+INC/0L7Rh9Cw0YLQutC+0LLQtSDQt9C90LDRh9C10L3QvdGPXG4gICAgICAgIH0sIDUwKTtcblxuICAgIH1cblxuICAgIC8vINCf0YDQuNCy0LDRgtC90LjQuSDQvNC10YLQvtC0INC00LvRjyDQvtCx0YDQvtCx0LrQuCDQstGW0LTQv9GA0LDQstC60LggKNGJ0L7QsSDRg9C90LjQutC90YPRgtC4INC00YPQsdC70Y7QstCw0L3QvdGPINC60L7QtNGDINC00LvRjyDQutC90L7Qv9C60Lgg0YLQsCBFbnRlcilcbiAgICBwcml2YXRlIHN1Ym1pdElucHV0ID0gKCkgPT4ge1xuICAgICAgICAvLyDQn9C10YDQtdCy0ZbRgNGP0ZTQvNC+LCDRh9C4INGJ0L7RgdGMINCy0LLQtdC00LXQvdC+ICjQvtC/0YbRltC+0L3QsNC70YzQvdC+KVxuICAgICAgICAvLyBpZiAoIXRoaXMuaW5wdXRWYWx1ZT8udHJpbSgpKSB7XG4gICAgICAgIC8vICAgICBuZXcgTm90aWNlKFwiUGxlYXNlIGVudGVyIGEgdmFsdWUuXCIpO1xuICAgICAgICAvLyAgICAgcmV0dXJuO1xuICAgICAgICAvLyB9XG4gICAgICAgIHRoaXMub25TdWJtaXQodGhpcy5pbnB1dFZhbHVlKTsgLy8g0J/QtdGA0LXQtNCw0ZTQvNC+INC30L3QsNGH0LXQvdC90Y8g0YMgY2FsbGJhY2tcbiAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgIH1cblxuICAgIG9uQ2xvc2UoKSB7XG4gICAgICAgIGNvbnN0IHsgY29udGVudEVsIH0gPSB0aGlzO1xuICAgICAgICBjb250ZW50RWwuZW1wdHkoKTtcbiAgICB9XG59Il19