// src/renderers/ToolMessageRenderer.ts
import { setIcon } from "obsidian";
import { BaseMessageRenderer } from "./BaseMessageRenderer";
import { CSS_CLASSES } from "../constants"; // Адаптуйте шлях
export class ToolMessageRenderer extends BaseMessageRenderer {
    constructor(app, plugin, message, view) {
        super(app, plugin, message, view);
    }
    render() {
        const messageGroupEl = this.createMessageGroupWrapper([CSS_CLASSES.TOOL_MESSAGE_GROUP || "tool-message-group"]);
        this.addAvatar(messageGroupEl, false);
        const messageWrapperEl = messageGroupEl.createDiv({ cls: CSS_CLASSES.MESSAGE_WRAPPER });
        const { messageEl, contentContainer, contentEl } = this.createMessageBubble(messageWrapperEl, [CSS_CLASSES.TOOL_MESSAGE]);
        this.renderToolSpecificContent(contentEl, this.message.content);
        BaseMessageRenderer.addTimestamp(messageEl, this.message.timestamp, this.view);
        this.addBaseActionButtons(messageEl, this.message.content); // Передаємо оригінальний контент з маркерами, якщо кнопки копіювання мають копіювати саме його
        return messageGroupEl;
    }
    renderToolSpecificContent(contentEl, rawContentWithMarkers) {
        contentEl.empty();
        const toolHeader = contentEl.createDiv({ cls: CSS_CLASSES.TOOL_RESULT_HEADER });
        const iconSpan = toolHeader.createSpan({ cls: CSS_CLASSES.TOOL_RESULT_ICON });
        setIcon(iconSpan, "wrench");
        toolHeader.createSpan({
            text: `Tool Executed: ${this.message.name || "Unknown Tool"}`,
        });
        const preEl = contentEl.createEl("pre", { cls: CSS_CLASSES.TOOL_RESULT_CONTENT });
        const codeEl = preEl.createEl("code");
        let displayContent = rawContentWithMarkers;
        const toolResultStartMarker = "[TOOL_RESULT]\n";
        const toolResultEndMarker = "\n[/TOOL_RESULT]";
        const toolErrorStartMarker = "[TOOL_ERROR]\n";
        const toolErrorEndMarker = "\n[/TOOL_ERROR]";
        if (displayContent.startsWith(toolResultStartMarker) && displayContent.endsWith(toolResultEndMarker)) {
            displayContent = displayContent.substring(toolResultStartMarker.length, displayContent.length - toolResultEndMarker.length);
        }
        else if (displayContent.startsWith(toolErrorStartMarker) && displayContent.endsWith(toolErrorEndMarker)) {
            displayContent = displayContent.substring(toolErrorStartMarker.length, displayContent.length - toolErrorEndMarker.length);
            // Можна додати спеціальну стилізацію для помилок інструменту тут, якщо потрібно
            // Наприклад, додати клас до preEl або codeEl
            preEl.addClass("tool-execution-error-display"); // Приклад класу
        }
        codeEl.setText(displayContent.trim());
    }
}
//# sourceMappingURL=data:application/json;base64,