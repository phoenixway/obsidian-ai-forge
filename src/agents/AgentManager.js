import { __awaiter } from "tslib";
import { SimpleFileAgent } from "@/examples/SimpleFileAgent"; // Приклад агента
export class AgentManager {
    constructor(plugin) {
        this.agents = new Map();
        this.plugin = plugin;
        this.registerDefaultAgents();
    }
    registerDefaultAgents() {
        const fileAgent = new SimpleFileAgent();
        this.registerAgent(fileAgent);
        // тут можна додати інших агентів
    }
    registerAgent(agent) {
        if (this.agents.has(agent.id)) {
        }
        this.agents.set(agent.id, agent);
    }
    getAgent(id) {
        return this.agents.get(id);
    }
    /**
     * Збирає визначення всіх інструментів від усіх зареєстрованих агентів.
     */
    getAllToolDefinitions() {
        let allTools = [];
        this.agents.forEach(agent => {
            try {
                const agentTools = agent.getTools();
                if (Array.isArray(agentTools)) {
                    allTools = allTools.concat(agentTools);
                }
                else {
                }
            }
            catch (error) { }
        });
        // Перевірка на унікальність імен інструментів
        const toolNames = new Set();
        const uniqueTools = allTools.filter(tool => {
            if (toolNames.has(tool.name)) {
                return false;
            }
            toolNames.add(tool.name);
            return true;
        });
        return uniqueTools;
    }
    /**
     * Виконує інструмент, знаходячи відповідний агент.
     * @param toolName Назва інструменту.
     * @param args Аргументи для інструменту (вже розпарсені з JSON-рядка).
     */
    executeTool(toolName, args) {
        return __awaiter(this, void 0, void 0, function* () {
            for (const agent of this.agents.values()) {
                const agentTool = agent.getTools().find(t => t.name === toolName);
                if (agentTool) {
                    try {
                        const result = yield agent.executeTool(toolName, args, this.plugin);
                        return { success: true, result: typeof result === "string" ? result : JSON.stringify(result) };
                    }
                    catch (e) {
                        return { success: false, result: "", error: e.message || "Unknown error during tool execution." };
                    }
                }
            }
            return { success: false, result: "", error: `Tool "${toolName}" not found.` };
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQWdlbnRNYW5hZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiQWdlbnRNYW5hZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFHQSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sNEJBQTRCLENBQUMsQ0FBQyxpQkFBaUI7QUFFL0UsTUFBTSxPQUFPLFlBQVk7SUFJdkIsWUFBWSxNQUFvQjtRQUh4QixXQUFNLEdBQXdCLElBQUksR0FBRyxFQUFFLENBQUM7UUFJOUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDckIsSUFBSSxDQUFDLHFCQUFxQixFQUFFLENBQUM7SUFDL0IsQ0FBQztJQUVPLHFCQUFxQjtRQUMzQixNQUFNLFNBQVMsR0FBRyxJQUFJLGVBQWUsRUFBRSxDQUFDO1FBQ3hDLElBQUksQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDOUIsaUNBQWlDO0lBQ25DLENBQUM7SUFFTSxhQUFhLENBQUMsS0FBYTtRQUNoQyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO1FBQ2hDLENBQUM7UUFDRCxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ25DLENBQUM7SUFFTSxRQUFRLENBQUMsRUFBVTtRQUN4QixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzdCLENBQUM7SUFFRDs7T0FFRztJQUNJLHFCQUFxQjtRQUMxQixJQUFJLFFBQVEsR0FBb0IsRUFBRSxDQUFDO1FBQ25DLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQzFCLElBQUksQ0FBQztnQkFDSCxNQUFNLFVBQVUsR0FBRyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7Z0JBQ3BDLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDO29CQUM5QixRQUFRLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztnQkFDekMsQ0FBQztxQkFBTSxDQUFDO2dCQUNSLENBQUM7WUFDSCxDQUFDO1lBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQyxDQUFBLENBQUM7UUFDcEIsQ0FBQyxDQUFDLENBQUM7UUFDSCw4Q0FBOEM7UUFDOUMsTUFBTSxTQUFTLEdBQUcsSUFBSSxHQUFHLEVBQVUsQ0FBQztRQUNwQyxNQUFNLFdBQVcsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3pDLElBQUksU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQztnQkFDN0IsT0FBTyxLQUFLLENBQUM7WUFDZixDQUFDO1lBQ0QsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDekIsT0FBTyxJQUFJLENBQUM7UUFDZCxDQUFDLENBQUMsQ0FBQztRQUNILE9BQU8sV0FBVyxDQUFDO0lBQ3JCLENBQUM7SUFFRDs7OztPQUlHO0lBQ1UsV0FBVyxDQUFDLFFBQWdCLEVBQUUsSUFBUzs7WUFDbEQsS0FBSyxNQUFNLEtBQUssSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUM7Z0JBQ3pDLE1BQU0sU0FBUyxHQUFHLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxLQUFLLFFBQVEsQ0FBQyxDQUFDO2dCQUNsRSxJQUFJLFNBQVMsRUFBRSxDQUFDO29CQUNkLElBQUksQ0FBQzt3QkFDSCxNQUFNLE1BQU0sR0FBRyxNQUFNLEtBQUssQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7d0JBQ3BFLE9BQU8sRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxPQUFPLE1BQU0sS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDO29CQUNqRyxDQUFDO29CQUFDLE9BQU8sQ0FBTSxFQUFFLENBQUM7d0JBQ2hCLE9BQU8sRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQyxPQUFPLElBQUksc0NBQXNDLEVBQUUsQ0FBQztvQkFDcEcsQ0FBQztnQkFDSCxDQUFDO1lBQ0gsQ0FBQztZQUNELE9BQU8sRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLFNBQVMsUUFBUSxjQUFjLEVBQUUsQ0FBQztRQUNoRixDQUFDO0tBQUE7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9hZ2VudHMvQWdlbnRNYW5hZ2VyLnRzXG5pbXBvcnQgT2xsYW1hUGx1Z2luIGZyb20gXCJAL21haW5cIjsgLy8g0JDQtNCw0L/RgtGD0LnRgtC1INGI0LvRj9GFXG5pbXBvcnQgeyBJQWdlbnQsIElUb29sRnVuY3Rpb24gfSBmcm9tIFwiLi9JQWdlbnRcIjtcbmltcG9ydCB7IFNpbXBsZUZpbGVBZ2VudCB9IGZyb20gXCJAL2V4YW1wbGVzL1NpbXBsZUZpbGVBZ2VudFwiOyAvLyDQn9GA0LjQutC70LDQtCDQsNCz0LXQvdGC0LBcblxuZXhwb3J0IGNsYXNzIEFnZW50TWFuYWdlciB7XG4gIHByaXZhdGUgYWdlbnRzOiBNYXA8c3RyaW5nLCBJQWdlbnQ+ID0gbmV3IE1hcCgpO1xuICBwcml2YXRlIHBsdWdpbjogT2xsYW1hUGx1Z2luO1xuXG4gIGNvbnN0cnVjdG9yKHBsdWdpbjogT2xsYW1hUGx1Z2luKSB7XG4gICAgdGhpcy5wbHVnaW4gPSBwbHVnaW47XG4gICAgdGhpcy5yZWdpc3RlckRlZmF1bHRBZ2VudHMoKTtcbiAgfVxuXG4gIHByaXZhdGUgcmVnaXN0ZXJEZWZhdWx0QWdlbnRzKCk6IHZvaWQge1xuICAgIGNvbnN0IGZpbGVBZ2VudCA9IG5ldyBTaW1wbGVGaWxlQWdlbnQoKTtcbiAgICB0aGlzLnJlZ2lzdGVyQWdlbnQoZmlsZUFnZW50KTtcbiAgICAvLyDRgtGD0YIg0LzQvtC20L3QsCDQtNC+0LTQsNGC0Lgg0ZbQvdGI0LjRhSDQsNCz0LXQvdGC0ZbQslxuICB9XG5cbiAgcHVibGljIHJlZ2lzdGVyQWdlbnQoYWdlbnQ6IElBZ2VudCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmFnZW50cy5oYXMoYWdlbnQuaWQpKSB7XG4gICAgfVxuICAgIHRoaXMuYWdlbnRzLnNldChhZ2VudC5pZCwgYWdlbnQpO1xuICB9XG5cbiAgcHVibGljIGdldEFnZW50KGlkOiBzdHJpbmcpOiBJQWdlbnQgfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzLmFnZW50cy5nZXQoaWQpO1xuICB9XG5cbiAgLyoqXG4gICAqINCX0LHQuNGA0LDRlCDQstC40LfQvdCw0YfQtdC90L3RjyDQstGB0ZbRhSDRltC90YHRgtGA0YPQvNC10L3RgtGW0LIg0LLRltC0INGD0YHRltGFINC30LDRgNC10ZTRgdGC0YDQvtCy0LDQvdC40YUg0LDQs9C10L3RgtGW0LIuXG4gICAqL1xuICBwdWJsaWMgZ2V0QWxsVG9vbERlZmluaXRpb25zKCk6IElUb29sRnVuY3Rpb25bXSB7XG4gICAgbGV0IGFsbFRvb2xzOiBJVG9vbEZ1bmN0aW9uW10gPSBbXTtcbiAgICB0aGlzLmFnZW50cy5mb3JFYWNoKGFnZW50ID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGFnZW50VG9vbHMgPSBhZ2VudC5nZXRUb29scygpO1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShhZ2VudFRvb2xzKSkge1xuICAgICAgICAgIGFsbFRvb2xzID0gYWxsVG9vbHMuY29uY2F0KGFnZW50VG9vbHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnJvcikge31cbiAgICB9KTtcbiAgICAvLyDQn9C10YDQtdCy0ZbRgNC60LAg0L3QsCDRg9C90ZbQutCw0LvRjNC90ZbRgdGC0Ywg0ZbQvNC10L0g0ZbQvdGB0YLRgNGD0LzQtdC90YLRltCyXG4gICAgY29uc3QgdG9vbE5hbWVzID0gbmV3IFNldDxzdHJpbmc+KCk7XG4gICAgY29uc3QgdW5pcXVlVG9vbHMgPSBhbGxUb29scy5maWx0ZXIodG9vbCA9PiB7XG4gICAgICBpZiAodG9vbE5hbWVzLmhhcyh0b29sLm5hbWUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHRvb2xOYW1lcy5hZGQodG9vbC5uYW1lKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0pO1xuICAgIHJldHVybiB1bmlxdWVUb29scztcbiAgfVxuXG4gIC8qKlxuICAgKiDQktC40LrQvtC90YPRlCDRltC90YHRgtGA0YPQvNC10L3Rgiwg0LfQvdCw0YXQvtC00Y/Rh9C4INCy0ZbQtNC/0L7QstGW0LTQvdC40Lkg0LDQs9C10L3Rgi5cbiAgICogQHBhcmFtIHRvb2xOYW1lINCd0LDQt9Cy0LAg0ZbQvdGB0YLRgNGD0LzQtdC90YLRgy5cbiAgICogQHBhcmFtIGFyZ3Mg0JDRgNCz0YPQvNC10L3RgtC4INC00LvRjyDRltC90YHRgtGA0YPQvNC10L3RgtGDICjQstC20LUg0YDQvtC30L/QsNGA0YHQtdC90ZYg0LcgSlNPTi3RgNGP0LTQutCwKS5cbiAgICovXG4gIHB1YmxpYyBhc3luYyBleGVjdXRlVG9vbCh0b29sTmFtZTogc3RyaW5nLCBhcmdzOiBhbnkpOiBQcm9taXNlPHsgc3VjY2VzczogYm9vbGVhbjsgcmVzdWx0OiBzdHJpbmc7IGVycm9yPzogc3RyaW5nIH0+IHtcbiAgICBmb3IgKGNvbnN0IGFnZW50IG9mIHRoaXMuYWdlbnRzLnZhbHVlcygpKSB7XG4gICAgICBjb25zdCBhZ2VudFRvb2wgPSBhZ2VudC5nZXRUb29scygpLmZpbmQodCA9PiB0Lm5hbWUgPT09IHRvb2xOYW1lKTtcbiAgICAgIGlmIChhZ2VudFRvb2wpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBhZ2VudC5leGVjdXRlVG9vbCh0b29sTmFtZSwgYXJncywgdGhpcy5wbHVnaW4pO1xuICAgICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUsIHJlc3VsdDogdHlwZW9mIHJlc3VsdCA9PT0gXCJzdHJpbmdcIiA/IHJlc3VsdCA6IEpTT04uc3RyaW5naWZ5KHJlc3VsdCkgfTtcbiAgICAgICAgfSBjYXRjaCAoZTogYW55KSB7XG4gICAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIHJlc3VsdDogXCJcIiwgZXJyb3I6IGUubWVzc2FnZSB8fCBcIlVua25vd24gZXJyb3IgZHVyaW5nIHRvb2wgZXhlY3V0aW9uLlwiIH07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIHJlc3VsdDogXCJcIiwgZXJyb3I6IGBUb29sIFwiJHt0b29sTmFtZX1cIiBub3QgZm91bmQuYCB9O1xuICB9XG59XG4iXX0=