import { __awaiter } from "tslib";
import { SimpleFileAgent } from "@/examples/SimpleFileAgent"; // Приклад агента
import { WeatherAgent } from "@/examples/WeatherAgent";
export class AgentManager {
    constructor(plugin) {
        this.agents = new Map();
        this.plugin = plugin;
        this.registerDefaultAgents();
    }
    registerDefaultAgents() {
        const fileAgent = new SimpleFileAgent();
        this.registerAgent(fileAgent);
        const weatherAgent = new WeatherAgent();
        this.registerAgent(weatherAgent);
        // тут можна додати інших агентів
    }
    registerAgent(agent) {
        if (this.agents.has(agent.id)) {
        }
        this.agents.set(agent.id, agent);
    }
    getAgent(id) {
        return this.agents.get(id);
    }
    /**
     * Збирає визначення всіх інструментів від усіх зареєстрованих агентів.
     */
    getAllToolDefinitions() {
        let allTools = [];
        this.agents.forEach(agent => {
            try {
                const agentTools = agent.getTools();
                if (Array.isArray(agentTools)) {
                    allTools = allTools.concat(agentTools);
                }
                else {
                }
            }
            catch (error) { }
        });
        // Перевірка на унікальність імен інструментів
        const toolNames = new Set();
        const uniqueTools = allTools.filter(tool => {
            if (toolNames.has(tool.name)) {
                return false;
            }
            toolNames.add(tool.name);
            return true;
        });
        return uniqueTools;
    }
    /**
     * Виконує інструмент, знаходячи відповідний агент.
     * @param toolName Назва інструменту.
     * @param args Аргументи для інструменту (вже розпарсені з JSON-рядка).
     */
    executeTool(toolName, args) {
        return __awaiter(this, void 0, void 0, function* () {
            for (const agent of this.agents.values()) {
                const agentTool = agent.getTools().find(t => t.name === toolName);
                if (agentTool) {
                    try {
                        const result = yield agent.executeTool(toolName, args, this.plugin);
                        return { success: true, result: typeof result === "string" ? result : JSON.stringify(result) };
                    }
                    catch (e) {
                        return { success: false, result: "", error: e.message || "Unknown error during tool execution." };
                    }
                }
            }
            return { success: false, result: "", error: `Tool "${toolName}" not found.` };
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQWdlbnRNYW5hZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiQWdlbnRNYW5hZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFHQSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sNEJBQTRCLENBQUMsQ0FBQyxpQkFBaUI7QUFDL0UsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBRXZELE1BQU0sT0FBTyxZQUFZO0lBSXZCLFlBQVksTUFBb0I7UUFIeEIsV0FBTSxHQUF3QixJQUFJLEdBQUcsRUFBRSxDQUFDO1FBSTlDLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO0lBQy9CLENBQUM7SUFFTyxxQkFBcUI7UUFDM0IsTUFBTSxTQUFTLEdBQUcsSUFBSSxlQUFlLEVBQUUsQ0FBQztRQUN4QyxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzlCLE1BQU0sWUFBWSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFDeEMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUNqQyxpQ0FBaUM7SUFDbkMsQ0FBQztJQUVNLGFBQWEsQ0FBQyxLQUFhO1FBQ2hDLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7UUFDaEMsQ0FBQztRQUNELElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUVNLFFBQVEsQ0FBQyxFQUFVO1FBQ3hCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDN0IsQ0FBQztJQUVEOztPQUVHO0lBQ0kscUJBQXFCO1FBQzFCLElBQUksUUFBUSxHQUFvQixFQUFFLENBQUM7UUFDbkMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDMUIsSUFBSSxDQUFDO2dCQUNILE1BQU0sVUFBVSxHQUFHLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztnQkFDcEMsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUM7b0JBQzlCLFFBQVEsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO2dCQUN6QyxDQUFDO3FCQUFNLENBQUM7Z0JBQ1IsQ0FBQztZQUNILENBQUM7WUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDLENBQUEsQ0FBQztRQUNwQixDQUFDLENBQUMsQ0FBQztRQUNILDhDQUE4QztRQUM5QyxNQUFNLFNBQVMsR0FBRyxJQUFJLEdBQUcsRUFBVSxDQUFDO1FBQ3BDLE1BQU0sV0FBVyxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDekMsSUFBSSxTQUFTLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO2dCQUM3QixPQUFPLEtBQUssQ0FBQztZQUNmLENBQUM7WUFDRCxTQUFTLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN6QixPQUFPLElBQUksQ0FBQztRQUNkLENBQUMsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxXQUFXLENBQUM7SUFDckIsQ0FBQztJQUVEOzs7O09BSUc7SUFDVSxXQUFXLENBQUMsUUFBZ0IsRUFBRSxJQUFTOztZQUNsRCxLQUFLLE1BQU0sS0FBSyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQztnQkFDekMsTUFBTSxTQUFTLEdBQUcsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssUUFBUSxDQUFDLENBQUM7Z0JBQ2xFLElBQUksU0FBUyxFQUFFLENBQUM7b0JBQ2QsSUFBSSxDQUFDO3dCQUNILE1BQU0sTUFBTSxHQUFHLE1BQU0sS0FBSyxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQzt3QkFDcEUsT0FBTyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLE9BQU8sTUFBTSxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUM7b0JBQ2pHLENBQUM7b0JBQUMsT0FBTyxDQUFNLEVBQUUsQ0FBQzt3QkFDaEIsT0FBTyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDLE9BQU8sSUFBSSxzQ0FBc0MsRUFBRSxDQUFDO29CQUNwRyxDQUFDO2dCQUNILENBQUM7WUFDSCxDQUFDO1lBQ0QsT0FBTyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsU0FBUyxRQUFRLGNBQWMsRUFBRSxDQUFDO1FBQ2hGLENBQUM7S0FBQTtDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL2FnZW50cy9BZ2VudE1hbmFnZXIudHNcbmltcG9ydCBPbGxhbWFQbHVnaW4gZnJvbSBcIkAvbWFpblwiOyAvLyDQkNC00LDQv9GC0YPQudGC0LUg0YjQu9GP0YVcbmltcG9ydCB7IElBZ2VudCwgSVRvb2xGdW5jdGlvbiB9IGZyb20gXCIuL0lBZ2VudFwiO1xuaW1wb3J0IHsgU2ltcGxlRmlsZUFnZW50IH0gZnJvbSBcIkAvZXhhbXBsZXMvU2ltcGxlRmlsZUFnZW50XCI7IC8vINCf0YDQuNC60LvQsNC0INCw0LPQtdC90YLQsFxuaW1wb3J0IHsgV2VhdGhlckFnZW50IH0gZnJvbSBcIkAvZXhhbXBsZXMvV2VhdGhlckFnZW50XCI7XG5cbmV4cG9ydCBjbGFzcyBBZ2VudE1hbmFnZXIge1xuICBwcml2YXRlIGFnZW50czogTWFwPHN0cmluZywgSUFnZW50PiA9IG5ldyBNYXAoKTtcbiAgcHJpdmF0ZSBwbHVnaW46IE9sbGFtYVBsdWdpbjtcblxuICBjb25zdHJ1Y3RvcihwbHVnaW46IE9sbGFtYVBsdWdpbikge1xuICAgIHRoaXMucGx1Z2luID0gcGx1Z2luO1xuICAgIHRoaXMucmVnaXN0ZXJEZWZhdWx0QWdlbnRzKCk7XG4gIH1cblxuICBwcml2YXRlIHJlZ2lzdGVyRGVmYXVsdEFnZW50cygpOiB2b2lkIHtcbiAgICBjb25zdCBmaWxlQWdlbnQgPSBuZXcgU2ltcGxlRmlsZUFnZW50KCk7XG4gICAgdGhpcy5yZWdpc3RlckFnZW50KGZpbGVBZ2VudCk7XG4gICAgY29uc3Qgd2VhdGhlckFnZW50ID0gbmV3IFdlYXRoZXJBZ2VudCgpO1xuICAgIHRoaXMucmVnaXN0ZXJBZ2VudCh3ZWF0aGVyQWdlbnQpO1xuICAgIC8vINGC0YPRgiDQvNC+0LbQvdCwINC00L7QtNCw0YLQuCDRltC90YjQuNGFINCw0LPQtdC90YLRltCyXG4gIH1cblxuICBwdWJsaWMgcmVnaXN0ZXJBZ2VudChhZ2VudDogSUFnZW50KTogdm9pZCB7XG4gICAgaWYgKHRoaXMuYWdlbnRzLmhhcyhhZ2VudC5pZCkpIHtcbiAgICB9XG4gICAgdGhpcy5hZ2VudHMuc2V0KGFnZW50LmlkLCBhZ2VudCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0QWdlbnQoaWQ6IHN0cmluZyk6IElBZ2VudCB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuYWdlbnRzLmdldChpZCk7XG4gIH1cblxuICAvKipcbiAgICog0JfQsdC40YDQsNGUINCy0LjQt9C90LDRh9C10L3QvdGPINCy0YHRltGFINGW0L3RgdGC0YDRg9C80LXQvdGC0ZbQsiDQstGW0LQg0YPRgdGW0YUg0LfQsNGA0LXRlNGB0YLRgNC+0LLQsNC90LjRhSDQsNCz0LXQvdGC0ZbQsi5cbiAgICovXG4gIHB1YmxpYyBnZXRBbGxUb29sRGVmaW5pdGlvbnMoKTogSVRvb2xGdW5jdGlvbltdIHtcbiAgICBsZXQgYWxsVG9vbHM6IElUb29sRnVuY3Rpb25bXSA9IFtdO1xuICAgIHRoaXMuYWdlbnRzLmZvckVhY2goYWdlbnQgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgYWdlbnRUb29scyA9IGFnZW50LmdldFRvb2xzKCk7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGFnZW50VG9vbHMpKSB7XG4gICAgICAgICAgYWxsVG9vbHMgPSBhbGxUb29scy5jb25jYXQoYWdlbnRUb29scyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7fVxuICAgIH0pO1xuICAgIC8vINCf0LXRgNC10LLRltGA0LrQsCDQvdCwINGD0L3RltC60LDQu9GM0L3RltGB0YLRjCDRltC80LXQvSDRltC90YHRgtGA0YPQvNC10L3RgtGW0LJcbiAgICBjb25zdCB0b29sTmFtZXMgPSBuZXcgU2V0PHN0cmluZz4oKTtcbiAgICBjb25zdCB1bmlxdWVUb29scyA9IGFsbFRvb2xzLmZpbHRlcih0b29sID0+IHtcbiAgICAgIGlmICh0b29sTmFtZXMuaGFzKHRvb2wubmFtZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdG9vbE5hbWVzLmFkZCh0b29sLm5hbWUpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSk7XG4gICAgcmV0dXJuIHVuaXF1ZVRvb2xzO1xuICB9XG5cbiAgLyoqXG4gICAqINCS0LjQutC+0L3Rg9GUINGW0L3RgdGC0YDRg9C80LXQvdGCLCDQt9C90LDRhdC+0LTRj9GH0Lgg0LLRltC00L/QvtCy0ZbQtNC90LjQuSDQsNCz0LXQvdGCLlxuICAgKiBAcGFyYW0gdG9vbE5hbWUg0J3QsNC30LLQsCDRltC90YHRgtGA0YPQvNC10L3RgtGDLlxuICAgKiBAcGFyYW0gYXJncyDQkNGA0LPRg9C80LXQvdGC0Lgg0LTQu9GPINGW0L3RgdGC0YDRg9C80LXQvdGC0YMgKNCy0LbQtSDRgNC+0LfQv9Cw0YDRgdC10L3RliDQtyBKU09OLdGA0Y/QtNC60LApLlxuICAgKi9cbiAgcHVibGljIGFzeW5jIGV4ZWN1dGVUb29sKHRvb2xOYW1lOiBzdHJpbmcsIGFyZ3M6IGFueSk6IFByb21pc2U8eyBzdWNjZXNzOiBib29sZWFuOyByZXN1bHQ6IHN0cmluZzsgZXJyb3I/OiBzdHJpbmcgfT4ge1xuICAgIGZvciAoY29uc3QgYWdlbnQgb2YgdGhpcy5hZ2VudHMudmFsdWVzKCkpIHtcbiAgICAgIGNvbnN0IGFnZW50VG9vbCA9IGFnZW50LmdldFRvb2xzKCkuZmluZCh0ID0+IHQubmFtZSA9PT0gdG9vbE5hbWUpO1xuICAgICAgaWYgKGFnZW50VG9vbCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGFnZW50LmV4ZWN1dGVUb29sKHRvb2xOYW1lLCBhcmdzLCB0aGlzLnBsdWdpbik7XG4gICAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSwgcmVzdWx0OiB0eXBlb2YgcmVzdWx0ID09PSBcInN0cmluZ1wiID8gcmVzdWx0IDogSlNPTi5zdHJpbmdpZnkocmVzdWx0KSB9O1xuICAgICAgICB9IGNhdGNoIChlOiBhbnkpIHtcbiAgICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgcmVzdWx0OiBcIlwiLCBlcnJvcjogZS5tZXNzYWdlIHx8IFwiVW5rbm93biBlcnJvciBkdXJpbmcgdG9vbCBleGVjdXRpb24uXCIgfTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgcmVzdWx0OiBcIlwiLCBlcnJvcjogYFRvb2wgXCIke3Rvb2xOYW1lfVwiIG5vdCBmb3VuZC5gIH07XG4gIH1cbn1cbiJdfQ==