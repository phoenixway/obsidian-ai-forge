import { __awaiter } from "tslib";
// src/Logger.ts
import { normalizePath } from 'obsidian';
// Рівні логування
export var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["DEBUG"] = 1] = "DEBUG";
    LogLevel[LogLevel["INFO"] = 2] = "INFO";
    LogLevel[LogLevel["WARN"] = 3] = "WARN";
    LogLevel[LogLevel["ERROR"] = 4] = "ERROR";
    LogLevel[LogLevel["TRACE"] = 6] = "TRACE";
    LogLevel[LogLevel["NONE"] = 5] = "NONE"; // Для повного вимкнення
})(LogLevel || (LogLevel = {}));
export class Logger {
    constructor(plugin, initialSettings) {
        this.consoleLogLevel = LogLevel.INFO;
        this.fileLogLevel = LogLevel.WARN;
        this.fileLoggingEnabled = false;
        this.logCallerInfo = false;
        this.logFileMaxSizeMB = 5;
        this.logQueue = [];
        this.isWritingToFile = false;
        this.writeDebounceTimeout = null;
        this.plugin = plugin;
        this.adapter = plugin.app.vault.adapter;
        // --- ВИПРАВЛЕНО: Використовуємо normalizePath тут ---
        this.logFilePath = normalizePath(initialSettings.logFilePath || `${this.plugin.manifest.dir}/ai-forge.log`);
        this.logFileMaxSizeMB = initialSettings.logFileMaxSizeMB || 5;
        this.updateSettings(initialSettings);
        // console.log(`[Logger] Initialized. Console Level: ${this.getLogLevelName(this.consoleLogLevel)}, File Logging: ${this.fileLoggingEnabled}, File Level: ${this.getLogLevelName(this.fileLogLevel)}, Log Caller: ${this.logCallerInfo}, Path: ${this.logFilePath}`);
        if (this.fileLoggingEnabled) {
            this.rotateLogFileIfNeeded().then(() => {
            });
        }
        else {
        }
    }
    // --- ДОДАНО: Публічний метод для отримання шляху ---
    getLogFilePath() {
        return this.logFilePath;
    }
    // --- КІНЕЦЬ ДОДАНОГО МЕТОДУ ---
    getLogLevelName(level) { /* ... */ return LogLevel[level] || 'UNKNOWN'; }
    getLogLevelFromString(levelString, defaultLevel = LogLevel.INFO) { /* ... */ return LogLevel[levelString === null || levelString === void 0 ? void 0 : levelString.toUpperCase()] || defaultLevel; }
    updateSettings(settings) {
        if (settings.consoleLogLevel !== undefined) {
            this.consoleLogLevel = this.getLogLevelFromString(settings.consoleLogLevel, LogLevel.INFO);
            // console.log(`[Logger] Console log level set to: ${this.getLogLevelName(this.consoleLogLevel)}`);
        }
        if (settings.fileLogLevel !== undefined) {
            this.fileLogLevel = this.getLogLevelFromString(settings.fileLogLevel, LogLevel.WARN);
            // console.log(`[Logger] File log level set to: ${this.getLogLevelName(this.fileLogLevel)}`);
        }
        if (settings.fileLoggingEnabled !== undefined) {
            const wasEnabled = this.fileLoggingEnabled;
            this.fileLoggingEnabled = settings.fileLoggingEnabled;
            //  console.log(`[Logger] File logging enabled: ${this.fileLoggingEnabled}`);
            if (!wasEnabled && this.fileLoggingEnabled) {
                this.rotateLogFileIfNeeded();
            }
        }
        if (settings.logCallerInfo !== undefined) {
            this.logCallerInfo = settings.logCallerInfo;
            //  console.log(`[Logger] Log Caller Info enabled: ${this.logCallerInfo}`);
        }
        // Оновлення шляху та розміру, якщо вони передані
        if (settings.logFilePath !== undefined) {
            this.logFilePath = normalizePath(settings.logFilePath || `${this.plugin.manifest.dir}/ai-forge.log`);
            //  console.log(`[Logger] Log file path updated to: ${this.logFilePaInitialized. Console Levelh}`);
        }
        if (settings.logFileMaxSizeMB !== undefined) {
            this.logFileMaxSizeMB = settings.logFileMaxSizeMB || 5;
            //  console.log(`[Logger] Log file max size updated to: ${this.logFileMaxSizeMB} MB`);
        }
    }
    getCallerInfo() { /* ... (код як раніше) ... */ return 'unknown'; }
    debug(...args) { this.log(LogLevel.DEBUG, console.debug, ...args); }
    info(...args) { this.log(LogLevel.INFO, console.info, ...args); }
    warn(...args) { this.log(LogLevel.WARN, console.warn, ...args); }
    error(...args) { this.log(LogLevel.ERROR, console.error, ...args); }
    trace(...args) { this.log(LogLevel.TRACE, console.error, ...args); }
    log(level, consoleMethod, ...args) {
        const caller = this.getCallerInfo();
        if (level >= this.consoleLogLevel) {
            const prefix = this.logCallerInfo && caller !== 'unknown'
                ? `[${this.getLogLevelName(level)}] [${caller}]`
                : `[${this.getLogLevelName(level)}]`;
            consoleMethod(prefix, ...args);
        }
        if (this.fileLoggingEnabled && level >= this.fileLogLevel) {
            this.queueOrWriteToFile(level, caller, args);
        }
    }
    queueOrWriteToFile(level, caller, args) { }
    triggerWriteToFile() { }
    rotateLogFileIfNeeded() {
        return __awaiter(this, void 0, void 0, function* () { });
    }
} // Кінець класу Logger
//# sourceMappingURL=data:application/json;base64,