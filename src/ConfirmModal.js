// ConfirmModal.ts
import { Modal, Setting } from 'obsidian';
export class ConfirmModal extends Modal {
    constructor(app, title, message, onConfirm // Функція, яка виконається при підтвердженні
    ) {
        super(app);
        this.title = title;
        this.message = message;
        this.onConfirm = onConfirm;
        this.title = title;
        this.message = message;
        this.onConfirm = onConfirm;
    }
    onOpen() {
        const { contentEl, titleEl } = this;
        // Встановлюємо заголовок модального вікна
        titleEl.setText(this.title);
        // Додаємо текст повідомлення
        contentEl.createEl('p', { text: this.message });
        // Додаємо кнопки налаштувань (виглядають як стандартні кнопки Obsidian)
        new Setting(contentEl)
            .addButton(button => button
            .setButtonText('Confirm')
            .setCta() // Робить кнопку більш помітною (call to action)
            .onClick(() => {
            this.onConfirm(); // Викликаємо передану функцію
            this.close(); // Закриваємо вікно
        }))
            .addButton(button => button
            .setButtonText('Cancel')
            .onClick(() => {
            this.close(); // Просто закриваємо вікно
        }));
    }
    onClose() {
        const { contentEl } = this;
        contentEl.empty(); // Очищуємо вміст при закритті
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29uZmlybU1vZGFsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiQ29uZmlybU1vZGFsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGtCQUFrQjtBQUNsQixPQUFPLEVBQU8sS0FBSyxFQUFFLE9BQU8sRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUUvQyxNQUFNLE9BQU8sWUFBYSxTQUFRLEtBQUs7SUFDbkMsWUFDSSxHQUFRLEVBQ0QsS0FBYSxFQUNiLE9BQWUsRUFDZixTQUFxQixDQUFDLDZDQUE2Qzs7UUFFMUUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBSkosVUFBSyxHQUFMLEtBQUssQ0FBUTtRQUNiLFlBQU8sR0FBUCxPQUFPLENBQVE7UUFDZixjQUFTLEdBQVQsU0FBUyxDQUFZO1FBRzVCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO0lBQy9CLENBQUM7SUFFRCxNQUFNO1FBQ0YsTUFBTSxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQUUsR0FBRyxJQUFJLENBQUM7UUFFcEMsMENBQTBDO1FBQzFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRTVCLDZCQUE2QjtRQUM3QixTQUFTLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztRQUVoRCx3RUFBd0U7UUFDeEUsSUFBSSxPQUFPLENBQUMsU0FBUyxDQUFDO2FBQ2pCLFNBQVMsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU07YUFDdEIsYUFBYSxDQUFDLFNBQVMsQ0FBQzthQUN4QixNQUFNLEVBQUUsQ0FBQyxnREFBZ0Q7YUFDekQsT0FBTyxDQUFDLEdBQUcsRUFBRTtZQUNWLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLDhCQUE4QjtZQUNoRCxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBSyxtQkFBbUI7UUFDekMsQ0FBQyxDQUFDLENBQUM7YUFDTixTQUFTLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNO2FBQ3RCLGFBQWEsQ0FBQyxRQUFRLENBQUM7YUFDdkIsT0FBTyxDQUFDLEdBQUcsRUFBRTtZQUNWLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFLLDBCQUEwQjtRQUNoRCxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2hCLENBQUM7SUFFRCxPQUFPO1FBQ0gsTUFBTSxFQUFFLFNBQVMsRUFBRSxHQUFHLElBQUksQ0FBQztRQUMzQixTQUFTLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyw4QkFBOEI7SUFDckQsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29uZmlybU1vZGFsLnRzXG5pbXBvcnQgeyBBcHAsIE1vZGFsLCBTZXR0aW5nIH0gZnJvbSAnb2JzaWRpYW4nO1xuXG5leHBvcnQgY2xhc3MgQ29uZmlybU1vZGFsIGV4dGVuZHMgTW9kYWwge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBhcHA6IEFwcCxcbiAgICAgICAgcHVibGljIHRpdGxlOiBzdHJpbmcsXG4gICAgICAgIHB1YmxpYyBtZXNzYWdlOiBzdHJpbmcsXG4gICAgICAgIHB1YmxpYyBvbkNvbmZpcm06ICgpID0+IHZvaWQgLy8g0KTRg9C90LrRhtGW0Y8sINGP0LrQsCDQstC40LrQvtC90LDRlNGC0YzRgdGPINC/0YDQuCDQv9GW0LTRgtCy0LXRgNC00LbQtdC90L3RllxuICAgICkge1xuICAgICAgICBzdXBlcihhcHApO1xuICAgICAgICB0aGlzLnRpdGxlID0gdGl0bGU7XG4gICAgICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgICAgIHRoaXMub25Db25maXJtID0gb25Db25maXJtO1xuICAgIH1cblxuICAgIG9uT3BlbigpIHtcbiAgICAgICAgY29uc3QgeyBjb250ZW50RWwsIHRpdGxlRWwgfSA9IHRoaXM7XG5cbiAgICAgICAgLy8g0JLRgdGC0LDQvdC+0LLQu9GO0ZTQvNC+INC30LDQs9C+0LvQvtCy0L7QuiDQvNC+0LTQsNC70YzQvdC+0LPQviDQstGW0LrQvdCwXG4gICAgICAgIHRpdGxlRWwuc2V0VGV4dCh0aGlzLnRpdGxlKTtcblxuICAgICAgICAvLyDQlNC+0LTQsNGU0LzQviDRgtC10LrRgdGCINC/0L7QstGW0LTQvtC80LvQtdC90L3Rj1xuICAgICAgICBjb250ZW50RWwuY3JlYXRlRWwoJ3AnLCB7IHRleHQ6IHRoaXMubWVzc2FnZSB9KTtcblxuICAgICAgICAvLyDQlNC+0LTQsNGU0LzQviDQutC90L7Qv9C60Lgg0L3QsNC70LDRiNGC0YPQstCw0L3RjCAo0LLQuNCz0LvRj9C00LDRjtGC0Ywg0Y/QuiDRgdGC0LDQvdC00LDRgNGC0L3RliDQutC90L7Qv9C60LggT2JzaWRpYW4pXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRlbnRFbClcbiAgICAgICAgICAgIC5hZGRCdXR0b24oYnV0dG9uID0+IGJ1dHRvblxuICAgICAgICAgICAgICAgIC5zZXRCdXR0b25UZXh0KCdDb25maXJtJylcbiAgICAgICAgICAgICAgICAuc2V0Q3RhKCkgLy8g0KDQvtCx0LjRgtGMINC60L3QvtC/0LrRgyDQsdGW0LvRjNGIINC/0L7QvNGW0YLQvdC+0Y4gKGNhbGwgdG8gYWN0aW9uKVxuICAgICAgICAgICAgICAgIC5vbkNsaWNrKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkNvbmZpcm0oKTsgLy8g0JLQuNC60LvQuNC60LDRlNC80L4g0L/QtdGA0LXQtNCw0L3RgyDRhNGD0L3QutGG0ZbRjlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNsb3NlKCk7ICAgICAvLyDQl9Cw0LrRgNC40LLQsNGU0LzQviDQstGW0LrQvdC+XG4gICAgICAgICAgICAgICAgfSkpXG4gICAgICAgICAgICAuYWRkQnV0dG9uKGJ1dHRvbiA9PiBidXR0b25cbiAgICAgICAgICAgICAgICAuc2V0QnV0dG9uVGV4dCgnQ2FuY2VsJylcbiAgICAgICAgICAgICAgICAub25DbGljaygoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2xvc2UoKTsgICAgIC8vINCf0YDQvtGB0YLQviDQt9Cw0LrRgNC40LLQsNGU0LzQviDQstGW0LrQvdC+XG4gICAgICAgICAgICAgICAgfSkpO1xuICAgIH1cblxuICAgIG9uQ2xvc2UoKSB7XG4gICAgICAgIGNvbnN0IHsgY29udGVudEVsIH0gPSB0aGlzO1xuICAgICAgICBjb250ZW50RWwuZW1wdHkoKTsgLy8g0J7Rh9C40YnRg9GU0LzQviDQstC80ZbRgdGCINC/0YDQuCDQt9Cw0LrRgNC40YLRgtGWXG4gICAgfVxufSJdfQ==