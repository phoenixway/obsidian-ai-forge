import { __awaiter } from "tslib";
// Chat.ts
import { normalizePath, Notice, debounce } from "obsidian";
export class Chat {
    constructor(adapter, settings, data, filePath, logger) {
        this.adapter = adapter;
        this.pluginSettings = settings;
        this.filePath = normalizePath(filePath);
        this.metadata = data.metadata;
        this.messages = data.messages.map(m => (Object.assign(Object.assign({}, m), { timestamp: new Date(m.timestamp) })));
        this.logger = logger;
        this.debouncedSave = debounce(this._saveToFile.bind(this), 1500, true);
    }
    addMessage(role, content, timestamp = new Date()) {
        const newMessage = { role, content, timestamp };
        this.messages.push(newMessage);
        this.metadata.lastModified = timestamp.toISOString();
        this.save();
        return newMessage;
    }
    getMessages() {
        return [...this.messages];
    }
    clearMessages() {
        this.messages = [];
        this.metadata.lastModified = new Date().toISOString();
        this.save();
    }
    updateMetadata(updates) {
        let changed = false;
        const currentMeta = this.metadata;
        if (updates.name !== undefined && updates.name !== currentMeta.name) {
            currentMeta.name = updates.name;
            changed = true;
        }
        if (updates.modelName !== undefined && updates.modelName !== currentMeta.modelName) {
            currentMeta.modelName = updates.modelName;
            changed = true;
        }
        if (updates.selectedRolePath !== undefined && updates.selectedRolePath !== currentMeta.selectedRolePath) {
            currentMeta.selectedRolePath = updates.selectedRolePath;
            changed = true;
        }
        if (updates.temperature !== undefined && updates.temperature !== currentMeta.temperature) {
            currentMeta.temperature = updates.temperature;
            changed = true;
        }
        if (updates.contextWindow !== undefined && updates.contextWindow !== currentMeta.contextWindow) {
            currentMeta.contextWindow = updates.contextWindow;
            changed = true;
        }
        if (changed) {
            this.metadata.lastModified = new Date().toISOString();
            this.save();
        }
        return changed;
    }
    save() {
        if (this.pluginSettings.saveMessageHistory) {
            this.debouncedSave();
        }
    }
    saveImmediately() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.pluginSettings.saveMessageHistory) {
                return true;
            }
            return yield this._saveToFile();
        });
    }
    _saveToFile() {
        return __awaiter(this, void 0, void 0, function* () {
            const chatData = {
                metadata: this.metadata,
                messages: this.messages.map(m => (Object.assign(Object.assign({}, m), { timestamp: m.timestamp.toISOString() })))
            };
            const jsonString = JSON.stringify(chatData, null, 2);
            try {
                const dirPath = this.filePath.substring(0, this.filePath.lastIndexOf('/'));
                if (dirPath && !(yield this.adapter.exists(dirPath))) {
                    yield this.adapter.mkdir(dirPath);
                }
                yield this.adapter.write(this.filePath, jsonString);
                return true;
            }
            catch (error) {
                console.error(`[Chat ${this.metadata.id}] Error saving chat to ${this.filePath}:`, error);
                new Notice(`Error saving chat: ${this.metadata.name}. Check console.`);
                return false;
            }
        });
    }
    static loadFromFile(filePath, adapter, settings, logger) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a;
            const normPath = normalizePath(filePath);
            try {
                if (!(yield adapter.exists(normPath))) {
                    return null;
                }
                const json = yield adapter.read(normPath);
                const data = JSON.parse(json);
                if (((_a = data === null || data === void 0 ? void 0 : data.metadata) === null || _a === void 0 ? void 0 : _a.id) && Array.isArray(data.messages)) {
                    return new Chat(adapter, settings, data, normPath, logger);
                }
                else {
                    new Notice(`Error loading chat: Invalid data structure in ${filePath}`);
                    return null;
                }
            }
            catch (e) {
                console.error(`[Chat] Error loading or parsing file for static load: ${normPath}`, e);
                new Notice(`Error loading chat file: ${filePath}. ${e.message}`);
                return null;
            }
        });
    }
    deleteFile() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (yield this.adapter.exists(this.filePath)) {
                    yield this.adapter.remove(this.filePath);
                    return true;
                }
                return true;
            }
            catch (e) {
                console.error(`[Chat ${this.metadata.id}] Error deleting file ${this.filePath}:`, e);
                new Notice(`Error deleting chat file: ${this.metadata.name}. Check console.`);
                return false;
            }
        });
    }
    toJSON() {
        return {
            metadata: this.metadata,
            messages: this.messages
        };
    }
    recordActivity() {
        const oldLastModified = this.metadata.lastModified;
        this.metadata.lastModified = new Date().toISOString();
        const changed = oldLastModified !== this.metadata.lastModified;
        if (changed) {
            this.save();
        }
        return changed;
    }
} // End of Chat class
//# sourceMappingURL=data:application/json;base64,