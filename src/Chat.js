import { __awaiter } from "tslib";
// Chat.ts
import { normalizePath, Notice, debounce } from "obsidian";
export class Chat {
    constructor(adapter, settings, data, // Приймаємо дані з timestamp: Date
    filePath, logger) {
        this.adapter = adapter;
        this.pluginSettings = settings;
        this.filePath = normalizePath(filePath);
        this.metadata = data.metadata;
        // Переконуємося, що timestamp є Date. Якщо він прийшов як рядок (малоймовірно тут), конвертуємо.
        this.messages = data.messages.map(msgData => {
            const messageWithDate = Object.assign(Object.assign({}, msgData), { timestamp: msgData.timestamp instanceof Date ? msgData.timestamp : new Date(msgData.timestamp) });
            if (messageWithDate.role === 'assistant' && messageWithDate.tool_calls) {
            }
            return messageWithDate;
        });
        this.logger = logger;
        this.debouncedSave = debounce(this._saveToFile.bind(this), 1500, true);
    }
    addMessage(role, content, timestamp = new Date()) {
        // Тут Message має timestamp: Date
        const newMessage = { role, content, timestamp };
        this.messages.push(newMessage);
        this.recordActivity();
        return newMessage;
    }
    getMessages() {
        return [...this.messages];
    }
    clearMessages() {
        this.messages = [];
        this.recordActivity();
    }
    updateMetadata(updates) {
        let changed = false;
        const currentMeta = this.metadata;
        if (updates.name !== undefined && updates.name !== currentMeta.name) {
            currentMeta.name = updates.name;
            changed = true;
        }
        if (updates.modelName !== undefined && updates.modelName !== currentMeta.modelName) {
            currentMeta.modelName = updates.modelName;
            changed = true;
        }
        if (updates.selectedRolePath !== undefined && updates.selectedRolePath !== currentMeta.selectedRolePath) {
            currentMeta.selectedRolePath = updates.selectedRolePath;
            changed = true;
        }
        if (updates.temperature !== undefined && updates.temperature !== currentMeta.temperature) {
            currentMeta.temperature = updates.temperature;
            changed = true;
        }
        if (updates.contextWindow !== undefined && updates.contextWindow !== currentMeta.contextWindow) {
            currentMeta.contextWindow = updates.contextWindow;
            changed = true;
        }
        if (changed) {
            this.recordActivity();
        }
        return changed;
    }
    save() {
        if (this.pluginSettings.saveMessageHistory) {
            this.debouncedSave();
        }
    }
    saveImmediately() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.pluginSettings.saveMessageHistory) {
                return true;
            }
            return yield this._saveToFile();
        });
    }
    _saveToFile() {
        return __awaiter(this, void 0, void 0, function* () {
            const messagesForStorage = this.messages.map(m => {
                var _a, _b;
                // Створюємо об'єкт для збереження, де timestamp буде рядком
                const messageForSave = {
                    role: m.role,
                    content: m.content,
                    timestamp: m.timestamp.toISOString() // Перетворюємо Date на ISO string
                };
                // Явно копіюємо опціональні поля
                if (m.type)
                    messageForSave.type = m.type;
                if (m.images)
                    messageForSave.images = m.images;
                if (m.tool_call_id)
                    messageForSave.tool_call_id = m.tool_call_id;
                if (m.name)
                    messageForSave.name = m.name;
                if (m.role === 'assistant' && m.tool_calls && ((_b = (_a = m.tool_calls) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) > 0) {
                    messageForSave.tool_calls = m.tool_calls;
                }
                return messageForSave;
            });
            const chatDataToSave = {
                metadata: this.metadata,
                messages: messagesForStorage
            };
            const assistantMessagesWithToolCallsInFinalData = chatDataToSave.messages.filter((msg) => msg.role === "assistant" && msg.tool_calls && msg.tool_calls.length > 0);
            if (assistantMessagesWithToolCallsInFinalData.length > 0) {
                this.logger.info(`[Chat ${this.metadata.id} _saveToFile] FINAL ChatData for stringify CONTAINS tool_calls for ${assistantMessagesWithToolCallsInFinalData.length} assistant messages. First one's tool_calls:`, JSON.stringify(assistantMessagesWithToolCallsInFinalData[0].tool_calls));
            }
            else {
            }
            const jsonString = JSON.stringify(chatDataToSave, null, 2);
            try {
                const dirPath = this.filePath.substring(0, this.filePath.lastIndexOf('/'));
                if (dirPath && !(yield this.adapter.exists(dirPath))) {
                    yield this.adapter.mkdir(dirPath);
                }
                yield this.adapter.write(this.filePath, jsonString);
                return true;
            }
            catch (error) {
                this.logger.error(`[Chat ${this.metadata.id}] Error saving chat to ${this.filePath}:`, error);
                new Notice(`Error saving chat: ${this.metadata.name}. Check console.`);
                return false;
            }
        });
    }
    static loadFromFile(filePath, adapter, settings, logger) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a;
            const normPath = normalizePath(filePath);
            try {
                if (!(yield adapter.exists(normPath))) {
                    return null;
                }
                const json = yield adapter.read(normPath);
                // Парсимо дані з файлу, очікуючи, що timestamp буде рядком (ChatDataForStorage)
                const rawDataFromFile = JSON.parse(json);
                if (((_a = rawDataFromFile === null || rawDataFromFile === void 0 ? void 0 : rawDataFromFile.metadata) === null || _a === void 0 ? void 0 : _a.id) && Array.isArray(rawDataFromFile.messages)) {
                    // Перетворюємо дані для конструктора: timestamp з рядка на Date
                    const dataForConstructor = {
                        metadata: rawDataFromFile.metadata,
                        messages: rawDataFromFile.messages.map(msgFromFile => {
                            const messageForMemory = Object.assign(Object.assign({}, msgFromFile), { timestamp: new Date(msgFromFile.timestamp) // Конвертуємо рядок в Date
                             });
                            if (messageForMemory.role === 'assistant' && messageForMemory.tool_calls) {
                            }
                            return messageForMemory;
                        })
                    };
                    return new Chat(adapter, settings, dataForConstructor, normPath, logger);
                }
                else {
                    logger.error(`[Chat LOAD] Invalid data structure in ${normPath}`, rawDataFromFile);
                    new Notice(`Error loading chat: Invalid data structure in ${filePath}`);
                    return null;
                }
            }
            catch (e) {
                logger.error(`[Chat LOAD] Error loading or parsing file: ${normPath}`, e);
                new Notice(`Error loading chat file: ${filePath}. ${e.message}`);
                return null;
            }
        });
    }
    deleteFile() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (yield this.adapter.exists(this.filePath)) {
                    yield this.adapter.remove(this.filePath);
                    return true;
                }
                return true;
            }
            catch (e) {
                this.logger.error(`[Chat ${this.metadata.id}] Error deleting file ${this.filePath}:`, e);
                new Notice(`Error deleting chat file: ${this.metadata.name}. Check console.`);
                return false;
            }
        });
    }
    // Повертає ChatDataInMemory, де timestamp є Date
    toJSON() {
        return {
            metadata: this.metadata,
            // Повертаємо копію повідомлень, як вони є в пам'яті (з Date об'єктами)
            messages: this.messages.map(m => (Object.assign({}, m)))
        };
    }
    recordActivity() {
        const oldLastModified = this.metadata.lastModified;
        this.metadata.lastModified = new Date().toISOString();
        const changed = oldLastModified !== this.metadata.lastModified;
        if (changed) {
            this.save();
        }
        return changed;
    }
}
//# sourceMappingURL=data:application/json;base64,