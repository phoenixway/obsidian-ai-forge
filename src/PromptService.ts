// PromptService.ts
import { App, normalizePath, TFile, Notice, FrontMatterCache } from 'obsidian';
import OllamaPlugin from './main';
import { Message, MessageRole, OllamaGenerateResponse, RoleDefinition } from './types';
import { ChatMetadata } from './Chat';

export class PromptService {
    private plugin: OllamaPlugin;
    private app: App;
    private currentSystemPrompt: string | null = null;
    private currentRolePath: string | null = null;
    private roleCache: Record<string, RoleDefinition> = {};
    private modelDetailsCache: Record<string, any> = {};

    constructor(plugin: OllamaPlugin) {
        this.plugin = plugin;
        this.app = plugin.app;
    }

    private _countTokens(text: string): number {
        // ... (–±–µ–∑ –∑–º—ñ–Ω) ...
        if (!text) return 0;
        return Math.ceil(text.length / 4);
    }

    clearRoleCache(): void {
        // ... (–±–µ–∑ –∑–º—ñ–Ω) ...
        // this.plugin.logger.debug("[PromptService] Clearing role definition cache.");
        this.roleCache = {};
        this.currentRolePath = null; // –°–∫–∏–¥–∞—î–º–æ –∫–µ—à–æ–≤–∞–Ω–∏–π —à–ª—è—Ö
        this.currentSystemPrompt = null;
    }

    clearModelDetailsCache(): void {
       // ... (–±–µ–∑ –∑–º—ñ–Ω) ...
        this.plugin.logger.debug("[PromptService] Clearing model details cache.");
        this.modelDetailsCache = {};
    }

    async getRoleDefinition(rolePath: string | null | undefined): Promise<RoleDefinition | null> {
       // ... (–±–µ–∑ –∑–º—ñ–Ω, —Ü—è –ª–æ–≥—ñ–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–æ–ª—ñ –Ω–µ –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ RAG) ...
        const normalizedPath = rolePath ? normalizePath(rolePath) : null;

        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à, —è–∫—â–æ —à–ª—è—Ö –Ω–µ –∑–º—ñ–Ω–∏–≤—Å—è
        if (normalizedPath === this.currentRolePath && normalizedPath && this.roleCache[normalizedPath]) {
             return this.roleCache[normalizedPath];
        }

         // –Ø–∫—â–æ —à–ª—è—Ö –∑–º—ñ–Ω–∏–≤—Å—è –∞–±–æ –∫–µ—à—É –Ω–µ–º–∞—î - –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ
        if (normalizedPath !== this.currentRolePath) {
            this.plugin.logger.info(`[PromptService] Role path changing from '${this.currentRolePath}' to '${normalizedPath}'. Clearing cache.`);
            if (this.currentRolePath && this.roleCache[this.currentRolePath]) {
                delete this.roleCache[this.currentRolePath]; // –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä–∏–π –∫–µ—à
            }
            this.currentRolePath = normalizedPath; // –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —à–ª—è—Ö
            this.currentSystemPrompt = null; // –°–∫–∏–¥–∞—î–º–æ —Å–∏—Å—Ç–µ–º–Ω–∏–π –ø—Ä–æ–º–ø—Ç
        }

        // –Ø–∫—â–æ —à–ª—è—Ö –ø–æ—Ä–æ–∂–Ω—ñ–π –∞–±–æ –Ω–µ —Ç—Ä–µ–±–∞ —Å–ª—ñ–¥—É–≤–∞—Ç–∏ —Ä–æ–ª—ñ - –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ null
        if (!normalizedPath || !this.plugin.settings.followRole) {
            this.plugin.logger.debug("[PromptService] No role path or followRole disabled. Role definition is null.");
            // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –æ–±'—î–∫—Ç –∑ null –ø—Ä–æ–º–ø—Ç–æ–º, –∞–ª–µ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å, —è–∫—â–æ –≤–æ–Ω–∞ —î —É —Ñ—Ä–æ–Ω—Ç–º–∞—Ç–µ—Ä—ñ
             const definition: RoleDefinition = {
                systemPrompt: null,
                // –¢—É—Ç –Ω–µ –º–æ–∂–µ–º–æ –≤–∏–∑–Ω–∞—á–∏—Ç–∏ isProductivityPersona –±–µ–∑ —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É,
                // –∞–ª–µ –¥–ª—è –≤–∏–ø–∞–¥–∫—É –±–µ–∑ —Ä–æ–ª—ñ —Ü–µ –Ω–µ –≤–∞–∂–ª–∏–≤–æ. –Ø–∫—â–æ –± –ª–æ–≥—ñ–∫–∞ –±—É–ª–∞ —ñ–Ω—à–æ—é,
                // —Ç—Ä–µ–±–∞ –±—É–ª–æ –± –¥–æ–¥–∞—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —Ñ–∞–π–ª—É —Ç—É—Ç.
                isProductivityPersona: false
            };
            return definition; // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –æ–±'—î–∫—Ç, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ null
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à —â–µ —Ä–∞–∑ –ø—ñ—Å–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è this.currentRolePath
        if (this.roleCache[normalizedPath]) {
           this.plugin.logger.debug(`[PromptService] Returning newly cached role definition for: ${normalizedPath}`);
           this.currentSystemPrompt = this.roleCache[normalizedPath].systemPrompt;
           return this.roleCache[normalizedPath];
        }

        this.plugin.logger.debug(`[PromptService] Loading role definition from file: ${normalizedPath}`);
        const file = this.app.vault.getAbstractFileByPath(normalizedPath);

        if (file instanceof TFile) {
            try {
                const fileCache = this.app.metadataCache.getFileCache(file);
                const frontmatter = fileCache?.frontmatter;
                const content = await this.app.vault.cachedRead(file);
                const systemPromptBody = fileCache?.frontmatterPosition?.end
                    ? content.substring(fileCache.frontmatterPosition.end.offset).trim()
                    : content.trim();

                const isProductivity = frontmatter?.assistant_type?.toLowerCase() === 'productivity' || frontmatter?.is_planner === true;

                const definition: RoleDefinition = {
                    systemPrompt: systemPromptBody || null,
                    isProductivityPersona: isProductivity
                };

                this.plugin.logger.info(`[PromptService] Role loaded: ${normalizedPath}. Is Productivity: ${isProductivity}. Prompt length: ${definition.systemPrompt?.length || 0}`);
                this.roleCache[normalizedPath] = definition; // –ö–µ—à—É—î–º–æ
                this.currentSystemPrompt = definition.systemPrompt;
                return definition;

            } catch (error) {
                this.plugin.logger.error(`[PromptService] Error processing role file ${normalizedPath}:`, error);
                new Notice(`Error loading role: ${file.basename}. Check console.`);
                this.currentSystemPrompt = null;
                // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –æ–±'—î–∫—Ç –ø–æ–º–∏–ª–∫–∏ –∞–±–æ null, –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –±–∞–∂–∞–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏
                 return { systemPrompt: null, isProductivityPersona: false };
            }
        } else {
            this.plugin.logger.warn(`[PromptService] Role file not found or not a file: ${normalizedPath}`);
            this.currentSystemPrompt = null;
            return { systemPrompt: null, isProductivityPersona: false };
        }
    }

    private async _isProductivityPersonaActive(rolePath: string | null | undefined): Promise<boolean> {
        // ... (–±–µ–∑ –∑–º—ñ–Ω) ...
         if (!this.plugin.settings.enableProductivityFeatures) {
            return false;
        }
        const roleDefinition = await this.getRoleDefinition(rolePath);
        return roleDefinition?.isProductivityPersona ?? false;
    }

    /**
     * –û–ù–û–í–õ–ï–ù–û: –ü–æ–≤–µ—Ä—Ç–∞—î —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π —Å–∏—Å—Ç–µ–º–Ω–∏–π –ø—Ä–æ–º–ø—Ç –¥–ª—è API, –≤–∫–ª—é—á–∞—é—á–∏ –Ω–æ–≤—ñ RAG —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó.
     */
    async getSystemPromptForAPI(chatMetadata: ChatMetadata): Promise<string | null> {
        const settings = this.plugin.settings;
        this.plugin.logger.debug(`[PromptService] Building system prompt for chat: ${chatMetadata.id}, Role path: ${chatMetadata.selectedRolePath ?? settings.selectedRolePath}`);

        const selectedRolePath = chatMetadata.selectedRolePath !== undefined && chatMetadata.selectedRolePath !== null
                               ? chatMetadata.selectedRolePath
                               : settings.selectedRolePath;

        let roleDefinition: RoleDefinition | null = null;
        if (selectedRolePath && settings.followRole) {
            roleDefinition = await this.getRoleDefinition(selectedRolePath);
        }

        const roleSystemPrompt = roleDefinition?.systemPrompt || null;
        const isProductivityActive = roleDefinition?.isProductivityPersona ?? false;

        // --- –û–ù–û–í–õ–ï–ù–Ü RAG –Ü–ù–°–¢–†–£–ö–¶–Ü–á ---
        const ragInstructions = `
--- RAG Data Interpretation Rules ---
You will be provided context from the user's notes, potentially split into two sections:
1.  '### Personal Focus Context (User's Life State & Goals)':
    * This section contains HIGH-PRIORITY information reflecting the user's current situation, desired state, goals, priorities, and actions they believe they should take.
    * TREAT THIS SECTION AS THE PRIMARY SOURCE for understanding the user's core objectives and current life context.
    * Use this to align your suggestions, track progress on stated goals/priorities, and provide strategic guidance.
2.  '### General Context from User Notes':
    * This section contains potentially relevant background information from the user's general notes, identified based on semantic similarity to the current query.
    * Use this for supplementary details and broader context.

General Rules for BOTH Context Sections:
* Each context chunk originates from a specific file indicated in its header (e.g., "--- Chunk 1 from Personal Focus Note: My Goals.md ..."). You can refer to source files by name.
* Context from files/chunks marked with "[Type: Personal Log]" contains personal reflections, activities, or logs. Use this for analysis of personal state, mood, energy, and progress.
* Assume ANY bullet point item (lines starting with '-', '*', '+') OR any line containing one or more hash tags (#tag) represents a potential user goal, task, objective, idea, or key point. **Pay special attention to categorizing these:**
    * **Critical Goals/Tasks:** Identify these if the line contains tags like #critical, #criticalüÜò or keywords like "–∫—Ä–∏—Ç–∏—á–Ω–æ", "critical", "—Ç–µ—Ä–º—ñ–Ω–æ–≤–æ", "urgent". **Prioritize discussing these items, potential blockers, and progress.**
    * **Weekly Goals/Tasks:** Identify these if the line contains tags like #week, #weekly or keywords like "weekly", "—Ç–∏–∂–Ω–µ–≤–∞", "—Ç–∏–∂–Ω–µ–≤–∏–π". Consider their relevance for the current or upcoming week's planning.
    * Use the surrounding text and the source document name for context for all identified items.
* If the user asks about "available data", "all my notes", "summarize my RAG data", or similar general terms, base your answer on the ENTIRE provided context (both Personal Focus and General Context sections). Analyze themes across different chunks and documents.
--- End RAG Data Interpretation Rules ---
        `.trim();
        // --- –ö—ñ–Ω–µ—Ü—å –û–ù–û–í–õ–ï–ù–ò–• —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π ---

        let finalSystemPrompt = "";

        // –î–æ–¥–∞—î–º–æ RAG —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó, —è–∫—â–æ RAG —Ç–∞ —Å–µ–º–∞–Ω—Ç–∏—á–Ω–∏–π –ø–æ—à—É–∫ —É–≤—ñ–º–∫–Ω–µ–Ω—ñ
        if (settings.ragEnabled && this.plugin.ragService && settings.ragEnableSemanticSearch) {
             finalSystemPrompt += ragInstructions + "\n\n";
             this.plugin.logger.debug("[PromptService] RAG instructions added to system prompt.");
        } else {
            this.plugin.logger.debug("[PromptService] RAG instructions NOT added (RAG disabled or semantic search disabled).");
        }

        // –î–æ–¥–∞—î–º–æ —Å–∏—Å—Ç–µ–º–Ω–∏–π –ø—Ä–æ–º–ø—Ç —Ä–æ–ª—ñ, —è–∫—â–æ —î
        if (roleSystemPrompt) {
            finalSystemPrompt += roleSystemPrompt.trim();
            this.plugin.logger.debug(`[PromptService] Role system prompt added (Length: ${roleSystemPrompt.trim().length})`);
        } else {
             this.plugin.logger.debug("[PromptService] No role system prompt to add.");
        }

        // –î–∏–Ω–∞–º—ñ—á–Ω–∞ –¥–∞—Ç–∞/—á–∞—Å (–±–µ–∑ –∑–º—ñ–Ω, –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ isProductivityActive)
        if (isProductivityActive && finalSystemPrompt && settings.enableProductivityFeatures) {
            const now = new Date();
            const formattedDate = now.toLocaleDateString(undefined, { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' });
            const formattedTime = now.toLocaleTimeString(undefined, { hour: 'numeric', minute: '2-digit' });
            finalSystemPrompt = finalSystemPrompt.replace(/\[Current Time\]/gi, formattedTime);
            finalSystemPrompt = finalSystemPrompt.replace(/\[Current Date\]/gi, formattedDate);
            this.plugin.logger.debug("[PromptService] Dynamic date/time injected.");
        }

        const trimmedFinalPrompt = finalSystemPrompt.trim();
        this.plugin.logger.debug(`[PromptService] Final System Prompt Length: ${trimmedFinalPrompt.length} chars. Has content: ${trimmedFinalPrompt.length > 0}`);
        return trimmedFinalPrompt.length > 0 ? trimmedFinalPrompt : null;
    }

    /**
     * –ì–æ—Ç—É—î –¢–Ü–õ–û –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç—É (–±–µ–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ), –≤–∫–ª—é—á–∞—é—á–∏ —ñ—Å—Ç–æ—Ä—ñ—é, –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–≤–¥–∞–Ω—å —Ç–∞ RAG.
     * –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –æ–Ω–æ–≤–ª–µ–Ω–∏–π `prepareContext` –∑ `RagService`.
     */
    async preparePromptBody(history: Message[], chatMetadata: ChatMetadata): Promise<string | null> {
        // ... (–õ–æ–≥—ñ–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è isProductivityActive —Ç–∞ –æ–±—Ä–æ–±–∫–∏ taskContext –±–µ–∑ –∑–º—ñ–Ω) ...
         this.plugin.logger.debug("[PromptService] Preparing prompt body...");
        const settings = this.plugin.settings;
        const selectedRolePath = chatMetadata.selectedRolePath !== undefined && chatMetadata.selectedRolePath !== null
                               ? chatMetadata.selectedRolePath : settings.selectedRolePath;
        const isProductivityActive = await this._isProductivityPersonaActive(selectedRolePath);
        this.plugin.logger.debug(`[PromptService] Productivity features potentially active for body: ${isProductivityActive}`);

        // --- –ö–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–≤–¥–∞–Ω—å ---
        let taskContext = "";
        if (isProductivityActive && settings.enableProductivityFeatures && this.plugin.chatManager) {
            // –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞–Ω –∑–∞–≤–¥–∞–Ω—å
            await this.plugin.checkAndProcessTaskUpdate?.();
            const taskState = this.plugin.chatManager.getCurrentTaskState();

            if (taskState && taskState.hasContent) {
                taskContext = "\n--- Today's Tasks Context ---\n";
                taskContext += `Urgent: ${taskState.urgent.join(', ') || "None"}\n`;
                taskContext += `Other: ${taskState.regular.join(', ') || "None"}\n`;
                taskContext += "--- End Tasks Context ---";
                this.plugin.logger.debug(`[PromptService] Injecting task context (Urgent: ${taskState.urgent.length}, Regular: ${taskState.regular.length})`);
            } else {
                 this.plugin.logger.debug("[PromptService] No relevant task state found or no tasks to inject.");
            }
        }

        // --- –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ç–æ–∫–µ–Ω—ñ–≤ —Ç–∞ —ñ—Å—Ç–æ—Ä—ñ—ó (–±–µ–∑ –∑–º—ñ–Ω) ---
        const approxTaskTokens = this._countTokens(taskContext);
        // –ó–∞–ø–∞—Å –¥–ª—è RAG –º–æ–∂–µ –ø–æ—Ç—Ä–µ–±—É–≤–∞—Ç–∏ –∫–æ—Ä–∏–≥—É–≤–∞–Ω–Ω—è, —è–∫—â–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å—Ç–∞–≤ –∑–Ω–∞—á–Ω–æ –¥–æ–≤—à–∏–º
        const maxRagTokens = settings.ragEnabled ? (settings.ragTopK * settings.ragChunkSize / 4) * 1.8 : 0; // –ó–±—ñ–ª—å—à–∏–≤ –∑–∞–ø–∞—Å
        const maxHistoryTokens = settings.contextWindow - approxTaskTokens - maxRagTokens - 250; // –ó–±—ñ–ª—å—à–∏–≤ —Ä–µ–∑–µ—Ä–≤
        this.plugin.logger.debug(`[PromptService] Max tokens available for history processing: ${maxHistoryTokens}`);

        let processedHistoryString = "";
        if (isProductivityActive && settings.useAdvancedContextStrategy) {
            processedHistoryString = await this._buildAdvancedContext(history, chatMetadata, maxHistoryTokens);
        } else {
            processedHistoryString = this._buildSimpleContext(history, maxHistoryTokens);
        }

        // --- RAG –ö–æ–Ω—Ç–µ–∫—Å—Ç (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –æ–Ω–æ–≤–ª–µ–Ω–∏–π prepareContext) ---
        let ragContext = "";
        if (settings.ragEnabled && this.plugin.ragService && settings.ragEnableSemanticSearch) {
            const lastUserMessage = history.findLast(m => m.role === 'user');
            if (lastUserMessage?.content) {
                // prepareContext —Ç–µ–ø–µ—Ä –ø–æ–≤–µ—Ä—Ç–∞—î —Ä—è–¥–æ–∫ –∑ —Ä–æ–∑–¥—ñ–ª–µ–Ω–∏–º–∏ —Å–µ–∫—Ü—ñ—è–º–∏
                ragContext = await this.plugin.ragService.prepareContext(lastUserMessage.content);
                 if(!ragContext) this.plugin.logger.info("[PromptService] RAG prepareContext returned empty.");
                 else this.plugin.logger.debug(`[PromptService] RAG context length: ${ragContext.length} chars`);
            } else { this.plugin.logger.warn("[PromptService] RAG enabled, but no last user message found."); }
        } else { this.plugin.logger.debug("[PromptService] RAG context NOT prepared."); }

        // --- –§–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ñ—ñ–Ω–∞–ª—å–Ω–æ–≥–æ —Ç—ñ–ª–∞ –ø—Ä–æ–º–ø—Ç—É (–±–µ–∑ –∑–º—ñ–Ω) ---
        let finalPromptBodyParts: string[] = [];
        if (ragContext) { finalPromptBodyParts.push(ragContext); } // –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π —Ñ–æ—Ä–º–∞—Ç RAG
        if (taskContext) { finalPromptBodyParts.push(taskContext); }
        if (processedHistoryString) { finalPromptBodyParts.push(`### Conversation History:\n${processedHistoryString}`); }

        const finalPromptBody = finalPromptBodyParts.join("\n\n").trim();

        if (!finalPromptBody) {
            this.plugin.logger.warn("[PromptService] No RAG, no tasks, and no history processed. Returning null prompt body.");
             return null;
        }

        this.plugin.logger.debug(`[PromptService] Final prompt body length (approx tokens): ${this._countTokens(finalPromptBody)}`);
        return finalPromptBody;
    }

    // –ú–µ—Ç–æ–¥–∏ _buildSimpleContext, _buildAdvancedContext, _summarizeMessages
    // –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –±–µ–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–∏—Ö –∑–º—ñ–Ω (—Ç—ñ–ª—å–∫–∏ –ª–æ–≥—É–≤–∞–Ω–Ω—è)
    private _buildSimpleContext(history: Message[], maxTokens: number): string {
       // ... (–±–µ–∑ –∑–º—ñ–Ω, –æ–∫—Ä—ñ–º –ª–æ–≥—É–≤–∞–Ω–Ω—è) ...
        let context = "";
        let currentTokens = 0;
        for (let i = history.length - 1; i >= 0; i--) {
            const message = history[i];
            // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Å–∏—Å—Ç–µ–º–Ω—ñ/–ø–æ–º–∏–ª–∫–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø—Ä–æ—Å—Ç–æ—ó —ñ—Å—Ç–æ—Ä—ñ—ó
            if (message.role === 'system' || message.role === 'error') continue;

            const formattedMessage = `${message.role === 'user' ? 'User' : 'Assistant'}: ${message.content.trim()}`;
            const messageTokens = this._countTokens(formattedMessage) + 5; // +5 –∑–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è/—Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫–∏
            if (currentTokens + messageTokens <= maxTokens) {
                context = formattedMessage + "\n\n" + context; // –î–æ–¥–∞—î–º–æ –Ω–∞ –ø–æ—á–∞—Ç–æ–∫
                currentTokens += messageTokens;
            } else {
                this.plugin.logger.debug(`[PromptService] Simple context limit reached (${currentTokens}/${maxTokens} tokens). Stopping history inclusion.`);
                break; // –î–æ—Å—è–≥–ª–∏ –ª—ñ–º—ñ—Ç—É
            }
        }
        return context.trim();
    }

     private async _buildAdvancedContext(history: Message[], chatMetadata: ChatMetadata, maxTokens: number): Promise<string> {
        this.plugin.logger.debug("[PromptService] Building advanced context...");
        const settings = this.plugin.settings;
        const processedParts: string[] = [];
        let currentTokens = 0;

        // –í–∏–∑–Ω–∞—á–∞—î–º–æ, —Å–∫—ñ–ª—å–∫–∏ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑–∞–ª–∏—à–∏—Ç–∏ –±–µ–∑ –∑–º—ñ–Ω
        const keepN = Math.max(0, settings.keepLastNMessagesBeforeSummary || 3); // –ì–∞—Ä–∞–Ω—Ç—É—î–º–æ –Ω–µ–≤—ñ–¥'—î–º–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è
        const actualKeepN = Math.min(history.length, keepN); // –ù–µ –º–æ–∂–µ–º–æ –∑–∞–ª–∏—à–∏—Ç–∏ –±—ñ–ª—å—à–µ, –Ω—ñ–∂ —î
        const messagesToKeep = history.slice(-actualKeepN);
        const messagesToProcess = history.slice(0, -actualKeepN);

        this.plugin.logger.debug(`[PromptService] Advanced Context: Keeping last ${messagesToKeep.length}, processing ${messagesToProcess.length} older messages.`);

        // 1. –û–±—Ä–æ–±–∫–∞ —Å—Ç–∞—Ä–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (—Å—É–º–∞—Ä–∏–∑–∞—Ü—ñ—è –∞–±–æ –ø—Ä—è–º–µ –≤–∫–ª—é—á–µ–Ω–Ω—è)
        if (messagesToProcess.length > 0) {
            let olderContextTokens = 0;
            let olderContextContent = "";

            if (settings.enableSummarization) {
                this.plugin.logger.info("[PromptService] Summarization enabled, attempting to summarize older messages...");
                const summary = await this._summarizeMessages(messagesToProcess, chatMetadata);
                if (summary) {
                    olderContextContent = `[Summary of earlier conversation]:\n${summary}`;
                    olderContextTokens = this._countTokens(olderContextContent) + 10; // +10 –∑–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫
                } else {
                    this.plugin.logger.warn("[PromptService] Summarization failed or returned empty. Will try to include older messages directly.");
                    // –Ø–∫—â–æ —Å—É–º–∞—Ä–∏–∑–∞—Ü—ñ—è –Ω–µ –≤–¥–∞–ª–∞—Å—è, —Å–ø—Ä–æ–±—É—î–º–æ –≤–∫–ª—é—á–∏—Ç–∏ —ó—Ö –Ω–∞–ø—Ä—è–º—É (–¥–∏–≤. else –±–ª–æ–∫)
                }
            }

            // –Ø–∫—â–æ —Å—É–º–∞—Ä–∏–∑–∞—Ü—ñ—è –≤–∏–º–∫–Ω–µ–Ω–∞ –ê–ë–û –Ω–µ –≤–¥–∞–ª–∞—Å—è
            if (!olderContextContent) {
                this.plugin.logger.info("[PromptService] Including older messages directly if space allows.");
                let includedOlderCount = 0;
                for (let i = messagesToProcess.length - 1; i >= 0; i--) {
                     const message = messagesToProcess[i];
                     if (message.role === 'system' || message.role === 'error') continue;
                     const formattedMessage = `${message.role === 'user' ? 'User' : 'Assistant'}: ${message.content.trim()}`;
                     const messageTokens = this._countTokens(formattedMessage) + 5;
                     // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π –ª—ñ–º—ñ—Ç maxTokens
                     if (currentTokens + olderContextTokens + messageTokens <= maxTokens) {
                         olderContextContent = formattedMessage + "\n\n" + olderContextContent;
                         olderContextTokens += messageTokens;
                         includedOlderCount++;
                     } else {
                         this.plugin.logger.debug(`[PromptService] Token limit reached while including older messages directly (${currentTokens + olderContextTokens}/${maxTokens}). Included ${includedOlderCount}.`);
                         break;
                     }
                }
                 if(includedOlderCount > 0) {
                    olderContextContent = `[Start of older messages directly included]:\n${olderContextContent.trim()}\n[End of older messages]`;
                    olderContextTokens += 10; // –î–æ–¥–∞—î–º–æ –∑–∞ –º–∞—Ä–∫–µ—Ä–∏
                 }
            }

             // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–ª–µ–Ω—É —Å—Ç–∞—Ä—É —á–∞—Å—Ç–∏–Ω—É, —è–∫—â–æ –≤–æ–Ω–∞ —î —ñ –≤–º—ñ—â–∞—î—Ç—å—Å—è
             if (olderContextContent && currentTokens + olderContextTokens <= maxTokens) {
                processedParts.push(olderContextContent);
                currentTokens += olderContextTokens;
                this.plugin.logger.debug(`[PromptService] Added older context part (${olderContextTokens} tokens). Current total: ${currentTokens}`);
            } else if (olderContextContent) {
                 this.plugin.logger.warn(`[PromptService] Older context part (${olderContextTokens} tokens) exceeds limit (${maxTokens - currentTokens} available). Skipping.`);
            }
        }

        // 2. –û–±—Ä–æ–±–∫–∞ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö N –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        let keptMessagesString = "";
        let keptMessagesTokens = 0;
        let includedKeptCount = 0;
         for (let i = messagesToKeep.length - 1; i >= 0; i--) {
             const message = messagesToKeep[i];
             if (message.role === 'system' || message.role === 'error') continue;
             const formattedMessage = `${message.role === 'user' ? 'User' : 'Assistant'}: ${message.content.trim()}`;
             const messageTokens = this._countTokens(formattedMessage) + 5;
              // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ª—ñ–º—ñ—Ç –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –≤–∂–µ –¥–æ–¥–∞–Ω–∏—Ö —á–∞—Å—Ç–∏–Ω
             if (currentTokens + keptMessagesTokens + messageTokens <= maxTokens) {
                keptMessagesString = formattedMessage + "\n\n" + keptMessagesString;
                keptMessagesTokens += messageTokens;
                includedKeptCount++;
             } else {
                  this.plugin.logger.debug(`[PromptService] Token limit reached while including kept messages (${currentTokens + keptMessagesTokens}/${maxTokens}). Included ${includedKeptCount}.`);
                 break; // –î–æ—Å—è–≥–ª–∏ –ª—ñ–º—ñ—Ç—É
             }
        }

        // –î–æ–¥–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫—â–æ –≤–æ–Ω–∏ —î
         if (keptMessagesString) {
             processedParts.push(keptMessagesString.trim());
             currentTokens += keptMessagesTokens;
             this.plugin.logger.debug(`[PromptService] Added kept messages part (${keptMessagesTokens} tokens). Final total: ${currentTokens}`);
         } else {
              this.plugin.logger.debug("[PromptService] No kept messages to add or token limit prevented inclusion.");
         }

        this.plugin.logger.debug(`[PromptService] Advanced context built. Final approx tokens: ${currentTokens}`);
        return processedParts.join("\n\n").trim(); // –û–±'—î–¥–Ω—É—î–º–æ —á–∞—Å—Ç–∏–Ω–∏ (—Å—É–º–∞—Ä—ñ/—Å—Ç–∞—Ä—ñ + –Ω–æ–≤—ñ)
    }


    private async _summarizeMessages(messagesToSummarize: Message[], chatMetadata: ChatMetadata): Promise<string | null> {
        // ... (–±–µ–∑ –∑–º—ñ–Ω, –æ–∫—Ä—ñ–º –ª–æ–≥—É–≤–∞–Ω–Ω—è) ...
         if (!this.plugin.settings.enableSummarization || messagesToSummarize.length === 0) {
            return null;
        }
        this.plugin.logger.info(`[PromptService] Summarizing chunk of ${messagesToSummarize.length} messages...`); // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ª–æ–≥–µ—Ä
        const textToSummarize = messagesToSummarize
                                    .filter(m => m.role === 'user' || m.role === 'assistant') // –ë–µ—Ä–µ–º–æ —Ç—ñ–ª—å–∫–∏ user/assistant
                                    .map(m => `${m.role === 'user' ? 'User' : 'Assistant'}: ${m.content.trim()}`)
                                    .join("\n");

        if (!textToSummarize.trim()) {
            this.plugin.logger.warn("[PromptService] No actual user/assistant text content in messages to summarize."); // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ª–æ–≥–µ—Ä
            return null;
        }

        const summarizationPromptTemplate = this.plugin.settings.summarizationPrompt || "Summarize the following conversation concisely:\n\n{text_to_summarize}";
        const summarizationFullPrompt = summarizationPromptTemplate.replace('{text_to_summarize}', textToSummarize);

        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –º–æ–¥–µ–ª—å –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —Å—É–º–∞—Ä–∏–∑–∞—Ü—ñ—ó, –Ø–ö–©–û –≤–æ–Ω–∞ –≤–∫–∞–∑–∞–Ω–∞, —ñ–Ω–∞–∫—à–µ - –º–æ–¥–µ–ª—å —á–∞—Ç—É
        const summarizationModelName = this.plugin.settings.summarizationModelName || chatMetadata.modelName || this.plugin.settings.modelName;
        this.plugin.logger.debug(`[PromptService] Using model for summarization: ${summarizationModelName}`);

        const summarizationContextWindow = Math.min(this.plugin.settings.contextWindow || 4096, 4096); // –ú–æ–∂–ª–∏–≤–æ, –≤–∞—Ä—Ç–æ –º–∞—Ç–∏ –æ–∫—Ä–µ–º–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è?

        const requestBody = {
            model: summarizationModelName, // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≤–∏–∑–Ω–∞—á–µ–Ω—É –º–æ–¥–µ–ª—å
            prompt: summarizationFullPrompt,
            stream: false,
            temperature: 0.3, // –ù–∏–∑—å–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—ó —Å—É–º–∞—Ä–∏–∑–∞—Ü—ñ—ó
            options: {
                num_ctx: summarizationContextWindow,
                // –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ stop token, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ ["User:", "Assistant:"]
            },
            // –°–∏—Å—Ç–µ–º–Ω–∏–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Å—É–º–∞—Ä–∏–∑–∞—Ç–æ—Ä–∞
            system: "You are a helpful assistant specializing in concisely summarizing conversation history. Focus on extracting key points, decisions, and unresolved questions."
        };

        try {
            if (!this.plugin.ollamaService) {
                this.plugin.logger.error("[PromptService] OllamaService is not available for summarization.");
                return null;
            }
             this.plugin.logger.debug(`[PromptService] Sending summarization request. Prompt length: ${summarizationFullPrompt.length}`);
            const responseData: OllamaGenerateResponse = await this.plugin.ollamaService.generateRaw(requestBody);

            if (responseData && typeof responseData.response === 'string') {
                const summary = responseData.response.trim();
                this.plugin.logger.info(`[PromptService] Summarization successful (${this._countTokens(summary)} tokens).`);
                return summary;
            } else {
                this.plugin.logger.warn("[PromptService] Summarization request returned unexpected structure:", responseData);
                return null;
            }
        } catch (error) {
            this.plugin.logger.error("[PromptService] Error during summarization request:", error, "Request body (model/options):", {model: requestBody.model, options: requestBody.options});
            return null;
        }
    }

} // End of PromptService class