// OllamaService.ts
import { __asyncGenerator, __await, __awaiter } from "tslib";
export class OllamaService {
    constructor(plugin) {
        this.eventHandlers = {};
        this.plugin = plugin;
        if (!plugin.promptService) {
            const errorMsg = "[OllamaService] CRITICAL: PromptService not available on plugin instance during OllamaService construction!";
            this.plugin.logger.error(errorMsg); // Використовуємо логер плагіна
            throw new Error(errorMsg);
        }
        this.promptService = plugin.promptService;
        this.logger = plugin.logger; // Використовуємо логер плагіна
    }
    // --- Event Emitter (залишаємо без змін) ---
    on(event, callback) {
        if (!this.eventHandlers[event])
            this.eventHandlers[event] = [];
        this.eventHandlers[event].push(callback);
        return () => {
            var _a, _b;
            this.eventHandlers[event] = (_a = this.eventHandlers[event]) === null || _a === void 0 ? void 0 : _a.filter(h => h !== callback);
            if (((_b = this.eventHandlers[event]) === null || _b === void 0 ? void 0 : _b.length) === 0)
                delete this.eventHandlers[event];
        };
    }
    emit(event, data) {
        const h = this.eventHandlers[event];
        if (h)
            h.slice().forEach(handler => { try {
                handler(data);
            }
            catch (e) {
                this.plugin.logger.error(`Error in OllamaService event handler for ${event}:`, e);
            } });
    }
    // ------------------------------------------
    /**
    * Відправляє запит на генерацію відповіді Ollama і повертає асинхронний ітератор для отримання частин відповіді.
    * @param chat Поточний об'єкт чату.
    * @param signal AbortSignal для можливості переривання запиту.
    * @returns Асинхронний ітератор, що видає StreamChunk.
    */
    generateChatResponseStream(chat, // Залишаємо chat, оскільки PromptService потребує ChatMetadata
    signal) {
        return __asyncGenerator(this, arguments, function* generateChatResponseStream_1() {
            var _a, _b, _c, _d, _e, _f;
            const requestTimestampId = Date.now(); // Для логування
            this.logger.debug(`[OllamaService][id:${requestTimestampId}] generateChatResponseStream initiated for chat ${chat.metadata.id}`);
            if (!chat) {
                this.plugin.logger.error("[OllamaService] generateChatResponseStream called with null chat object.");
                yield yield __await({ type: 'error', error: "Chat object is null.", done: true });
                return yield __await(void 0);
            }
            if (!this.promptService) {
                this.plugin.logger.error("[OllamaService] PromptService is unavailable.");
                yield yield __await({ type: 'error', error: "Prompt service is unavailable.", done: true });
                return yield __await(void 0);
            }
            const currentSettings = this.plugin.settings;
            const modelName = chat.metadata.modelName || currentSettings.modelName; // Модель з метаданих чату або дефолтна
            const temperature = (_a = chat.metadata.temperature) !== null && _a !== void 0 ? _a : currentSettings.temperature; // Температура з метаданих або дефолтна
            if (!modelName) {
                this.plugin.logger.error("[OllamaService] No Ollama model selected for chat.", chat.metadata);
                yield yield __await({ type: 'error', error: "No Ollama model selected.", done: true });
                return yield __await(void 0);
            }
            const url = `${this.plugin.settings.ollamaServerUrl}/api/generate`;
            const headers = { 'Content-Type': 'application/json' };
            try {
                const history = chat.getMessages(); // Отримуємо історію з об'єкта Chat
                const systemPrompt = yield __await(this.promptService.getSystemPromptForAPI(chat.metadata));
                const promptBody = yield __await(this.promptService.preparePromptBody(history, chat.metadata));
                if (promptBody === null || promptBody === undefined) {
                    this.plugin.logger.error("[OllamaService] Could not generate prompt body for chat.", chat.metadata);
                    yield yield __await({ type: 'error', error: "Could not generate prompt body.", done: true });
                    return yield __await(void 0);
                }
                const requestBody = Object.assign({ model: modelName, prompt: promptBody, stream: true, temperature: temperature, options: { num_ctx: currentSettings.contextWindow } }, (systemPrompt && { system: systemPrompt }));
                if (this.plugin.agentManager && this.plugin.settings.enableToolUse) {
                    const agentTools = this.plugin.agentManager.getAllToolDefinitions();
                    if (agentTools && agentTools.length > 0) {
                        // Перевірка, чи модель може підтримувати інструменти (дуже приблизна)
                        // Краще мати список моделей, що підтримують інструменти, або перевіряти можливості моделі іншим шляхом
                        const modelDetails = yield __await(this.getModelDetails(modelName));
                        const seemsToSupportTools = ((_c = (_b = modelDetails === null || modelDetails === void 0 ? void 0 : modelDetails.details) === null || _b === void 0 ? void 0 : _b.family) === null || _c === void 0 ? void 0 : _c.toLowerCase().includes("llama3")) ||
                            ((_e = (_d = modelDetails === null || modelDetails === void 0 ? void 0 : modelDetails.details) === null || _d === void 0 ? void 0 : _d.family) === null || _e === void 0 ? void 0 : _e.toLowerCase().includes("mistral")) || // Додайте інші відомі сім'ї
                            (((_f = modelDetails === null || modelDetails === void 0 ? void 0 : modelDetails.details) === null || _f === void 0 ? void 0 : _f.parameter_size) && parseFloat(modelDetails.details.parameter_size.replace('B', '')) >= 7);
                        if (seemsToSupportTools) {
                            requestBody.tools = agentTools.map(tool => ({ type: "function", function: tool }));
                            this.plugin.logger.info(`[OllamaService] Tools provided to Ollama for model ${modelName}:`, agentTools.map(t => t.name));
                            // requestBody.format = 'json'; // Розкоментуйте, якщо модель цього вимагає для tool_calls. ОБЕРЕЖНО!
                        }
                        else {
                            this.plugin.logger.info(`[OllamaService] Model ${modelName} might not natively support tool calling (or check failed). Tools not explicitly sent via 'tools' parameter. Relying on prompt-based fallback if implemented.`);
                            // Тут може бути логіка для додавання інструкцій для fallback-механізму в systemPrompt або promptBody,
                            // якщо ви вирішите його реалізувати.
                        }
                    }
                }
                this.plugin.logger.debug(`[OllamaService] Sending request to ${url} for model ${modelName}. System prompt length: ${(systemPrompt === null || systemPrompt === void 0 ? void 0 : systemPrompt.length) || 0}, Body prompt length: ${promptBody.length}`);
                // this.plugin.logger.debug(`[OllamaService] Request body: ${JSON.stringify(requestBody, null, 2)}`);
                this.logger.debug(`[OllamaService][id:${requestTimestampId}] Sending request to ${url} for model ${modelName}. Prompt length: ${promptBody.length}. System part length: ${(systemPrompt === null || systemPrompt === void 0 ? void 0 : systemPrompt.length) || 0}`);
                this.logger.trace(`[OllamaService][id:${requestTimestampId}] Request body:`, requestBody);
                const response = yield __await(fetch(url, {
                    method: 'POST',
                    headers: headers,
                    body: JSON.stringify(requestBody),
                    signal: signal
                }));
                if (!response.ok) {
                    let errorText = `Ollama API error! Status: ${response.status}`;
                    try {
                        const errorJson = yield __await(response.json());
                        errorText += `: ${(errorJson === null || errorJson === void 0 ? void 0 : errorJson.error) || response.statusText || 'No details'}`;
                    }
                    catch (e) {
                        errorText += `: ${response.statusText || 'Could not parse error details'}`;
                    }
                    this.plugin.logger.error(`[OllamaService] API Error: ${errorText}`, requestBody);
                    this.emit('connection-error', new Error(errorText));
                    yield yield __await({ type: 'error', error: errorText, done: true });
                    return yield __await(void 0);
                }
                if (!response.body) {
                    this.plugin.logger.error("[OllamaService] Response body is null.");
                    yield yield __await({ type: 'error', error: "Response body is null.", done: true });
                    return yield __await(void 0);
                }
                const reader = response.body.getReader();
                const decoder = new TextDecoder();
                let buffer = '';
                let rawResponseAccumulator = "";
                while (true) {
                    const { done, value } = yield __await(reader.read());
                    if (signal === null || signal === void 0 ? void 0 : signal.aborted) {
                        this.plugin.logger.info("[OllamaService] Stream generation aborted by user signal.");
                        reader.cancel("Aborted by user");
                        yield yield __await({ type: 'error', error: "Generation aborted by user.", done: true });
                        return yield __await(void 0);
                    }
                    const decodedChunk = decoder.decode(value, { stream: !done });
                    // --- ЛОГУВАННЯ СИРОГО ПОТОКУ ---
                    rawResponseAccumulator += decodedChunk;
                    if (done) {
                        this.plugin.logger.info("[OllamaService] Stream reader marked as done.");
                        this.logger.debug(`[OllamaService][id:${requestTimestampId}] Stream reader 'done'. Final raw buffer: "${buffer}${decodedChunk}"`);
                        // --- ЛОГУВАННЯ ПОВНОЇ СИРОЇ ВІДПОВІДІ ---
                        this.logger.debug(`[OllamaService][id:${requestTimestampId}] === RAW FULL STREAM RESPONSE (from OllamaService) START ===`);
                        this.logger.debug(rawResponseAccumulator);
                        this.logger.debug(`[OllamaService][id:${requestTimestampId}] === RAW FULL STREAM RESPONSE (from OllamaService) END === Length: ${rawResponseAccumulator.length}`);
                        buffer += decodedChunk; //CHECKIT
                        // -------------------------------------------
                        // Обробка залишку буфера, якщо він не порожній і є валідним JSON
                        if (buffer.trim()) {
                            try {
                                const jsonChunk = JSON.parse(buffer.trim());
                                // Це малоймовірно, але якщо останній чанк був не `done:true`
                                if (jsonChunk.message && jsonChunk.message.tool_calls && jsonChunk.message.tool_calls.length > 0) {
                                    yield yield __await({ type: 'tool_calls', calls: jsonChunk.message.tool_calls, assistant_message_with_calls: jsonChunk.message, model: jsonChunk.model, created_at: jsonChunk.created_at });
                                }
                                else if (typeof jsonChunk.response === 'string') {
                                    yield yield __await({ type: 'content', response: jsonChunk.response, done: jsonChunk.done || false, model: jsonChunk.model, created_at: jsonChunk.created_at });
                                }
                                else if (jsonChunk.error) {
                                    yield yield __await({ type: 'error', error: jsonChunk.error, done: true });
                                }
                                // Якщо тут `done:true`, то це вже мало бути оброблено в циклі нижче
                            }
                            catch (e) {
                                this.plugin.logger.warn(`[OllamaService] Failed to parse final buffer content: "${buffer.trim()}". Error: ${e.message}`);
                            }
                        }
                        break; // Вихід з циклу, коли потік завершено
                    }
                    buffer += decoder.decode(value, { stream: true });
                    let eolIndex;
                    while ((eolIndex = buffer.indexOf('\n')) >= 0) {
                        const line = buffer.substring(0, eolIndex).trim();
                        buffer = buffer.substring(eolIndex + 1);
                        if (line === '')
                            continue;
                        try {
                            const jsonChunk = JSON.parse(line);
                            // this.plugin.logger.debug('[OllamaService] Raw chunk received:', JSON.stringify(jsonChunk));
                            if (jsonChunk.error) {
                                this.plugin.logger.error(`[OllamaService] Error chunk from Ollama: ${jsonChunk.error}`);
                                yield yield __await({ type: 'error', error: jsonChunk.error, done: true });
                                reader.cancel("Error received from Ollama stream");
                                return yield __await(void 0); // Важливо вийти, якщо Ollama повернула помилку
                            }
                            // Пріоритет для tool_calls
                            if (jsonChunk.message && jsonChunk.message.tool_calls && jsonChunk.message.tool_calls.length > 0) {
                                this.plugin.logger.info('[OllamaService] Yielding tool_calls chunk:', jsonChunk.message.tool_calls);
                                yield yield __await({
                                    type: 'tool_calls',
                                    calls: jsonChunk.message.tool_calls,
                                    assistant_message_with_calls: jsonChunk.message,
                                    model: jsonChunk.model,
                                    created_at: jsonChunk.created_at
                                });
                                // Після tool_calls модель зазвичай чекає на відповідь, тому done може бути false.
                                // Якщо done тут true, це означає, що модель не чекає і завершує хід.
                                if (jsonChunk.done === true) {
                                    this.plugin.logger.info('[OllamaService] Stream finished (done:true received with tool_calls chunk).');
                                    yield yield __await({
                                        type: 'done',
                                        model: jsonChunk.model,
                                        created_at: jsonChunk.created_at,
                                        context: jsonChunk.context, // та інші метрики, якщо є
                                        total_duration: jsonChunk.total_duration,
                                        load_duration: jsonChunk.load_duration,
                                        prompt_eval_count: jsonChunk.prompt_eval_count,
                                        prompt_eval_duration: jsonChunk.prompt_eval_duration,
                                        eval_count: jsonChunk.eval_count,
                                        eval_duration: jsonChunk.eval_duration
                                    });
                                    this.logger.debug(`[OllamaService][id:${requestTimestampId}] === RAW FULL STREAM RESPONSE (from OllamaService after final done) START ===`);
                                    this.logger.debug(rawResponseAccumulator);
                                    this.logger.debug(`[OllamaService][id:${requestTimestampId}] === RAW FULL STREAM RESPONSE (from OllamaService after final done) END === Length: ${rawResponseAccumulator.length}`);
                                    // -------------------------------------------
                                    return yield __await(void 0);
                                }
                            }
                            else if (typeof jsonChunk.response === 'string') { // Текстовий контент
                                // this.plugin.logger.debug('[OllamaService] Yielding content chunk.');
                                yield yield __await({
                                    type: 'content',
                                    response: jsonChunk.response,
                                    done: jsonChunk.done || false, // done може бути true тут, якщо це останній текстовий чанк
                                    model: jsonChunk.model,
                                    created_at: jsonChunk.created_at
                                });
                                if (jsonChunk.done === true) { // Якщо це останній текстовий чанк і done=true
                                    this.plugin.logger.info('[OllamaService] Stream finished (done:true received with content chunk).');
                                    // Не відправляємо окремий 'done' чанк, бо інформація вже в цьому.
                                    // Однак, фінальний 'done' чанк від Ollama зазвичай містить більше метрик.
                                    // Якщо це не фінальний чанк з метриками, тоді очікуємо його.
                                    // Якщо `jsonChunk` вже містить всі метрики, то можна повернути його як `done`
                                    // Але зазвичай є окремий фінальний чанк лише з `done:true` та метриками.
                                }
                            }
                            else if (jsonChunk.done === true) { // Фінальний чанк "done" з метриками
                                this.plugin.logger.info('[OllamaService] Stream finished (final done:true chunk with metrics).');
                                this.plugin.logger.error('[OllamaService] Final chunk with metrics:', jsonChunk);
                                yield yield __await({
                                    type: 'done',
                                    model: jsonChunk.model,
                                    created_at: jsonChunk.created_at,
                                    context: jsonChunk.context,
                                    total_duration: jsonChunk.total_duration,
                                    load_duration: jsonChunk.load_duration,
                                    prompt_eval_count: jsonChunk.prompt_eval_count,
                                    prompt_eval_duration: jsonChunk.prompt_eval_duration,
                                    eval_count: jsonChunk.eval_count,
                                    eval_duration: jsonChunk.eval_duration
                                });
                                return yield __await(void 0); // Завершуємо генератор
                            }
                            else if (jsonChunk.message && (jsonChunk.message.content === null || jsonChunk.message.content === "") && !jsonChunk.message.tool_calls) {
                                // Це може бути порожнє повідомлення асистента (напр., перед tool_calls або при завершенні)
                                // Якщо done false, ігноруємо його, чекаємо на корисні дані або done:true.
                                // this.plugin.logger.debug('[OllamaService] Received empty assistant message shell, ignoring.');
                            }
                            // else {
                            //   this.plugin.logger.warn('[OllamaService] Unhandled or unexpected chunk structure:', jsonChunk);
                            // }
                        }
                        catch (e) {
                            this.plugin.logger.warn(`[OllamaService] Failed to parse JSON chunk: "${line}". Error: ${e.message}. Skipping chunk.`);
                            // Не кидаємо помилку, щоб не перервати весь потік через один пошкоджений чанк,
                            // але логуємо її.
                        }
                    } // кінець while ((eolIndex = buffer.indexOf('\n')) >= 0)
                } // кінець while (true)
            }
            catch (error) {
                if (error.name === 'AbortError') {
                    this.plugin.logger.info("[OllamaService] Stream generation aborted by user (caught AbortError).");
                    yield yield __await({ type: 'error', error: "Generation aborted by user.", done: true });
                }
                else {
                    let errorMessage = error instanceof Error ? error.message : "Unknown error generating stream.";
                    if (errorMessage.includes("connect") || errorMessage.includes("fetch") || errorMessage.includes("NetworkError") || errorMessage.includes('Failed to fetch')) {
                        errorMessage = `Connection Error: Failed to reach Ollama at ${this.plugin.settings.ollamaServerUrl}. Is it running?`;
                        this.emit('connection-error', new Error(errorMessage));
                    }
                    this.plugin.logger.error(`[OllamaService] Error during stream generation: ${errorMessage}`, error);
                    yield yield __await({ type: 'error', error: errorMessage, done: true });
                }
            }
            finally {
                this.plugin.logger.info("[OllamaService] generateChatResponseStream finished or terminated.");
            }
        });
    }
    // ... (інші ваші методи: generateRaw, generateEmbeddings, getModels, getModelDetails) ...
    // Переконайтеся, що вони адаптовані для використання this.plugin.logger замість console.error/log
    // і this.emit('connection-error', ...) для помилок з'єднання.
    generateRaw(requestBody) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a;
            if (!requestBody.model || !requestBody.prompt) {
                this.plugin.logger.error("[OllamaService] generateRaw called without 'model' or 'prompt'.");
                throw new Error("generateRaw requires 'model' and 'prompt' in requestBody");
            }
            requestBody.stream = false;
            if (!requestBody.system) {
                delete requestBody.system;
            }
            const url = `${this.plugin.settings.ollamaServerUrl}/api/generate`;
            const headers = { 'Content-Type': 'application/json' };
            try {
                const response = yield fetch(url, {
                    method: 'POST',
                    headers: headers,
                    body: JSON.stringify(requestBody)
                });
                if (!response.ok) {
                    let errorText = `Ollama API error (generateRaw)! Status: ${response.status}`;
                    try {
                        const errorJson = yield response.json();
                        errorText += `: ${(errorJson === null || errorJson === void 0 ? void 0 : errorJson.error) || response.statusText || 'No details'}`;
                    }
                    catch (e) {
                        errorText += `: ${response.statusText || 'Could not parse error details'}`;
                    }
                    this.plugin.logger.error(`[OllamaService] API Error (generateRaw): ${errorText}`, requestBody);
                    this.emit('connection-error', new Error(errorText));
                    throw new Error(errorText);
                }
                if (!response.body) {
                    this.plugin.logger.error("[OllamaService] Response body is null (generateRaw).");
                    throw new Error("Response body is null (generateRaw)");
                }
                return yield response.json();
            }
            catch (error) {
                const connectionErrorMsg = `Failed to connect/communicate with Ollama server at ${this.plugin.settings.ollamaServerUrl}. Is it running? (Endpoint: /api/generate, non-streamed)`;
                if (!((_a = error.message) === null || _a === void 0 ? void 0 : _a.includes('Ollama API error'))) {
                    this.plugin.logger.error(`[OllamaService] Connection/Fetch Error (generateRaw): ${connectionErrorMsg}`, error);
                    this.emit('connection-error', new Error(connectionErrorMsg));
                }
                throw new Error(error.message || connectionErrorMsg);
            }
        });
    }
    generateEmbeddings(prompts, model) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!prompts || prompts.length === 0)
                return [];
            const endpoint = '/api/embeddings';
            const url = `${this.plugin.settings.ollamaServerUrl}${endpoint}`;
            const headers = { 'Content-Type': 'application/json' };
            const embeddingsList = [];
            try {
                for (const prompt of prompts) {
                    const trimmedPrompt = prompt.trim();
                    if (!trimmedPrompt)
                        continue;
                    const requestBody = JSON.stringify({ model: model, prompt: trimmedPrompt });
                    try {
                        const response = yield fetch(url, { method: 'POST', headers, body: requestBody });
                        if (!response.ok) {
                            let errorText = `Ollama Embeddings API error! Status: ${response.status}`;
                            try {
                                const errJson = yield response.json();
                                errorText += `: ${(errJson === null || errJson === void 0 ? void 0 : errJson.error) || 'Details unavailable'}`;
                            }
                            catch (_a) { }
                            this.plugin.logger.warn(`[OllamaService] Embeddings API Error for prompt "${trimmedPrompt.substring(0, 30)}...": ${errorText}`);
                            // Продовжуємо з іншими промптами
                            continue;
                        }
                        const embeddingResponse = yield response.json();
                        if (embeddingResponse && embeddingResponse.embedding) {
                            embeddingsList.push(embeddingResponse.embedding);
                        }
                        else {
                            this.plugin.logger.warn(`[OllamaService] Valid response but no embedding found for prompt "${trimmedPrompt.substring(0, 30)}..."`);
                        }
                    }
                    catch (singleError) {
                        this.plugin.logger.error(`[OllamaService] Error generating embedding for prompt "${trimmedPrompt.substring(0, 30)}...": ${singleError.message}`, singleError);
                        this.emit('connection-error', new Error(singleError.message || 'Embedding generation failed for a prompt'));
                        // Продовжуємо
                    }
                }
                return embeddingsList.length > 0 ? embeddingsList : null;
            }
            catch (error) {
                // Ця зовнішня помилка малоймовірна, якщо внутрішні обробляються
                this.plugin.logger.error(`[OllamaService] Outer error in generateEmbeddings: ${error.message}`, error);
                return null;
            }
        });
    }
    getModels() {
        return __awaiter(this, arguments, void 0, function* (forceRefresh = false) {
            var _a;
            // `forceRefresh` тут не використовується, оскільки ми не кешуємо список моделей в цьому сервісі.
            // Якщо кешування буде додано, тоді `forceRefresh` стане актуальним.
            const endpoint = '/api/tags';
            const url = `${this.plugin.settings.ollamaServerUrl}${endpoint}`;
            let modelListResult = [];
            try {
                const response = yield fetch(url, { method: 'GET' });
                if (!response.ok) {
                    let errorText = `Ollama Tags API error! Status: ${response.status}`;
                    try {
                        const errJson = yield response.json();
                        errorText += `: ${(errJson === null || errJson === void 0 ? void 0 : errJson.error) || 'Details unavailable'}`;
                    }
                    catch (_b) { }
                    this.plugin.logger.error(`[OllamaService] Tags API Error: ${errorText}`);
                    this.emit('connection-error', new Error(errorText));
                    // Повертаємо порожній масив у випадку помилки API, щоб UI не "завис"
                    return [];
                }
                const data = yield response.json(); // Додав більше полів для типу
                if (data && Array.isArray(data.models)) {
                    modelListResult = data.models
                        .map((m) => m === null || m === void 0 ? void 0 : m.name)
                        .filter((name) => typeof name === 'string' && name.length > 0)
                        .sort();
                }
                else {
                    this.plugin.logger.warn("[OllamaService] Received unexpected data format from /api/tags", data);
                }
            }
            catch (e) {
                const connectionErrorMsg = `Failed to connect or fetch models from Ollama server at ${this.plugin.settings.ollamaServerUrl}. (Endpoint: /api/tags)`;
                if (!((_a = e.message) === null || _a === void 0 ? void 0 : _a.includes('API error'))) { // Avoid duplicate emits
                    this.plugin.logger.error(`[OllamaService] Connection/Fetch Error (getModels): ${connectionErrorMsg}`, e);
                    this.emit('connection-error', new Error(e.message || connectionErrorMsg));
                }
                // Повертаємо порожній масив, щоб UI міг це обробити
                return [];
            }
            return modelListResult;
        });
    }
    getModelDetails(modelName) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a;
            const endpoint = '/api/show';
            const url = `${this.plugin.settings.ollamaServerUrl}${endpoint}`;
            const headers = { 'Content-Type': 'application/json' };
            try {
                const response = yield fetch(url, { method: 'POST', headers, body: JSON.stringify({ name: modelName }) });
                if (!response.ok) {
                    let errorText = `Ollama Show API error for model ${modelName}! Status: ${response.status}`;
                    try {
                        const errJson = yield response.json();
                        errorText += `: ${(errJson === null || errJson === void 0 ? void 0 : errJson.error) || 'Details unavailable'}`;
                    }
                    catch (_b) { }
                    this.plugin.logger.error(`[OllamaService] Show API Error: ${errorText}`);
                    if (response.status !== 404) { // Не емітуємо помилку з'єднання, якщо це просто "модель не знайдено"
                        this.emit('connection-error', new Error(errorText));
                    }
                    return null; // Повертаємо null, якщо модель не знайдено або інша помилка
                }
                const data = yield response.json();
                return data;
            }
            catch (e) {
                const connectionErrorMsg = `Failed to connect or get details for model ${modelName} from Ollama server at ${this.plugin.settings.ollamaServerUrl}. (Endpoint: /api/show)`;
                if (!((_a = e.message) === null || _a === void 0 ? void 0 : _a.includes('API error'))) {
                    this.plugin.logger.error(`[OllamaService] Connection/Fetch Error (getModelDetails): ${connectionErrorMsg}`, e);
                    this.emit('connection-error', new Error(e.message || connectionErrorMsg));
                }
                return null;
            }
        });
    }
} // --- End of OllamaService class ---
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT2xsYW1hU2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIk9sbGFtYVNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsbUJBQW1COztBQTZCbkIsTUFBTSxPQUFPLGFBQWE7SUFNeEIsWUFBWSxNQUFvQjtRQUh4QixrQkFBYSxHQUE4QyxFQUFFLENBQUM7UUFJcEUsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDckIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLEVBQUUsQ0FBQztZQUMxQixNQUFNLFFBQVEsR0FBRyw2R0FBNkcsQ0FBQztZQUMvSCxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQywrQkFBK0I7WUFDbkUsTUFBTSxJQUFJLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUM1QixDQUFDO1FBQ0QsSUFBSSxDQUFDLGFBQWEsR0FBRyxNQUFNLENBQUMsYUFBYSxDQUFDO1FBQzFDLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLCtCQUErQjtJQUM5RCxDQUFDO0lBRUQsNkNBQTZDO0lBQzdDLEVBQUUsQ0FBQyxLQUFhLEVBQUUsUUFBNEI7UUFDNUMsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDO1lBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDL0QsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDekMsT0FBTyxHQUFHLEVBQUU7O1lBQ1YsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsR0FBRyxNQUFBLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLDBDQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxRQUFRLENBQUMsQ0FB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IE9sbGFtYVBsdWdpbiBmcm9tICcuL21haW4nO1xuLy8g0JLQsNC20LvQuNCy0L46INCG0LzQv9C+0YDRgtGD0ZTQvNC+INGC0LjQv9C4LCDRj9C60ZYg0LLQuNC30L3QsNGH0LjQu9C4INCy0LjRidC1INCw0LHQviDRgtGWLCDRidC+INCy0LbQtSDRlCDRgyDQstCw0YjQvtC80YMg0L/RgNC+0LXQutGC0ZZcbmltcG9ydCB7XG4gIE9sbGFtYUdlbmVyYXRlQ2h1bmssIC8vINCf0YDQuNC/0YPRgdGC0LjQvNC+LCDRhtC1INCy0LDRiCDRgtC40L8g0LTQu9GPINC30LLQuNGH0LDQudC90L7Qs9C+INGH0LDQvdC60LAg0LLRltC00L/QvtCy0ZbQtNGWXG4gIE9sbGFtYUVycm9yQ2h1bmssICAgLy8g0JLQsNGIINGC0LjQvyDQtNC70Y8g0L/QvtC80LjQu9C60LhcbiAgTWVzc2FnZSwgICAgICAgICAgICAvLyDQktCw0Ygg0ZbQvdGC0LXRgNGE0LXQudGBIE1lc3NhZ2VcbiAgT2xsYW1hRW1iZWRkaW5nc1Jlc3BvbnNlLFxuICBPbGxhbWFHZW5lcmF0ZVJlc3BvbnNlLFxuICBPbGxhbWFTaG93UmVzcG9uc2UsXG4gIC8vINCU0L7QtNCw0LzQviDRgtC40L/QuCDQtNC70Y8g0L/QvtGC0L7QutGDLCDRj9C60YnQviDRl9GFINGJ0LUg0L3QtdC80LDRlDpcbiAgVG9vbENhbGwsXG4gIEFzc2lzdGFudE1lc3NhZ2UgLy8g0KLQuNC/INC00LvRjyDQv9C+0LLRltC00L7QvNC70LXQvdC90Y8g0LDRgdC40YHRgtC10L3RgtCwLCDRidC+INC80L7QttC1INC80ZbRgdGC0LjRgtC4IHRvb2xfY2FsbHNcbn0gZnJvbSAnLi90eXBlcyc7IC8vINCQ0LTQsNC/0YLRg9C50YLQtSDRiNC70Y/RhSDQtNC+INCy0LDRiNC40YUg0YLQuNC/0ZbQslxuXG5pbXBvcnQgeyBQcm9tcHRTZXJ2aWNlIH0gZnJvbSAnLi9Qcm9tcHRTZXJ2aWNlJztcbmltcG9ydCB7IENoYXQsIENoYXRNZXRhZGF0YSB9IGZyb20gJy4vQ2hhdCc7IC8vINCf0YDQuNC/0YPRgdC60LDRjtGH0LgsINGJ0L4gQ2hhdE1ldGFkYXRhINGW0YHQvdGD0ZRcbmltcG9ydCB7IElUb29sRnVuY3Rpb24gfSBmcm9tICcuL2FnZW50cy9JQWdlbnQnOyAvLyDQhtC90YLQtdGA0YTQtdC50YEg0LTQu9GPINCy0LjQt9C90LDRh9C10L3QvdGPINGW0L3RgdGC0YDRg9C80LXQvdGC0ZbQslxuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSAnLi9Mb2dnZXInO1xuXG4vLyDQktC40LfQvdCw0YfQuNC80L4g0YLQuNC/0Lgg0YfQsNC90LrRltCyLCDRj9C60ZYg0LHRg9C00LUg0L/QvtCy0LXRgNGC0LDRgtC4INC90LDRiCDQv9C+0YLRltC6XG5leHBvcnQgdHlwZSBTdHJlYW1DaHVuayA9XG4gIHwgeyB0eXBlOiAnY29udGVudCc7IHJlc3BvbnNlOiBzdHJpbmc7IGRvbmU6IGJvb2xlYW47IG1vZGVsOiBzdHJpbmc7IGNyZWF0ZWRfYXQ6IHN0cmluZzsgfVxuICB8IHsgdHlwZTogJ3Rvb2xfY2FsbHMnOyBjYWxsczogVG9vbENhbGxbXTsgYXNzaXN0YW50X21lc3NhZ2Vfd2l0aF9jYWxsczogQXNzaXN0YW50TWVzc2FnZTsgbW9kZWw6IHN0cmluZzsgY3JlYXRlZF9hdDogc3RyaW5nOyB9XG4gIHwgeyB0eXBlOiAnZG9uZSc7IG1vZGVsOiBzdHJpbmc7IGNyZWF0ZWRfYXQ6IHN0cmluZzsgY29udGV4dD86IG51bWJlcltdOyB0b3RhbF9kdXJhdGlvbj86IG51bWJlcjsgbG9hZF9kdXJhdGlvbj86IG51bWJlcjsgcHJvbXB0X2V2YWxfY291bnQ/OiBudW1iZXI7IHByb21wdF9ldmFsX2R1cmF0aW9uPzogbnVtYmVyOyBldmFsX2NvdW50PzogbnVtYmVyOyBldmFsX2R1cmF0aW9uPzogbnVtYmVyOyB9XG4gIHwgeyB0eXBlOiAnZXJyb3InOyBlcnJvcjogc3RyaW5nOyBkb25lOiB0cnVlOyB9O1xuXG5cbmV4cG9ydCBjbGFzcyBPbGxhbWFTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBwbHVnaW46IE9sbGFtYVBsdWdpbjtcbiAgcHJpdmF0ZSBwcm9tcHRTZXJ2aWNlOiBQcm9tcHRTZXJ2aWNlO1xuICBwcml2YXRlIGV2ZW50SGFuZGxlcnM6IFJlY29yZDxzdHJpbmcsIEFycmF5PChkYXRhOiBhbnkpID0+IGFueT4+ID0ge307XG4gIGxvZ2dlcjogTG9nZ2VyO1xuXG4gIGNvbnN0cnVjdG9yKHBsdWdpbjogT2xsYW1hUGx1Z2luKSB7XG4gICAgdGhpcy5wbHVnaW4gPSBwbHVnaW47XG4gICAgaWYgKCFwbHVnaW4ucHJvbXB0U2VydmljZSkge1xuICAgICAgY29uc3QgZXJyb3JNc2cgPSBcIltPbGxhbWFTZXJ2aWNlXSBDUklUSUNBTDogUHJvbXB0U2VydmljZSBub3QgYXZhaWxhYmxlIG9uIHBsdWdpbiBpbnN0YW5jZSBkdXJpbmcgT2xsYW1hU2VydmljZSBjb25zdHJ1Y3Rpb24hXCI7XG4gICAgICB0aGlzLnBsdWdpbi5sb2dnZXIuZXJyb3IoZXJyb3JNc2cpOyAvLyDQktC40LrQvtGA0LjRgdGC0L7QstGD0ZTQvNC+INC70L7Qs9C10YAg0L/Qu9Cw0LPRltC90LBcbiAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvck1zZyk7XG4gICAgfVxuICAgIHRoaXMucHJvbXB0U2VydmljZSA9IHBsdWdpbi5wcm9tcHRTZXJ2aWNlO1xuICAgIHRoaXMubG9nZ2VyID0gcGx1Z2luLmxvZ2dlcjsgLy8g0JLQuNC60L7RgNC40YHRgtC+0LLRg9GU0LzQviDQu9C+0LPQtdGAINC/0LvQsNCz0ZbQvdCwXG4gIH1cblxuICAvLyAtLS0gRXZlbnQgRW1pdHRlciAo0LfQsNC70LjRiNCw0ZTQvNC+INCx0LXQtyDQt9C80ZbQvSkgLS0tXG4gIG9uKGV2ZW50OiBzdHJpbmcsIGNhbGxiYWNrOiAoZGF0YTogYW55KSA9PiBhbnkpOiAoKSA9PiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuZXZlbnRIYW5kbGVyc1tldmVudF0pIHRoaXMuZXZlbnRIYW5kbGVyc1tldmVudF0gPSBbXTtcbiAgICB0aGlzLmV2ZW50SGFuZGxlcnNbZXZlbnRdLnB1c2goY2FsbGJhY2spO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICB0aGlzLmV2ZW50SGFuZGxlcnNbZXZlbnRdID0gdGhpcy5ldmVudEhhbmRsZXJzW2V2ZW50XT8uZmlsdGVyKGggPT4gaCAhPT0gY2FsbGJhY2spO1xuICAgICAgaWYgKHRoaXMuZXZlbnRIYW5kbGVyc1tldmVudF0/Lmxlbmd0aCA9PT0gMCkgZGVsZXRlIHRoaXMuZXZlbnRIYW5kbGVyc1tldmVudF07XG4gICAgfTtcbiAgfVxuXG4gIGVtaXQoZXZlbnQ6IHN0cmluZywgZGF0YT86IGFueSk6IHZvaWQge1xuICAgIGNvbnN0IGggPSB0aGlzLmV2ZW50SGFuZGxlcnNbZXZlbnRdO1xuICAgIGlmIChoKSBoLnNsaWNlKCkuZm9yRWFjaChoYW5kbGVyID0+IHsgdHJ5IHsgaGFuZGxlcihkYXRhKTsgfSBjYXRjaCAoZSkgeyB0aGlzLnBsdWdpbi5sb2dnZXIuZXJyb3IoYEVycm9yIGluIE9sbGFtYVNlcnZpY2UgZXZlbnQgaGFuZGxlciBmb3IgJHtldmVudH06YCwgZSk7IH0gfSk7XG4gIH1cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICog0JLRltC00L/RgNCw0LLQu9GP0ZQg0LfQsNC/0LjRgiDQvdCwINCz0LXQvdC10YDQsNGG0ZbRjiDQstGW0LTQv9C+0LLRltC00ZYgT2xsYW1hINGWINC/0L7QstC10YDRgtCw0ZQg0LDRgdC40L3RhdGA0L7QvdC90LjQuSDRltGC0LXRgNCw0YLQvtGAINC00LvRjyDQvtGC0YDQuNC80LDQvdC90Y8g0YfQsNGB0YLQuNC9INCy0ZbQtNC/0L7QstGW0LTRli5cbiAgKiBAcGFyYW0gY2hhdCDQn9C+0YLQvtGH0L3QuNC5INC+0LEn0ZTQutGCINGH0LDRgtGDLlxuICAqIEBwYXJhbSBzaWduYWwgQWJvcnRTaWduYWwg0LTQu9GPINC80L7QttC70LjQstC+0YHRgtGWINC/0LXRgNC10YDQuNCy0LDQvdC90Y8g0LfQsNC/0LjRgtGDLlxuICAqIEByZXR1cm5zINCQ0YHQuNC90YXRgNC+0L3QvdC40Lkg0ZbRgtC10YDQsNGC0L7RgCwg0YnQviDQstC40LTQsNGUIFN0cmVhbUNodW5rLlxuICAqL1xuICBhc3luYyogZ2VuZXJhdGVDaGF0UmVzcG9uc2VTdHJlYW0oXG4gICAgY2hhdDogQ2hhdCwgLy8g0JfQsNC70LjRiNCw0ZTQvNC+IGNoYXQsINC+0YHQutGW0LvRjNC60LggUHJvbXB0U2VydmljZSDQv9C+0YLRgNC10LHRg9GUIENoYXRNZXRhZGF0YVxuICAgIHNpZ25hbD86IEFib3J0U2lnbmFsXG4gICk6IEFzeW5jSXRlcmFibGVJdGVyYXRvcjxTdHJlYW1DaHVuaz4ge1xuICAgIGNvbnN0IHJlcXVlc3RUaW1lc3RhbXBJZCA9IERhdGUubm93KCk7IC8vINCU0LvRjyDQu9C+0LPRg9Cy0LDQvdC90Y9cbiAgICB0aGlzLmxvZ2dlci5kZWJ1ZyhgW09sbGFtYVNlcnZpY2VdW2lkOiR7cmVxdWVzdFRpbWVzdGFtcElkfV0gZ2VuZXJhdGVDaGF0UmVzcG9uc2VTdHJlYW0gaW5pdGlhdGVkIGZvciBjaGF0ICR7Y2hhdC5tZXRhZGF0YS5pZH1gKTtcbiAgICBpZiAoIWNoYXQpIHtcbiAgICAgIHRoaXMucGx1Z2luLmxvZ2dlci5lcnJvcihcIltPbGxhbWFTZXJ2aWNlXSBnZW5lcmF0ZUNoYXRSZXNwb25zZVN0cmVhbSBjYWxsZWQgd2l0aCBudWxsIGNoYXQgb2JqZWN0LlwiKTtcbiAgICAgIHlpZWxkIHsgdHlwZTogJ2Vycm9yJywgZXJyb3I6IFwiQ2hhdCBvYmplY3QgaXMgbnVsbC5cIiwgZG9uZTogdHJ1ZSB9O1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoIXRoaXMucHJvbXB0U2VydmljZSkge1xuICAgICAgdGhpcy5wbHVnaW4ubG9nZ2VyLmVycm9yKFwiW09sbGFtYVNlcnZpY2VdIFByb21wdFNlcnZpY2UgaXMgdW5hdmFpbGFibGUuXCIpO1xuICAgICAgeWllbGQgeyB0eXBlOiAnZXJyb3InLCBlcnJvcjogXCJQcm9tcHQgc2VydmljZSBpcyB1bmF2YWlsYWJsZS5cIiwgZG9uZTogdHJ1ZSB9O1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGN1cnJlbnRTZXR0aW5ncyA9IHRoaXMucGx1Z2luLnNldHRpbmdzO1xuICAgIGNvbnN0IG1vZGVsTmFtZSA9IGNoYXQubWV0YWRhdGEubW9kZWxOYW1lIHx8IGN1cnJlbnRTZXR0aW5ncy5tb2RlbE5hbWU7IC8vINCc0L7QtNC10LvRjCDQtyDQvNC10YLQsNC00LDQvdC40YUg0YfQsNGC0YMg0LDQsdC+INC00LXRhNC+0LvRgtC90LBcbiAgICBjb25zdCB0ZW1wZXJhdHVyZSA9IGNoYXQubWV0YWRhdGEudGVtcGVyYXR1cmUgPz8gY3VycmVudFNldHRpbmdzLnRlbXBlcmF0dXJlOyAvLyDQotC10LzQv9C10YDQsNGC0YPRgNCwINC3INC80LXRgtCw0LTQsNC90LjRhSDQsNCx0L4g0LTQtdGE0L7Qu9GC0L3QsFxuXG4gICAgaWYgKCFtb2RlbE5hbWUpIHtcbiAgICAgIHRoaXMucGx1Z2luLmxvZ2dlci5lcnJvcihcIltPbGxhbWFTZXJ2aWNlXSBObyBPbGxhbWEgbW9kZWwgc2VsZWN0ZWQgZm9yIGNoYXQuXCIsIGNoYXQubWV0YWRhdGEpO1xuICAgICAgeWllbGQgeyB0eXBlOiAnZXJyb3InLCBlcnJvcjogXCJObyBPbGxhbWEgbW9kZWwgc2VsZWN0ZWQuXCIsIGRvbmU6IHRydWUgfTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCB1cmwgPSBgJHt0aGlzLnBsdWdpbi5zZXR0aW5ncy5vbGxhbWFTZXJ2ZXJVcmx9L2FwaS9nZW5lcmF0ZWA7XG4gICAgY29uc3QgaGVhZGVycyA9IHsgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyB9O1xuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGhpc3RvcnkgPSBjaGF0LmdldE1lc3NhZ2VzKCk7IC8vINCe0YLRgNC40LzRg9GU0LzQviDRltGB0YLQvtGA0ZbRjiDQtyDQvtCxJ9GU0LrRgtCwIENoYXRcbiAgICAgIGNvbnN0IHN5c3RlbVByb21wdCA9IGF3YWl0IHRoaXMucHJvbXB0U2VydmljZS5nZXRTeXN0ZW1Qcm9tcHRGb3JBUEkoY2hhdC5tZXRhZGF0YSk7XG4gICAgICBjb25zdCBwcm9tcHRCb2R5ID0gYXdhaXQgdGhpcy5wcm9tcHRTZXJ2aWNlLnByZXBhcmVQcm9tcHRCb2R5KGhpc3RvcnksIGNoYXQubWV0YWRhdGEpO1xuXG4gICAgICBpZiAocHJvbXB0Qm9keSA9PT0gbnVsbCB8fCBwcm9tcHRCb2R5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5wbHVnaW4ubG9nZ2VyLmVycm9yKFwiW09sbGFtYVNlcnZpY2VdIENvdWxkIG5vdCBnZW5lcmF0ZSBwcm9tcHQgYm9keSBmb3IgY2hhdC5cIiwgY2hhdC5tZXRhZGF0YSk7XG4gICAgICAgIHlpZWxkIHsgdHlwZTogJ2Vycm9yJywgZXJyb3I6IFwiQ291bGQgbm90IGdlbmVyYXRlIHByb21wdCBib2R5LlwiLCBkb25lOiB0cnVlIH07XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29uc3QgcmVxdWVzdEJvZHk6IGFueSA9IHtcbiAgICAgICAgbW9kZWw6IG1vZGVsTmFtZSxcbiAgICAgICAgcHJvbXB0OiBwcm9tcHRCb2R5LFxuICAgICAgICBzdHJlYW06IHRydWUsXG4gICAgICAgIHRlbXBlcmF0dXJlOiB0ZW1wZXJhdHVyZSxcbiAgICAgICAgb3B0aW9uczogeyBudW1fY3R4OiBjdXJyZW50U2V0dGluZ3MuY29udGV4dFdpbmRvdyB9LFxuICAgICAgICAuLi4oc3lzdGVtUHJvbXB0ICYmIHsgc3lzdGVtOiBzeXN0ZW1Qcm9tcHQgfSlcbiAgICAgIH07XG5cbiAgICAgIGlmICh0aGlzLnBsdWdpbi5hZ2VudE1hbmFnZXIgJiYgdGhpcy5wbHVnaW4uc2V0dGluZ3MuZW5hYmxlVG9vbFVzZSkge1xuICAgICAgICBjb25zdCBhZ2VudFRvb2xzOiBJVG9vbEZ1bmN0aW9uW10gPSB0aGlzLnBsdWdpbi5hZ2VudE1hbmFnZXIuZ2V0QWxsVG9vbERlZmluaXRpb25zKCk7XG4gICAgICAgIGlmIChhZ2VudFRvb2xzICYmIGFnZW50VG9vbHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIC8vINCf0LXRgNC10LLRltGA0LrQsCwg0YfQuCDQvNC+0LTQtdC70Ywg0LzQvtC20LUg0L/RltC00YLRgNC40LzRg9Cy0LDRgtC4INGW0L3RgdGC0YDRg9C80LXQvdGC0LggKNC00YPQttC1INC/0YDQuNCx0LvQuNC30L3QsClcbiAgICAgICAgICAvLyDQmtGA0LDRidC1INC80LDRgtC4INGB0L/QuNGB0L7QuiDQvNC+0LTQtdC70LXQuSwg0YnQviDQv9GW0LTRgtGA0LjQvNGD0Y7RgtGMINGW0L3RgdGC0YDRg9C80LXQvdGC0LgsINCw0LHQviDQv9C10YDQtdCy0ZbRgNGP0YLQuCDQvNC+0LbQu9C40LLQvtGB0YLRliDQvNC+0LTQtdC70ZYg0ZbQvdGI0LjQvCDRiNC70Y/RhdC+0LxcbiAgICAgICAgICBjb25zdCBtb2RlbERldGFpbHMgPSBhd2FpdCB0aGlzLmdldE1vZGVsRGV0YWlscyhtb2RlbE5hbWUpO1xuICAgICAgICAgIGNvbnN0IHNlZW1zVG9TdXBwb3J0VG9vbHMgPSBtb2RlbERldGFpbHM/LmRldGFpbHM/LmZhbWlseT8udG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhcImxsYW1hM1wiKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbERldGFpbHM/LmRldGFpbHM/LmZhbWlseT8udG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhcIm1pc3RyYWxcIikgfHwgLy8g0JTQvtC00LDQudGC0LUg0ZbQvdGI0ZYg0LLRltC00L7QvNGWINGB0ZbQvCfRl1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAobW9kZWxEZXRhaWxzPy5kZXRhaWxzPy5wYXJhbWV0ZXJfc2l6ZSAmJiBwYXJzZUZsb2F0KG1vZGVsRGV0YWlscy5kZXRhaWxzLnBhcmFtZXRlcl9zaXplLnJlcGxhY2UoJ0InLCcnKSkgPj0gNyk7XG5cblxuICAgICAgICAgIGlmIChzZWVtc1RvU3VwcG9ydFRvb2xzKSB7XG4gICAgICAgICAgICByZXF1ZXN0Qm9keS50b29scyA9IGFnZW50VG9vbHMubWFwKHRvb2wgPT4gKHsgdHlwZTogXCJmdW5jdGlvblwiLCBmdW5jdGlvbjogdG9vbCB9KSk7XG4gICAgICAgICAgICB0aGlzLnBsdWdpbi5sb2dnZXIuaW5mbyhgW09sbGFtYVNlcnZpY2VdIFRvb2xzIHByb3ZpZGVkIHRvIE9sbGFtYSBmb3IgbW9kZWwgJHttb2RlbE5hbWV9OmAsIGFnZW50VG9vbHMubWFwKHQgPT4gdC5uYW1lKSk7XG4gICAgICAgICAgICAvLyByZXF1ZXN0Qm9keS5mb3JtYXQgPSAnanNvbic7IC8vINCg0L7Qt9C60L7QvNC10L3RgtGD0LnRgtC1LCDRj9C60YnQviDQvNC+0LTQtdC70Ywg0YbRjNC+0LPQviDQstC40LzQsNCz0LDRlCDQtNC70Y8gdG9vbF9jYWxscy4g0J7QkdCV0KDQldCW0J3QniFcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5wbHVnaW4ubG9nZ2VyLmluZm8oYFtPbGxhbWFTZXJ2aWNlXSBNb2RlbCAke21vZGVsTmFtZX0gbWlnaHQgbm90IG5hdGl2ZWx5IHN1cHBvcnQgdG9vbCBjYWxsaW5nIChvciBjaGVjayBmYWlsZWQpLiBUb29scyBub3QgZXhwbGljaXRseSBzZW50IHZpYSAndG9vbHMnIHBhcmFtZXRlci4gUmVseWluZyBvbiBwcm9tcHQtYmFzZWQgZmFsbGJhY2sgaWYgaW1wbGVtZW50ZWQuYCk7XG4gICAgICAgICAgICAvLyDQotGD0YIg0LzQvtC20LUg0LHRg9GC0Lgg0LvQvtCz0ZbQutCwINC00LvRjyDQtNC+0LTQsNCy0LDQvdC90Y8g0ZbQvdGB0YLRgNGD0LrRhtGW0Lkg0LTQu9GPIGZhbGxiYWNrLdC80LXRhdCw0L3RltC30LzRgyDQsiBzeXN0ZW1Qcm9tcHQg0LDQsdC+IHByb21wdEJvZHksXG4gICAgICAgICAgICAvLyDRj9C60YnQviDQstC4INCy0LjRgNGW0YjQuNGC0LUg0LnQvtCz0L4g0YDQtdCw0LvRltC30YPQstCw0YLQuC5cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5wbHVnaW4ubG9nZ2VyLmRlYnVnKGBbT2xsYW1hU2VydmljZV0gU2VuZGluZyByZXF1ZXN0IHRvICR7dXJsfSBmb3IgbW9kZWwgJHttb2RlbE5hbWV9LiBTeXN0ZW0gcHJvbXB0IGxlbmd0aDogJHtzeXN0ZW1Qcm9tcHQ/Lmxlbmd0aCB8fCAwfSwgQm9keSBwcm9tcHQgbGVuZ3RoOiAke3Byb21wdEJvZHkubGVuZ3RofWApO1xuICAgICAgLy8gdGhpcy5wbHVnaW4ubG9nZ2VyLmRlYnVnKGBbT2xsYW1hU2VydmljZV0gUmVxdWVzdCBib2R5OiAke0pTT04uc3RyaW5naWZ5KHJlcXVlc3RCb2R5LCBudWxsLCAyKX1gKTtcblxuXG4gICAgICB0aGlzLmxvZ2dlci5kZWJ1ZyhgW09sbGFtYVNlcnZpY2VdW2lkOiR7cmVxdWVzdFRpbWVzdGFtcElkfV0gU2VuZGluZyByZXF1ZXN0IHRvICR7dXJsfSBmb3IgbW9kZWwgJHttb2RlbE5hbWV9LiBQcm9tcHQgbGVuZ3RoOiAke3Byb21wdEJvZHkubGVuZ3RofS4gU3lzdGVtIHBhcnQgbGVuZ3RoOiAke3N5c3RlbVByb21wdD8ubGVuZ3RoIHx8IDB9YCk7XG4gICAgICB0aGlzLmxvZ2dlci50cmFjZShgW09sbGFtYVNlcnZpY2VdW2lkOiR7cmVxdWVzdFRpbWVzdGFtcElkfV0gUmVxdWVzdCBib2R5OmAsIHJlcXVlc3RCb2R5KTtcblxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh1cmwsIHtcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHJlcXVlc3RCb2R5KSxcbiAgICAgICAgc2lnbmFsOiBzaWduYWxcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICAgIGxldCBlcnJvclRleHQgPSBgT2xsYW1hIEFQSSBlcnJvciEgU3RhdHVzOiAke3Jlc3BvbnNlLnN0YXR1c31gO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnN0IGVycm9ySnNvbiA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgICAgICBlcnJvclRleHQgKz0gYDogJHtlcnJvckpzb24/LmVycm9yIHx8IHJlc3BvbnNlLnN0YXR1c1RleHQgfHwgJ05vIGRldGFpbHMnfWA7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBlcnJvclRleHQgKz0gYDogJHtyZXNwb25zZS5zdGF0dXNUZXh0IHx8ICdDb3VsZCBub3QgcGFyc2UgZXJyb3IgZGV0YWlscyd9YDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnBsdWdpbi5sb2dnZXIuZXJyb3IoYFtPbGxhbWFTZXJ2aWNlXSBBUEkgRXJyb3I6ICR7ZXJyb3JUZXh0fWAsIHJlcXVlc3RCb2R5KTtcbiAgICAgICAgdGhpcy5lbWl0KCdjb25uZWN0aW9uLWVycm9yJywgbmV3IEVycm9yKGVycm9yVGV4dCkpO1xuICAgICAgICB5aWVsZCB7IHR5cGU6ICdlcnJvcicsIGVycm9yOiBlcnJvclRleHQsIGRvbmU6IHRydWUgfTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXJlc3BvbnNlLmJvZHkpIHtcbiAgICAgICAgdGhpcy5wbHVnaW4ubG9nZ2VyLmVycm9yKFwiW09sbGFtYVNlcnZpY2VdIFJlc3BvbnNlIGJvZHkgaXMgbnVsbC5cIik7XG4gICAgICAgIHlpZWxkIHsgdHlwZTogJ2Vycm9yJywgZXJyb3I6IFwiUmVzcG9uc2UgYm9keSBpcyBudWxsLlwiLCBkb25lOiB0cnVlIH07XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29uc3QgcmVhZGVyID0gcmVzcG9uc2UuYm9keS5nZXRSZWFkZXIoKTtcbiAgICAgIGNvbnN0IGRlY29kZXIgPSBuZXcgVGV4dERlY29kZXIoKTtcbiAgICAgIGxldCBidWZmZXIgPSAnJztcbiAgICAgIGxldCByYXdSZXNwb25zZUFjY3VtdWxhdG9yID0gXCJcIjsgXG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICBjb25zdCB7IGRvbmUsIHZhbHVlIH0gPSBhd2FpdCByZWFkZXIucmVhZCgpO1xuXG4gICAgICAgIGlmIChzaWduYWw/LmFib3J0ZWQpIHtcbiAgICAgICAgICB0aGlzLnBsdWdpbi5sb2dnZXIuaW5mbyhcIltPbGxhbWFTZXJ2aWNlXSBTdHJlYW0gZ2VuZXJhdGlvbiBhYm9ydGVkIGJ5IHVzZXIgc2lnbmFsLlwiKTtcbiAgICAgICAgICByZWFkZXIuY2FuY2VsKFwiQWJvcnRlZCBieSB1c2VyXCIpO1xuICAgICAgICAgIHlpZWxkIHsgdHlwZTogJ2Vycm9yJywgZXJyb3I6IFwiR2VuZXJhdGlvbiBhYm9ydGVkIGJ5IHVzZXIuXCIsIGRvbmU6IHRydWUgfTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZGVjb2RlZENodW5rID0gZGVjb2Rlci5kZWNvZGUodmFsdWUsIHsgc3RyZWFtOiAhZG9uZSB9KTtcbiAgICAgICAgLy8gLS0tINCb0J7Qk9Cj0JLQkNCd0J3QryDQodCY0KDQntCT0J4g0J/QntCi0J7QmtCjIC0tLVxuICAgICAgICByYXdSZXNwb25zZUFjY3VtdWxhdG9yICs9IGRlY29kZWRDaHVuaztcblxuICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgIHRoaXMucGx1Z2luLmxvZ2dlci5pbmZvKFwiW09sbGFtYVNlcnZpY2VdIFN0cmVhbSByZWFkZXIgbWFya2VkIGFzIGRvbmUuXCIpO1xuICAgICAgICAgIHRoaXMubG9nZ2VyLmRlYnVnKGBbT2xsYW1hU2VydmljZV1baWQ6JHtyZXF1ZXN0VGltZXN0YW1wSWR9XSBTdHJlYW0gcmVhZGVyICdkb25lJy4gRmluYWwgcmF3IGJ1ZmZlcjogXCIke2J1ZmZlcn0ke2RlY29kZWRDaHVua31cImApO1xuICAgICAgICAgIC8vIC0tLSDQm9Ce0JPQo9CS0JDQndCd0K8g0J/QntCS0J3QntCHINCh0JjQoNCe0Icg0JLQhtCU0J/QntCS0IbQlNCGIC0tLVxuICAgICAgICAgIHRoaXMubG9nZ2VyLmRlYnVnKGBbT2xsYW1hU2VydmljZV1baWQ6JHtyZXF1ZXN0VGltZXN0YW1wSWR9XSA9PT0gUkFXIEZVTEwgU1RSRUFNIFJFU1BPTlNFIChmcm9tIE9sbGFtYVNlcnZpY2UpIFNUQVJUID09PWApO1xuICAgICAgICAgIHRoaXMubG9nZ2VyLmRlYnVnKHJhd1Jlc3BvbnNlQWNjdW11bGF0b3IpO1xuICAgICAgICAgIHRoaXMubG9nZ2VyLmRlYnVnKGBbT2xsYW1hU2VydmljZV1baWQ6JHtyZXF1ZXN0VGltZXN0YW1wSWR9XSA9PT0gUkFXIEZVTEwgU1RSRUFNIFJFU1BPTlNFIChmcm9tIE9sbGFtYVNlcnZpY2UpIEVORCA9PT0gTGVuZ3RoOiAke3Jhd1Jlc3BvbnNlQWNjdW11bGF0b3IubGVuZ3RofWApO1xuICAgICAgICAgIGJ1ZmZlciArPSBkZWNvZGVkQ2h1bms7IC8vQ0hFQ0tJVFxuICAgICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgICAvLyDQntCx0YDQvtCx0LrQsCDQt9Cw0LvQuNGI0LrRgyDQsdGD0YTQtdGA0LAsINGP0LrRidC+INCy0ZbQvSDQvdC1INC/0L7RgNC+0LbQvdGW0Lkg0ZYg0ZQg0LLQsNC70ZbQtNC90LjQvCBKU09OXG4gICAgICAgICAgaWYgKGJ1ZmZlci50cmltKCkpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QganNvbkNodW5rID0gSlNPTi5wYXJzZShidWZmZXIudHJpbSgpKTtcbiAgICAgICAgICAgICAgICAvLyDQptC1INC80LDQu9C+0LnQvNC+0LLRltGA0L3Qviwg0LDQu9C1INGP0LrRidC+INC+0YHRgtCw0L3QvdGW0Lkg0YfQsNC90Log0LHRg9CyINC90LUgYGRvbmU6dHJ1ZWBcbiAgICAgICAgICAgICAgICBpZiAoanNvbkNodW5rLm1lc3NhZ2UgJiYganNvbkNodW5rLm1lc3NhZ2UudG9vbF9jYWxscyAmJiBqc29uQ2h1bmsubWVzc2FnZS50b29sX2NhbGxzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgeWllbGQgeyB0eXBlOiAndG9vbF9jYWxscycsIGNhbGxzOiBqc29uQ2h1bmsubWVzc2FnZS50b29sX2NhbGxzLCBhc3Npc3RhbnRfbWVzc2FnZV93aXRoX2NhbGxzOiBqc29uQ2h1bmsubWVzc2FnZSwgbW9kZWw6IGpzb25DaHVuay5tb2RlbCwgY3JlYXRlZF9hdDoganNvbkNodW5rLmNyZWF0ZWRfYXQgfTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBqc29uQ2h1bmsucmVzcG9uc2UgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgIHlpZWxkIHsgdHlwZTogJ2NvbnRlbnQnLCByZXNwb25zZToganNvbkNodW5rLnJlc3BvbnNlLCBkb25lOiBqc29uQ2h1bmsuZG9uZSB8fCBmYWxzZSwgbW9kZWw6IGpzb25DaHVuay5tb2RlbCwgY3JlYXRlZF9hdDoganNvbkNodW5rLmNyZWF0ZWRfYXQgfTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGpzb25DaHVuay5lcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgeWllbGQgeyB0eXBlOiAnZXJyb3InLCBlcnJvcjoganNvbkNodW5rLmVycm9yLCBkb25lOiB0cnVlIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vINCv0LrRidC+INGC0YPRgiBgZG9uZTp0cnVlYCwg0YLQviDRhtC1INCy0LbQtSDQvNCw0LvQviDQsdGD0YLQuCDQvtCx0YDQvtCx0LvQtdC90L4g0LIg0YbQuNC60LvRliDQvdC40LbRh9C1XG4gICAgICAgICAgICB9IGNhdGNoIChlOiBhbnkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5sb2dnZXIud2FybihgW09sbGFtYVNlcnZpY2VdIEZhaWxlZCB0byBwYXJzZSBmaW5hbCBidWZmZXIgY29udGVudDogXCIke2J1ZmZlci50cmltKCl9XCIuIEVycm9yOiAke2UubWVzc2FnZX1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7IC8vINCS0LjRhdGW0LQg0Lcg0YbQuNC60LvRgywg0LrQvtC70Lgg0L/QvtGC0ZbQuiDQt9Cw0LLQtdGA0YjQtdC90L5cbiAgICAgICAgfVxuXG4gICAgICAgIGJ1ZmZlciArPSBkZWNvZGVyLmRlY29kZSh2YWx1ZSwgeyBzdHJlYW06IHRydWUgfSk7XG4gICAgICAgIGxldCBlb2xJbmRleDtcblxuICAgICAgICB3aGlsZSAoKGVvbEluZGV4ID0gYnVmZmVyLmluZGV4T2YoJ1xcbicpKSA+PSAwKSB7XG4gICAgICAgICAgY29uc3QgbGluZSA9IGJ1ZmZlci5zdWJzdHJpbmcoMCwgZW9sSW5kZXgpLnRyaW0oKTtcbiAgICAgICAgICBidWZmZXIgPSBidWZmZXIuc3Vic3RyaW5nKGVvbEluZGV4ICsgMSk7XG5cbiAgICAgICAgICBpZiAobGluZSA9PT0gJycpIGNvbnRpbnVlO1xuXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGpzb25DaHVuayA9IEpTT04ucGFyc2UobGluZSk7XG4gICAgICAgICAgICAvLyB0aGlzLnBsdWdpbi5sb2dnZXIuZGVidWcoJ1tPbGxhbWFTZXJ2aWNlXSBSYXcgY2h1bmsgcmVjZWl2ZWQ6JywgSlNPTi5zdHJpbmdpZnkoanNvbkNodW5rKSk7XG5cbiAgICAgICAgICAgIGlmIChqc29uQ2h1bmsuZXJyb3IpIHtcbiAgICAgICAgICAgICAgdGhpcy5wbHVnaW4ubG9nZ2VyLmVycm9yKGBbT2xsYW1hU2VydmljZV0gRXJyb3IgY2h1bmsgZnJvbSBPbGxhbWE6ICR7anNvbkNodW5rLmVycm9yfWApO1xuICAgICAgICAgICAgICB5aWVsZCB7IHR5cGU6ICdlcnJvcicsIGVycm9yOiBqc29uQ2h1bmsuZXJyb3IsIGRvbmU6IHRydWUgfTtcbiAgICAgICAgICAgICAgcmVhZGVyLmNhbmNlbChcIkVycm9yIHJlY2VpdmVkIGZyb20gT2xsYW1hIHN0cmVhbVwiKTtcbiAgICAgICAgICAgICAgcmV0dXJuOyAvLyDQktCw0LbQu9C40LLQviDQstC40LnRgtC4LCDRj9C60YnQviBPbGxhbWEg0L/QvtCy0LXRgNC90YPQu9CwINC/0L7QvNC40LvQutGDXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vINCf0YDRltC+0YDQuNGC0LXRgiDQtNC70Y8gdG9vbF9jYWxsc1xuICAgICAgICAgICAgaWYgKGpzb25DaHVuay5tZXNzYWdlICYmIGpzb25DaHVuay5tZXNzYWdlLnRvb2xfY2FsbHMgJiYganNvbkNodW5rLm1lc3NhZ2UudG9vbF9jYWxscy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgIHRoaXMucGx1Z2luLmxvZ2dlci5pbmZvKCdbT2xsYW1hU2VydmljZV0gWWllbGRpbmcgdG9vbF9jYWxscyBjaHVuazonLCBqc29uQ2h1bmsubWVzc2FnZS50b29sX2NhbGxzKTtcbiAgICAgICAgICAgICAgeWllbGQge1xuICAgICAgICAgICAgICAgIHR5cGU6ICd0b29sX2NhbGxzJyxcbiAgICAgICAgICAgICAgICBjYWxsczoganNvbkNodW5rLm1lc3NhZ2UudG9vbF9jYWxscyxcbiAgICAgICAgICAgICAgICBhc3Npc3RhbnRfbWVzc2FnZV93aXRoX2NhbGxzOiBqc29uQ2h1bmsubWVzc2FnZSBhcyBBc3Npc3RhbnRNZXNzYWdlLFxuICAgICAgICAgICAgICAgIG1vZGVsOiBqc29uQ2h1bmsubW9kZWwsXG4gICAgICAgICAgICAgICAgY3JlYXRlZF9hdDoganNvbkNodW5rLmNyZWF0ZWRfYXRcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgLy8g0J/RltGB0LvRjyB0b29sX2NhbGxzINC80L7QtNC10LvRjCDQt9Cw0LfQstC40YfQsNC5INGH0LXQutCw0ZQg0L3QsCDQstGW0LTQv9C+0LLRltC00YwsINGC0L7QvNGDIGRvbmUg0LzQvtC20LUg0LHRg9GC0LggZmFsc2UuXG4gICAgICAgICAgICAgIC8vINCv0LrRidC+IGRvbmUg0YLRg9GCIHRydWUsINGG0LUg0L7Qt9C90LDRh9Cw0ZQsINGJ0L4g0LzQvtC00LXQu9GMINC90LUg0YfQtdC60LDRlCDRliDQt9Cw0LLQtdGA0YjRg9GUINGF0ZbQtC5cbiAgICAgICAgICAgICAgaWYgKGpzb25DaHVuay5kb25lID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4ubG9nZ2VyLmluZm8oJ1tPbGxhbWFTZXJ2aWNlXSBTdHJlYW0gZmluaXNoZWQgKGRvbmU6dHJ1ZSByZWNlaXZlZCB3aXRoIHRvb2xfY2FsbHMgY2h1bmspLicpO1xuICAgICAgICAgICAgICAgIHlpZWxkIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2RvbmUnLFxuICAgICAgICAgICAgICAgICAgICBtb2RlbDoganNvbkNodW5rLm1vZGVsLFxuICAgICAgICAgICAgICAgICAgICBjcmVhdGVkX2F0OiBqc29uQ2h1bmsuY3JlYXRlZF9hdCxcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dDoganNvbkNodW5rLmNvbnRleHQsIC8vINGC0LAg0ZbQvdGI0ZYg0LzQtdGC0YDQuNC60LgsINGP0LrRidC+INGUXG4gICAgICAgICAgICAgICAgICAgIHRvdGFsX2R1cmF0aW9uOiBqc29uQ2h1bmsudG90YWxfZHVyYXRpb24sXG4gICAgICAgICAgICAgICAgICAgIGxvYWRfZHVyYXRpb246IGpzb25DaHVuay5sb2FkX2R1cmF0aW9uLFxuICAgICAgICAgICAgICAgICAgICBwcm9tcHRfZXZhbF9jb3VudDoganNvbkNodW5rLnByb21wdF9ldmFsX2NvdW50LFxuICAgICAgICAgICAgICAgICAgICBwcm9tcHRfZXZhbF9kdXJhdGlvbjoganNvbkNodW5rLnByb21wdF9ldmFsX2R1cmF0aW9uLFxuICAgICAgICAgICAgICAgICAgICBldmFsX2NvdW50OiBqc29uQ2h1bmsuZXZhbF9jb3VudCxcbiAgICAgICAgICAgICAgICAgICAgZXZhbF9kdXJhdGlvbjoganNvbkNodW5rLmV2YWxfZHVyYXRpb25cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmRlYnVnKGBbT2xsYW1hU2VydmljZV1baWQ6JHtyZXF1ZXN0VGltZXN0YW1wSWR9XSA9PT0gUkFXIEZVTEwgU1RSRUFNIFJFU1BPTlNFIChmcm9tIE9sbGFtYVNlcnZpY2UgYWZ0ZXIgZmluYWwgZG9uZSkgU1RBUlQgPT09YCk7XG4gICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmRlYnVnKHJhd1Jlc3BvbnNlQWNjdW11bGF0b3IpO1xuICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5kZWJ1ZyhgW09sbGFtYVNlcnZpY2VdW2lkOiR7cmVxdWVzdFRpbWVzdGFtcElkfV0gPT09IFJBVyBGVUxMIFNUUkVBTSBSRVNQT05TRSAoZnJvbSBPbGxhbWFTZXJ2aWNlIGFmdGVyIGZpbmFsIGRvbmUpIEVORCA9PT0gTGVuZ3RoOiAke3Jhd1Jlc3BvbnNlQWNjdW11bGF0b3IubGVuZ3RofWApO1xuICAgICAgICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBqc29uQ2h1bmsucmVzcG9uc2UgPT09ICdzdHJpbmcnKSB7IC8vINCi0LXQutGB0YLQvtCy0LjQuSDQutC+0L3RgtC10L3RglxuICAgICAgICAgICAgICAvLyB0aGlzLnBsdWdpbi5sb2dnZXIuZGVidWcoJ1tPbGxhbWFTZXJ2aWNlXSBZaWVsZGluZyBjb250ZW50IGNodW5rLicpO1xuICAgICAgICAgICAgICB5aWVsZCB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ2NvbnRlbnQnLFxuICAgICAgICAgICAgICAgIHJlc3BvbnNlOiBqc29uQ2h1bmsucmVzcG9uc2UsXG4gICAgICAgICAgICAgICAgZG9uZToganNvbkNodW5rLmRvbmUgfHwgZmFsc2UsIC8vIGRvbmUg0LzQvtC20LUg0LHRg9GC0LggdHJ1ZSDRgtGD0YIsINGP0LrRidC+INGG0LUg0L7RgdGC0LDQvdC90ZbQuSDRgtC10LrRgdGC0L7QstC40Lkg0YfQsNC90LpcbiAgICAgICAgICAgICAgICBtb2RlbDoganNvbkNodW5rLm1vZGVsLFxuICAgICAgICAgICAgICAgIGNyZWF0ZWRfYXQ6IGpzb25DaHVuay5jcmVhdGVkX2F0XG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIGlmIChqc29uQ2h1bmsuZG9uZSA9PT0gdHJ1ZSkgeyAvLyDQr9C60YnQviDRhtC1INC+0YHRgtCw0L3QvdGW0Lkg0YLQtdC60YHRgtC+0LLQuNC5INGH0LDQvdC6INGWIGRvbmU9dHJ1ZVxuICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLmxvZ2dlci5pbmZvKCdbT2xsYW1hU2VydmljZV0gU3RyZWFtIGZpbmlzaGVkIChkb25lOnRydWUgcmVjZWl2ZWQgd2l0aCBjb250ZW50IGNodW5rKS4nKTtcbiAgICAgICAgICAgICAgICAgLy8g0J3QtSDQstGW0LTQv9GA0LDQstC70Y/RlNC80L4g0L7QutGA0LXQvNC40LkgJ2RvbmUnINGH0LDQvdC6LCDQsdC+INGW0L3RhNC+0YDQvNCw0YbRltGPINCy0LbQtSDQsiDRhtGM0L7QvNGDLlxuICAgICAgICAgICAgICAgICAvLyDQntC00L3QsNC6LCDRhNGW0L3QsNC70YzQvdC40LkgJ2RvbmUnINGH0LDQvdC6INCy0ZbQtCBPbGxhbWEg0LfQsNC30LLQuNGH0LDQuSDQvNGW0YHRgtC40YLRjCDQsdGW0LvRjNGI0LUg0LzQtdGC0YDQuNC6LlxuICAgICAgICAgICAgICAgICAvLyDQr9C60YnQviDRhtC1INC90LUg0YTRltC90LDQu9GM0L3QuNC5INGH0LDQvdC6INC3INC80LXRgtGA0LjQutCw0LzQuCwg0YLQvtC00ZYg0L7Rh9GW0LrRg9GU0LzQviDQudC+0LPQvi5cbiAgICAgICAgICAgICAgICAgLy8g0K/QutGJ0L4gYGpzb25DaHVua2Ag0LLQttC1INC80ZbRgdGC0LjRgtGMINCy0YHRliDQvNC10YLRgNC40LrQuCwg0YLQviDQvNC+0LbQvdCwINC/0L7QstC10YDQvdGD0YLQuCDQudC+0LPQviDRj9C6IGBkb25lYFxuICAgICAgICAgICAgICAgICAvLyDQkNC70LUg0LfQsNC30LLQuNGH0LDQuSDRlCDQvtC60YDQtdC80LjQuSDRhNGW0L3QsNC70YzQvdC40Lkg0YfQsNC90Log0LvQuNGI0LUg0LcgYGRvbmU6dHJ1ZWAg0YLQsCDQvNC10YLRgNC40LrQsNC80LguXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoanNvbkNodW5rLmRvbmUgPT09IHRydWUpIHsgLy8g0KTRltC90LDQu9GM0L3QuNC5INGH0LDQvdC6IFwiZG9uZVwiINC3INC80LXRgtGA0LjQutCw0LzQuFxuICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5sb2dnZXIuaW5mbygnW09sbGFtYVNlcnZpY2VdIFN0cmVhbSBmaW5pc2hlZCAoZmluYWwgZG9uZTp0cnVlIGNodW5rIHdpdGggbWV0cmljcykuJyk7XG4gICAgICAgICAgICAgIHRoaXMucGx1Z2luLmxvZ2dlci5lcnJvcignW09sbGFtYVNlcnZpY2VdIEZpbmFsIGNodW5rIHdpdGggbWV0cmljczonLCBqc29uQ2h1bmspO1xuICAgICAgICAgICAgICB5aWVsZCB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ2RvbmUnLFxuICAgICAgICAgICAgICAgIG1vZGVsOiBqc29uQ2h1bmsubW9kZWwsXG4gICAgICAgICAgICAgICAgY3JlYXRlZF9hdDoganNvbkNodW5rLmNyZWF0ZWRfYXQsXG4gICAgICAgICAgICAgICAgY29udGV4dDoganNvbkNodW5rLmNvbnRleHQsXG4gICAgICAgICAgICAgICAgdG90YWxfZHVyYXRpb246IGpzb25DaHVuay50b3RhbF9kdXJhdGlvbixcbiAgICAgICAgICAgICAgICBsb2FkX2R1cmF0aW9uOiBqc29uQ2h1bmsubG9hZF9kdXJhdGlvbixcbiAgICAgICAgICAgICAgICBwcm9tcHRfZXZhbF9jb3VudDoganNvbkNodW5rLnByb21wdF9ldmFsX2NvdW50LFxuICAgICAgICAgICAgICAgIHByb21wdF9ldmFsX2R1cmF0aW9uOiBqc29uQ2h1bmsucHJvbXB0X2V2YWxfZHVyYXRpb24sXG4gICAgICAgICAgICAgICAgZXZhbF9jb3VudDoganNvbkNodW5rLmV2YWxfY291bnQsXG4gICAgICAgICAgICAgICAgZXZhbF9kdXJhdGlvbjoganNvbkNodW5rLmV2YWxfZHVyYXRpb25cbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgcmV0dXJuOyAvLyDQl9Cw0LLQtdGA0YjRg9GU0LzQviDQs9C10L3QtdGA0LDRgtC+0YBcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoanNvbkNodW5rLm1lc3NhZ2UgJiYgKGpzb25DaHVuay5tZXNzYWdlLmNvbnRlbnQgPT09IG51bGwgfHwganNvbkNodW5rLm1lc3NhZ2UuY29udGVudCA9PT0gXCJcIikgJiYgIWpzb25DaHVuay5tZXNzYWdlLnRvb2xfY2FsbHMpIHtcbiAgICAgICAgICAgICAgICAvLyDQptC1INC80L7QttC1INCx0YPRgtC4INC/0L7RgNC+0LbQvdGUINC/0L7QstGW0LTQvtC80LvQtdC90L3RjyDQsNGB0LjRgdGC0LXQvdGC0LAgKNC90LDQv9GALiwg0L/QtdGA0LXQtCB0b29sX2NhbGxzINCw0LHQviDQv9GA0Lgg0LfQsNCy0LXRgNGI0LXQvdC90ZYpXG4gICAgICAgICAgICAgICAgLy8g0K/QutGJ0L4gZG9uZSBmYWxzZSwg0ZbQs9C90L7RgNGD0ZTQvNC+INC50L7Qs9C+LCDRh9C10LrQsNGU0LzQviDQvdCwINC60L7RgNC40YHQvdGWINC00LDQvdGWINCw0LHQviBkb25lOnRydWUuXG4gICAgICAgICAgICAgICAgLy8gdGhpcy5wbHVnaW4ubG9nZ2VyLmRlYnVnKCdbT2xsYW1hU2VydmljZV0gUmVjZWl2ZWQgZW1wdHkgYXNzaXN0YW50IG1lc3NhZ2Ugc2hlbGwsIGlnbm9yaW5nLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gZWxzZSB7XG4gICAgICAgICAgICAvLyAgIHRoaXMucGx1Z2luLmxvZ2dlci53YXJuKCdbT2xsYW1hU2VydmljZV0gVW5oYW5kbGVkIG9yIHVuZXhwZWN0ZWQgY2h1bmsgc3RydWN0dXJlOicsIGpzb25DaHVuayk7XG4gICAgICAgICAgICAvLyB9XG4gICAgICAgICAgfSBjYXRjaCAoZTogYW55KSB7XG4gICAgICAgICAgICB0aGlzLnBsdWdpbi5sb2dnZXIud2FybihgW09sbGFtYVNlcnZpY2VdIEZhaWxlZCB0byBwYXJzZSBKU09OIGNodW5rOiBcIiR7bGluZX1cIi4gRXJyb3I6ICR7ZS5tZXNzYWdlfS4gU2tpcHBpbmcgY2h1bmsuYCk7XG4gICAgICAgICAgICAvLyDQndC1INC60LjQtNCw0ZTQvNC+INC/0L7QvNC40LvQutGDLCDRidC+0LEg0L3QtSDQv9C10YDQtdGA0LLQsNGC0Lgg0LLQtdGB0Ywg0L/QvtGC0ZbQuiDRh9C10YDQtdC3INC+0LTQuNC9INC/0L7RiNC60L7QtNC20LXQvdC40Lkg0YfQsNC90LosXG4gICAgICAgICAgICAvLyDQsNC70LUg0LvQvtCz0YPRlNC80L4g0ZfRly5cbiAgICAgICAgICB9XG4gICAgICAgIH0gLy8g0LrRltC90LXRhtGMIHdoaWxlICgoZW9sSW5kZXggPSBidWZmZXIuaW5kZXhPZignXFxuJykpID49IDApXG4gICAgICB9IC8vINC60ZbQvdC10YbRjCB3aGlsZSAodHJ1ZSlcblxuICAgIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICAgIGlmIChlcnJvci5uYW1lID09PSAnQWJvcnRFcnJvcicpIHtcbiAgICAgICAgdGhpcy5wbHVnaW4ubG9nZ2VyLmluZm8oXCJbT2xsYW1hU2VydmljZV0gU3RyZWFtIGdlbmVyYXRpb24gYWJvcnRlZCBieSB1c2VyIChjYXVnaHQgQWJvcnRFcnJvcikuXCIpO1xuICAgICAgICB5aWVsZCB7IHR5cGU6ICdlcnJvcicsIGVycm9yOiBcIkdlbmVyYXRpb24gYWJvcnRlZCBieSB1c2VyLlwiLCBkb25lOiB0cnVlIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgZXJyb3JNZXNzYWdlID0gZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiBcIlVua25vd24gZXJyb3IgZ2VuZXJhdGluZyBzdHJlYW0uXCI7XG4gICAgICAgIGlmIChlcnJvck1lc3NhZ2UuaW5jbHVkZXMoXCJjb25uZWN0XCIpIHx8IGVycm9yTWVzc2FnZS5pbmNsdWRlcyhcImZldGNoXCIpIHx8IGVycm9yTWVzc2FnZS5pbmNsdWRlcyhcIk5ldHdvcmtFcnJvclwiKSB8fCBlcnJvck1lc3NhZ2UuaW5jbHVkZXMoJ0ZhaWxlZCB0byBmZXRjaCcpKSB7XG4gICAgICAgICAgZXJyb3JNZXNzYWdlID0gYENvbm5lY3Rpb24gRXJyb3I6IEZhaWxlZCB0byByZWFjaCBPbGxhbWEgYXQgJHt0aGlzLnBsdWdpbi5zZXR0aW5ncy5vbGxhbWFTZXJ2ZXJVcmx9LiBJcyBpdCBydW5uaW5nP2A7XG4gICAgICAgICAgdGhpcy5lbWl0KCdjb25uZWN0aW9uLWVycm9yJywgbmV3IEVycm9yKGVycm9yTWVzc2FnZSkpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucGx1Z2luLmxvZ2dlci5lcnJvcihgW09sbGFtYVNlcnZpY2VdIEVycm9yIGR1cmluZyBzdHJlYW0gZ2VuZXJhdGlvbjogJHtlcnJvck1lc3NhZ2V9YCwgZXJyb3IpO1xuICAgICAgICB5aWVsZCB7IHR5cGU6ICdlcnJvcicsIGVycm9yOiBlcnJvck1lc3NhZ2UsIGRvbmU6IHRydWUgfTtcbiAgICAgIH1cbiAgICB9IGZpbmFsbHkge1xuICAgICAgICB0aGlzLnBsdWdpbi5sb2dnZXIuaW5mbyhcIltPbGxhbWFTZXJ2aWNlXSBnZW5lcmF0ZUNoYXRSZXNwb25zZVN0cmVhbSBmaW5pc2hlZCBvciB0ZXJtaW5hdGVkLlwiKTtcbiAgICB9XG4gIH1cblxuICAvLyAuLi4gKNGW0L3RiNGWINCy0LDRiNGWINC80LXRgtC+0LTQuDogZ2VuZXJhdGVSYXcsIGdlbmVyYXRlRW1iZWRkaW5ncywgZ2V0TW9kZWxzLCBnZXRNb2RlbERldGFpbHMpIC4uLlxuICAvLyDQn9C10YDQtdC60L7QvdCw0LnRgtC10YHRjywg0YnQviDQstC+0L3QuCDQsNC00LDQv9GC0L7QstCw0L3RliDQtNC70Y8g0LLQuNC60L7RgNC40YHRgtCw0L3QvdGPIHRoaXMucGx1Z2luLmxvZ2dlciDQt9Cw0LzRltGB0YLRjCBjb25zb2xlLmVycm9yL2xvZ1xuICAvLyDRliB0aGlzLmVtaXQoJ2Nvbm5lY3Rpb24tZXJyb3InLCAuLi4pINC00LvRjyDQv9C+0LzQuNC70L7QuiDQtyfRlNC00L3QsNC90L3Rjy5cblxuICBhc3luYyBnZW5lcmF0ZVJhdyhyZXF1ZXN0Qm9keTogYW55KTogUHJvbWlzZTxPbGxhbWFHZW5lcmF0ZVJlc3BvbnNlPiB7XG4gICAgaWYgKCFyZXF1ZXN0Qm9keS5tb2RlbCB8fCAhcmVxdWVzdEJvZHkucHJvbXB0KSB7XG4gICAgICB0aGlzLnBsdWdpbi5sb2dnZXIuZXJyb3IoXCJbT2xsYW1hU2VydmljZV0gZ2VuZXJhdGVSYXcgY2FsbGVkIHdpdGhvdXQgJ21vZGVsJyBvciAncHJvbXB0Jy5cIik7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJnZW5lcmF0ZVJhdyByZXF1aXJlcyAnbW9kZWwnIGFuZCAncHJvbXB0JyBpbiByZXF1ZXN0Qm9keVwiKTtcbiAgICB9XG4gICAgcmVxdWVzdEJvZHkuc3RyZWFtID0gZmFsc2U7XG4gICAgaWYgKCFyZXF1ZXN0Qm9keS5zeXN0ZW0pIHtcbiAgICAgIGRlbGV0ZSByZXF1ZXN0Qm9keS5zeXN0ZW07XG4gICAgfVxuXG4gICAgY29uc3QgdXJsID0gYCR7dGhpcy5wbHVnaW4uc2V0dGluZ3Mub2xsYW1hU2VydmVyVXJsfS9hcGkvZ2VuZXJhdGVgO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicgfTtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh1cmwsIHtcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHJlcXVlc3RCb2R5KVxuICAgICAgfSk7XG5cbiAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgICAgbGV0IGVycm9yVGV4dCA9IGBPbGxhbWEgQVBJIGVycm9yIChnZW5lcmF0ZVJhdykhIFN0YXR1czogJHtyZXNwb25zZS5zdGF0dXN9YDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zdCBlcnJvckpzb24gPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICAgICAgZXJyb3JUZXh0ICs9IGA6ICR7ZXJyb3JKc29uPy5lcnJvciB8fCByZXNwb25zZS5zdGF0dXNUZXh0IHx8ICdObyBkZXRhaWxzJ31gO1xuICAgICAgICB9IGNhdGNoIChlKSB7IGVycm9yVGV4dCArPSBgOiAke3Jlc3BvbnNlLnN0YXR1c1RleHQgfHwgJ0NvdWxkIG5vdCBwYXJzZSBlcnJvciBkZXRhaWxzJ31gOyB9XG4gICAgICAgIHRoaXMucGx1Z2luLmxvZ2dlci5lcnJvcihgW09sbGFtYVNlcnZpY2VdIEFQSSBFcnJvciAoZ2VuZXJhdGVSYXcpOiAke2Vycm9yVGV4dH1gLCByZXF1ZXN0Qm9keSk7XG4gICAgICAgIHRoaXMuZW1pdCgnY29ubmVjdGlvbi1lcnJvcicsIG5ldyBFcnJvcihlcnJvclRleHQpKTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yVGV4dCk7XG4gICAgICB9XG4gICAgICBpZiAoIXJlc3BvbnNlLmJvZHkpIHtcbiAgICAgICAgdGhpcy5wbHVnaW4ubG9nZ2VyLmVycm9yKFwiW09sbGFtYVNlcnZpY2VdIFJlc3BvbnNlIGJvZHkgaXMgbnVsbCAoZ2VuZXJhdGVSYXcpLlwiKTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUmVzcG9uc2UgYm9keSBpcyBudWxsIChnZW5lcmF0ZVJhdylcIik7XG4gICAgICB9XG4gICAgICByZXR1cm4gYXdhaXQgcmVzcG9uc2UuanNvbigpIGFzIE9sbGFtYUdlbmVyYXRlUmVzcG9uc2U7XG4gICAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgICAgY29uc3QgY29ubmVjdGlvbkVycm9yTXNnID0gYEZhaWxlZCB0byBjb25uZWN0L2NvbW11bmljYXRlIHdpdGggT2xsYW1hIHNlcnZlciBhdCAke3RoaXMucGx1Z2luLnNldHRpbmdzLm9sbGFtYVNlcnZlclVybH0uIElzIGl0IHJ1bm5pbmc/IChFbmRwb2ludDogL2FwaS9nZW5lcmF0ZSwgbm9uLXN0cmVhbWVkKWA7XG4gICAgICBpZiAoIWVycm9yLm1lc3NhZ2U/LmluY2x1ZGVzKCdPbGxhbWEgQVBJIGVycm9yJykpIHtcbiAgICAgICAgdGhpcy5wbHVnaW4ubG9nZ2VyLmVycm9yKGBbT2xsYW1hU2VydmljZV0gQ29ubmVjdGlvbi9GZXRjaCBFcnJvciAoZ2VuZXJhdGVSYXcpOiAke2Nvbm5lY3Rpb25FcnJvck1zZ31gLCBlcnJvcik7XG4gICAgICAgIHRoaXMuZW1pdCgnY29ubmVjdGlvbi1lcnJvcicsIG5ldyBFcnJvcihjb25uZWN0aW9uRXJyb3JNc2cpKTtcbiAgICAgIH1cbiAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvci5tZXNzYWdlIHx8IGNvbm5lY3Rpb25FcnJvck1zZyk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZ2VuZXJhdGVFbWJlZGRpbmdzKHByb21wdHM6IHN0cmluZ1tdLCBtb2RlbDogc3RyaW5nKTogUHJvbWlzZTxudW1iZXJbXVtdIHwgbnVsbD4ge1xuICAgIGlmICghcHJvbXB0cyB8fCBwcm9tcHRzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIFtdO1xuICAgIGNvbnN0IGVuZHBvaW50ID0gJy9hcGkvZW1iZWRkaW5ncyc7XG4gICAgY29uc3QgdXJsID0gYCR7dGhpcy5wbHVnaW4uc2V0dGluZ3Mub2xsYW1hU2VydmVyVXJsfSR7ZW5kcG9pbnR9YDtcbiAgICBjb25zdCBoZWFkZXJzID0geyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH07XG4gICAgY29uc3QgZW1iZWRkaW5nc0xpc3Q6IG51bWJlcltdW10gPSBbXTtcblxuICAgIHRyeSB7XG4gICAgICBmb3IgKGNvbnN0IHByb21wdCBvZiBwcm9tcHRzKSB7XG4gICAgICAgIGNvbnN0IHRyaW1tZWRQcm9tcHQgPSBwcm9tcHQudHJpbSgpO1xuICAgICAgICBpZiAoIXRyaW1tZWRQcm9tcHQpIGNvbnRpbnVlO1xuXG4gICAgICAgIGNvbnN0IHJlcXVlc3RCb2R5ID0gSlNPTi5zdHJpbmdpZnkoeyBtb2RlbDogbW9kZWwsIHByb21wdDogdHJpbW1lZFByb21wdCB9KTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHVybCwgeyBtZXRob2Q6ICdQT1NUJywgaGVhZGVycywgYm9keTogcmVxdWVzdEJvZHkgfSk7XG4gICAgICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgICAgICAgbGV0IGVycm9yVGV4dCA9IGBPbGxhbWEgRW1iZWRkaW5ncyBBUEkgZXJyb3IhIFN0YXR1czogJHtyZXNwb25zZS5zdGF0dXN9YDtcbiAgICAgICAgICAgIHRyeSB7IGNvbnN0IGVyckpzb24gPSBhd2FpdCByZXNwb25zZS5qc29uKCk7IGVycm9yVGV4dCArPSBgOiAke2Vyckpzb24/LmVycm9yIHx8ICdEZXRhaWxzIHVuYXZhaWxhYmxlJ31gOyB9IGNhdGNoIHt9XG4gICAgICAgICAgICB0aGlzLnBsdWdpbi5sb2dnZXIud2FybihgW09sbGFtYVNlcnZpY2VdIEVtYmVkZGluZ3MgQVBJIEVycm9yIGZvciBwcm9tcHQgXCIke3RyaW1tZWRQcm9tcHQuc3Vic3RyaW5nKDAsMzApfS4uLlwiOiAke2Vycm9yVGV4dH1gKTtcbiAgICAgICAgICAgIC8vINCf0YDQvtC00L7QstC20YPRlNC80L4g0Lcg0ZbQvdGI0LjQvNC4INC/0YDQvtC80L/RgtCw0LzQuFxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IGVtYmVkZGluZ1Jlc3BvbnNlID0gYXdhaXQgcmVzcG9uc2UuanNvbigpIGFzIE9sbGFtYUVtYmVkZGluZ3NSZXNwb25zZTtcbiAgICAgICAgICBpZiAoZW1iZWRkaW5nUmVzcG9uc2UgJiYgZW1iZWRkaW5nUmVzcG9uc2UuZW1iZWRkaW5nKSB7XG4gICAgICAgICAgICBlbWJlZGRpbmdzTGlzdC5wdXNoKGVtYmVkZGluZ1Jlc3BvbnNlLmVtYmVkZGluZyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICB0aGlzLnBsdWdpbi5sb2dnZXIud2FybihgW09sbGFtYVNlcnZpY2VdIFZhbGlkIHJlc3BvbnNlIGJ1dCBubyBlbWJlZGRpbmcgZm91bmQgZm9yIHByb21wdCBcIiR7dHJpbW1lZFByb21wdC5zdWJzdHJpbmcoMCwzMCl9Li4uXCJgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKHNpbmdsZUVycm9yOiBhbnkpIHtcbiAgICAgICAgICB0aGlzLnBsdWdpbi5sb2dnZXIuZXJyb3IoYFtPbGxhbWFTZXJ2aWNlXSBFcnJvciBnZW5lcmF0aW5nIGVtYmVkZGluZyBmb3IgcHJvbXB0IFwiJHt0cmltbWVkUHJvbXB0LnN1YnN0cmluZygwLDMwKX0uLi5cIjogJHtzaW5nbGVFcnJvci5tZXNzYWdlfWAsIHNpbmdsZUVycm9yKTtcbiAgICAgICAgICB0aGlzLmVtaXQoJ2Nvbm5lY3Rpb24tZXJyb3InLCBuZXcgRXJyb3Ioc2luZ2xlRXJyb3IubWVzc2FnZSB8fCAnRW1iZWRkaW5nIGdlbmVyYXRpb24gZmFpbGVkIGZvciBhIHByb21wdCcpKTtcbiAgICAgICAgICAvLyDQn9GA0L7QtNC+0LLQttGD0ZTQvNC+XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBlbWJlZGRpbmdzTGlzdC5sZW5ndGggPiAwID8gZW1iZWRkaW5nc0xpc3QgOiBudWxsO1xuICAgIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICAgIC8vINCm0Y8g0LfQvtCy0L3RltGI0L3RjyDQv9C+0LzQuNC70LrQsCDQvNCw0LvQvtC50LzQvtCy0ZbRgNC90LAsINGP0LrRidC+INCy0L3Rg9GC0YDRltGI0L3RliDQvtCx0YDQvtCx0LvRj9GO0YLRjNGB0Y9cbiAgICAgIHRoaXMucGx1Z2luLmxvZ2dlci5lcnJvcihgW09sbGFtYVNlcnZpY2VdIE91dGVyIGVycm9yIGluIGdlbmVyYXRlRW1iZWRkaW5nczogJHtlcnJvci5tZXNzYWdlfWAsIGVycm9yKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGdldE1vZGVscyhmb3JjZVJlZnJlc2g6IGJvb2xlYW4gPSBmYWxzZSk6IFByb21pc2U8c3RyaW5nW10+IHtcbiAgICAvLyBgZm9yY2VSZWZyZXNoYCDRgtGD0YIg0L3QtSDQstC40LrQvtGA0LjRgdGC0L7QstGD0ZTRgtGM0YHRjywg0L7RgdC60ZbQu9GM0LrQuCDQvNC4INC90LUg0LrQtdGI0YPRlNC80L4g0YHQv9C40YHQvtC6INC80L7QtNC10LvQtdC5INCyINGG0YzQvtC80YMg0YHQtdGA0LLRltGB0ZYuXG4gICAgLy8g0K/QutGJ0L4g0LrQtdGI0YPQstCw0L3QvdGPINCx0YPQtNC1INC00L7QtNCw0L3Qviwg0YLQvtC00ZYgYGZvcmNlUmVmcmVzaGAg0YHRgtCw0L3QtSDQsNC60YLRg9Cw0LvRjNC90LjQvC5cbiAgICBjb25zdCBlbmRwb2ludCA9ICcvYXBpL3RhZ3MnO1xuICAgIGNvbnN0IHVybCA9IGAke3RoaXMucGx1Z2luLnNldHRpbmdzLm9sbGFtYVNlcnZlclVybH0ke2VuZHBvaW50fWA7XG4gICAgbGV0IG1vZGVsTGlzdFJlc3VsdDogc3RyaW5nW10gPSBbXTtcblxuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHVybCwgeyBtZXRob2Q6ICdHRVQnIH0pO1xuICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgICBsZXQgZXJyb3JUZXh0ID0gYE9sbGFtYSBUYWdzIEFQSSBlcnJvciEgU3RhdHVzOiAke3Jlc3BvbnNlLnN0YXR1c31gO1xuICAgICAgICB0cnkgeyBjb25zdCBlcnJKc29uID0gYXdhaXQgcmVzcG9uc2UuanNvbigpOyBlcnJvclRleHQgKz0gYDogJHtlcnJKc29uPy5lcnJvciB8fCAnRGV0YWlscyB1bmF2YWlsYWJsZSd9YDsgfSBjYXRjaCB7fVxuICAgICAgICB0aGlzLnBsdWdpbi5sb2dnZXIuZXJyb3IoYFtPbGxhbWFTZXJ2aWNlXSBUYWdzIEFQSSBFcnJvcjogJHtlcnJvclRleHR9YCk7XG4gICAgICAgIHRoaXMuZW1pdCgnY29ubmVjdGlvbi1lcnJvcicsIG5ldyBFcnJvcihlcnJvclRleHQpKTtcbiAgICAgICAgLy8g0J/QvtCy0LXRgNGC0LDRlNC80L4g0L/QvtGA0L7QttC90ZbQuSDQvNCw0YHQuNCyINGDINCy0LjQv9Cw0LTQutGDINC/0L7QvNC40LvQutC4IEFQSSwg0YnQvtCxIFVJINC90LUgXCLQt9Cw0LLQuNGBXCJcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKSBhcyB7IG1vZGVsczogQXJyYXk8e25hbWU6IHN0cmluZywgbW9kaWZpZWRfYXQ6IHN0cmluZywgc2l6ZTogbnVtYmVyLCBkaWdlc3Q6IHN0cmluZywgZGV0YWlsczogb2JqZWN0fT4gfTsgLy8g0JTQvtC00LDQsiDQsdGW0LvRjNGI0LUg0L/QvtC70ZbQsiDQtNC70Y8g0YLQuNC/0YNcbiAgICAgIGlmIChkYXRhICYmIEFycmF5LmlzQXJyYXkoZGF0YS5tb2RlbHMpKSB7XG4gICAgICAgIG1vZGVsTGlzdFJlc3VsdCA9IGRhdGEubW9kZWxzXG4gICAgICAgICAgLm1hcCgobSkgPT4gbT8ubmFtZSlcbiAgICAgICAgICAuZmlsdGVyKChuYW1lKTogbmFtZSBpcyBzdHJpbmcgPT4gdHlwZW9mIG5hbWUgPT09ICdzdHJpbmcnICYmIG5hbWUubGVuZ3RoID4gMClcbiAgICAgICAgICAuc29ydCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5wbHVnaW4ubG9nZ2VyLndhcm4oXCJbT2xsYW1hU2VydmljZV0gUmVjZWl2ZWQgdW5leHBlY3RlZCBkYXRhIGZvcm1hdCBmcm9tIC9hcGkvdGFnc1wiLCBkYXRhKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlOiBhbnkpIHtcbiAgICAgIGNvbnN0IGNvbm5lY3Rpb25FcnJvck1zZyA9IGBGYWlsZWQgdG8gY29ubmVjdCBvciBmZXRjaCBtb2RlbHMgZnJvbSBPbGxhbWEgc2VydmVyIGF0ICR7dGhpcy5wbHVnaW4uc2V0dGluZ3Mub2xsYW1hU2VydmVyVXJsfS4gKEVuZHBvaW50OiAvYXBpL3RhZ3MpYDtcbiAgICAgIGlmICghZS5tZXNzYWdlPy5pbmNsdWRlcygnQVBJIGVycm9yJykpIHsgLy8gQXZvaWQgZHVwbGljYXRlIGVtaXRzXG4gICAgICAgIHRoaXMucGx1Z2luLmxvZ2dlci5lcnJvcihgW09sbGFtYVNlcnZpY2VdIENvbm5lY3Rpb24vRmV0Y2ggRXJyb3IgKGdldE1vZGVscyk6ICR7Y29ubmVjdGlvbkVycm9yTXNnfWAsIGUpO1xuICAgICAgICB0aGlzLmVtaXQoJ2Nvbm5lY3Rpb24tZXJyb3InLCBuZXcgRXJyb3IoZS5tZXNzYWdlIHx8IGNvbm5lY3Rpb25FcnJvck1zZykpO1xuICAgICAgfVxuICAgICAgLy8g0J/QvtCy0LXRgNGC0LDRlNC80L4g0L/QvtGA0L7QttC90ZbQuSDQvNCw0YHQuNCyLCDRidC+0LEgVUkg0LzRltCzINGG0LUg0L7QsdGA0L7QsdC40YLQuFxuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICByZXR1cm4gbW9kZWxMaXN0UmVzdWx0O1xuICB9XG5cblxuICBhc3luYyBnZXRNb2RlbERldGFpbHMobW9kZWxOYW1lOiBzdHJpbmcpOiBQcm9taXNlPE9sbGFtYVNob3dSZXNwb25zZSB8IG51bGw+IHtcbiAgICBjb25zdCBlbmRwb2ludCA9ICcvYXBpL3Nob3cnO1xuICAgIGNvbnN0IHVybCA9IGAke3RoaXMucGx1Z2luLnNldHRpbmdzLm9sbGFtYVNlcnZlclVybH0ke2VuZHBvaW50fWA7XG4gICAgY29uc3QgaGVhZGVycyA9IHsgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyB9O1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHVybCwgeyBtZXRob2Q6ICdQT1NUJywgaGVhZGVycywgYm9keTogSlNPTi5zdHJpbmdpZnkoeyBuYW1lOiBtb2RlbE5hbWUgfSkgfSk7XG4gICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICAgIGxldCBlcnJvclRleHQgPSBgT2xsYW1hIFNob3cgQVBJIGVycm9yIGZvciBtb2RlbCAke21vZGVsTmFtZX0hIFN0YXR1czogJHtyZXNwb25zZS5zdGF0dXN9YDtcbiAgICAgICAgdHJ5IHsgY29uc3QgZXJySnNvbiA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTsgZXJyb3JUZXh0ICs9IGA6ICR7ZXJySnNvbj8uZXJyb3IgfHwgJ0RldGFpbHMgdW5hdmFpbGFibGUnfWA7IH0gY2F0Y2gge31cbiAgICAgICAgdGhpcy5wbHVnaW4ubG9nZ2VyLmVycm9yKGBbT2xsYW1hU2VydmljZV0gU2hvdyBBUEkgRXJyb3I6ICR7ZXJyb3JUZXh0fWApO1xuICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzICE9PSA0MDQpIHsgLy8g0J3QtSDQtdC80ZbRgtGD0ZTQvNC+INC/0L7QvNC40LvQutGDINC3J9GU0LTQvdCw0L3QvdGPLCDRj9C60YnQviDRhtC1INC/0YDQvtGB0YLQviBcItC80L7QtNC10LvRjCDQvdC1INC30L3QsNC50LTQtdC90L5cIlxuICAgICAgICAgICAgdGhpcy5lbWl0KCdjb25uZWN0aW9uLWVycm9yJywgbmV3IEVycm9yKGVycm9yVGV4dCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsOyAvLyDQn9C+0LLQtdGA0YLQsNGU0LzQviBudWxsLCDRj9C60YnQviDQvNC+0LTQtdC70Ywg0L3QtSDQt9C90LDQudC00LXQvdC+INCw0LHQviDRltC90YjQsCDQv9C+0LzQuNC70LrQsFxuICAgICAgfVxuICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKSBhcyBPbGxhbWFTaG93UmVzcG9uc2U7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9IGNhdGNoIChlOiBhbnkpIHtcbiAgICAgIGNvbnN0IGNvbm5lY3Rpb25FcnJvck1zZyA9IGBGYWlsZWQgdG8gY29ubmVjdCBvciBnZXQgZGV0YWlscyBmb3IgbW9kZWwgJHttb2RlbE5hbWV9IGZyb20gT2xsYW1hIHNlcnZlciBhdCAke3RoaXMucGx1Z2luLnNldHRpbmdzLm9sbGFtYVNlcnZlclVybH0uIChFbmRwb2ludDogL2FwaS9zaG93KWA7XG4gICAgICBpZiAoIWUubWVzc2FnZT8uaW5jbHVkZXMoJ0FQSSBlcnJvcicpKSB7XG4gICAgICAgIHRoaXMucGx1Z2luLmxvZ2dlci5lcnJvcihgW09sbGFtYVNlcnZpY2VdIENvbm5lY3Rpb24vRmV0Y2ggRXJyb3IgKGdldE1vZGVsRGV0YWlscyk6ICR7Y29ubmVjdGlvbkVycm9yTXNnfWAsIGUpO1xuICAgICAgICB0aGlzLmVtaXQoJ2Nvbm5lY3Rpb24tZXJyb3InLCBuZXcgRXJyb3IoZS5tZXNzYWdlIHx8IGNvbm5lY3Rpb25FcnJvck1zZykpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG5cbn0gLy8gLS0tIEVuZCBvZiBPbGxhbWFTZXJ2aWNlIGNsYXNzIC0tLSJdfQ==