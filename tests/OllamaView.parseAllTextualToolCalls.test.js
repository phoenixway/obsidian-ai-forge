// tests/renderers/AssistantMessageRenderer.prepareDisplayContent.test.ts
import { AssistantMessageRenderer } from '@/renderers/AssistantMessageRenderer';
import * as RendererUtils from '@/MessageRendererUtils'; // Адаптуйте шлях
// Мок для OllamaView
const mockParseAllTextualToolCalls = jest.fn();
// Мінімальний мок для plugin.app, потрібний для RendererUtils.renderMarkdownContent
const mockAppForPlugin = {
    vault: {
        getRoot: () => ({ path: "/" })
    }
};
const mockView = {
    parseAllTextualToolCalls: mockParseAllTextualToolCalls,
    // Додаємо мок plugin всередині mockView, оскільки renderMarkdownContent може його очікувати
    plugin: {
        app: mockAppForPlugin,
        settings: {
            fixBrokenEmojis: false // Приклад налаштування
        },
        logger: {
            debug: jest.fn(), info: jest.fn(), warn: jest.fn(), error: jest.fn(),
        }
    }
};
// Мок для OllamaPlugin
const mockPluginLogger = {
    debug: jest.fn(),
    info: jest.fn(),
    warn: jest.fn(),
    error: jest.fn(),
};
const mockPlugin = {
    settings: {
        enableToolUse: true,
    },
    logger: mockPluginLogger,
    app: mockAppForPlugin // Використовуємо той самий мок app
};
// Мокуємо RendererUtils
jest.mock('@/MessageRendererUtils', () => {
    const original = jest.requireActual('@/MessageRendererUtils');
    return Object.assign(Object.assign({}, original), { decodeHtmlEntities: jest.fn().mockImplementation((text) => text), detectThinkingTags: jest.fn().mockImplementation((text) => ({
            hasThinkingTags: false,
            contentWithoutTags: text,
            format: 'text'
        })), 
        // Мокуємо renderMarkdownContent, щоб він нічого не робив і не викликав помилок DOM
        renderMarkdownContent: jest.fn().mockResolvedValue(undefined) });
});
describe('AssistantMessageRenderer.prepareDisplayContent', () => {
    const createTestMessage = (content, tool_calls) => ({
        role: "assistant", // Явно "assistant"
        content: content,
        timestamp: new Date(),
        tool_calls: tool_calls
    });
    beforeEach(() => {
        RendererUtils.decodeHtmlEntities.mockClear().mockImplementation((text) => text);
        RendererUtils.detectThinkingTags.mockClear().mockImplementation((text) => ({
            hasThinkingTags: false, contentWithoutTags: text, format: 'text'
        }));
        mockParseAllTextualToolCalls.mockClear();
        Object.values(mockPluginLogger).forEach(mockFn => mockFn.mockClear());
    });
    it('should return original content (after think stripping) if tool use is disabled', () => {
        const originalSettings = Object.assign({}, mockPlugin.settings);
        mockPlugin.settings.enableToolUse = false;
        const content = "<think>thinking</think><tool_call>{\"name\":\"test\"}</tool_call> Some text.";
        const message = createTestMessage(content);
        RendererUtils.detectThinkingTags.mockReturnValue({
            hasThinkingTags: true, contentWithoutTags: "<tool_call>{\"name\":\"test\"}</tool_call> Some text.", format: 'text'
        });
        const result = AssistantMessageRenderer.prepareDisplayContent(content, message, mockPlugin, mockView);
        expect(result).toBe("<tool_call>{\"name\":\"test\"}</tool_call> Some text.");
        mockPlugin.settings.enableToolUse = originalSettings.enableToolUse;
    });
    it('should return content without think tags if no tool indicators', () => {
        const content = "<think>Thinking...</think>Just a normal response.";
        const message = createTestMessage(content);
        RendererUtils.detectThinkingTags.mockReturnValue({
            hasThinkingTags: true, contentWithoutTags: "Just a normal response.", format: 'text'
        });
        mockParseAllTextualToolCalls.mockReturnValue([]);
        const result = AssistantMessageRenderer.prepareDisplayContent(content, message, mockPlugin, mockView);
        expect(result).toBe("Just a normal response.");
    });
    it('should replace single textual tool call and keep accompanying text', () => {
        const originalContent = "<think>Let me use a tool.</think><tool_call>{\"name\":\"listFiles\",\"arguments\":{}}</tool_call> Here are the files.";
        const contentWithoutThink = "<tool_call>{\"name\":\"listFiles\",\"arguments\":{}}</tool_call> Here are the files.";
        const message = createTestMessage(originalContent);
        RendererUtils.detectThinkingTags.mockReturnValue({
            hasThinkingTags: true, contentWithoutTags: contentWithoutThink, format: 'text'
        });
        mockParseAllTextualToolCalls.mockImplementation((text) => {
            if (text === contentWithoutThink) {
                return [{ name: "listFiles", arguments: {} }];
            }
            return [];
        });
        const expected = "( Using tool: listFiles... )\n\nHere are the files.";
        const result = AssistantMessageRenderer.prepareDisplayContent(originalContent, message, mockPlugin, mockView);
        expect(result).toBe(expected);
    });
    it('should display (Using tool...) if only textual tool call is present', () => {
        const originalContent = "<tool_call>{\"name\":\"readFile\",\"arguments\":{\"path\":\"file.txt\"}}</tool_call>";
        const message = createTestMessage(originalContent);
        RendererUtils.detectThinkingTags.mockReturnValue({
            hasThinkingTags: false, contentWithoutTags: originalContent, format: 'text'
        });
        mockParseAllTextualToolCalls.mockReturnValue([{ name: "readFile", arguments: { path: "file.txt" } }]);
        const expected = "( Using tool: readFile... )";
        const result = AssistantMessageRenderer.prepareDisplayContent(originalContent, message, mockPlugin, mockView);
        expect(result).toBe(expected);
    });
    it('should handle multiple textual tool calls correctly', () => {
        const originalContent = "<tool_call>{\"name\":\"tool1\"}</tool_call><tool_call>{\"name\":\"tool2\"}</tool_call>Some final text.";
        const message = createTestMessage(originalContent);
        RendererUtils.detectThinkingTags.mockReturnValue({
            hasThinkingTags: false, contentWithoutTags: originalContent, format: 'text'
        });
        mockParseAllTextualToolCalls.mockReturnValue([
            { name: "tool1", arguments: {} },
            { name: "tool2", arguments: {} }
        ]);
        const expected = "( Using tools: tool1, tool2... )\n\nSome final text.";
        const result = AssistantMessageRenderer.prepareDisplayContent(originalContent, message, mockPlugin, mockView);
        expect(result).toBe(expected);
    });
    // Цей тест перевіряє логіку prepareDisplayContent
    it('should display (Attempting to use tool(s)...) and log warn from prepareDisplayContent when names not extracted', () => {
        const originalContent = "<think>Trying</think><tool_call>INVALID JSON</tool_call>Extra.";
        const contentWithoutThink = "<tool_call>INVALID JSON</tool_call>Extra.";
        const message = createTestMessage(originalContent);
        RendererUtils.detectThinkingTags.mockReturnValue({
            hasThinkingTags: true, contentWithoutTags: contentWithoutThink, format: 'text'
        });
        // Симулюємо, що parseAllTextualToolCalls (викликаний з prepareDisplayContent) нічого не знаходить
        mockParseAllTextualToolCalls.mockReturnValue([]);
        const expectedDisplayContent = "( Attempting to use tool(s)... )\n\nExtra.";
        const result = AssistantMessageRenderer.prepareDisplayContent(originalContent, message, mockPlugin, mockView);
        expect(result).toBe(expectedDisplayContent);
        // Перевіряємо, що mockPluginLogger.warn був викликаний з ПОВІДОМЛЕННЯМ ВІД PREPAREDISPLAYCONTENT
        const warnCallsArgs = mockPluginLogger.warn.mock.calls;
        const prepareDisplayContentWarn = warnCallsArgs.find(args => typeof args[0] === 'string' &&
            args[0].includes("[ARender STATIC PREP]") && // Ідентифікатор логу з prepareDisplayContent
            args[0].includes("Tool call indicators were present, but NO tool names were extracted. Displaying generic 'Attempting to use...' message."));
        expect(prepareDisplayContentWarn).toBeDefined();
    });
    it('should correctly process native tool_calls with accompanying content', () => {
        const message = createTestMessage("<think>Let me think.</think>Okay, I need to use a tool.", [{ type: "function", id: "call1", function: { name: "getWeather", arguments: "{}" } }]);
        RendererUtils.detectThinkingTags.mockReturnValue({
            hasThinkingTags: true, contentWithoutTags: "Okay, I need to use a tool.", format: 'text'
        });
        mockParseAllTextualToolCalls.mockReturnValue([]);
        const expected = "( Using tool: getWeather... )\n\nOkay, I need to use a tool.";
        const result = AssistantMessageRenderer.prepareDisplayContent(message.content, message, mockPlugin, mockView);
        expect(result).toBe(expected);
    });
    it('should correctly process native tool_calls with empty string content', () => {
        const message = createTestMessage("", [{ type: "function", id: "call1", function: { name: "getSettings", arguments: "{}" } }]);
        RendererUtils.detectThinkingTags.mockImplementation((text) => ({
            hasThinkingTags: false, contentWithoutTags: text || "", format: 'text'
        }));
        mockParseAllTextualToolCalls.mockReturnValue([]);
        const expected = "( Using tool: getSettings... )";
        const result = AssistantMessageRenderer.prepareDisplayContent(message.content || "", message, mockPlugin, mockView);
        expect(result).toBe(expected);
    });
    it('should correctly process native tool_calls with null content', () => {
        const message = createTestMessage("", [{ type: "function", id: "call1", function: { name: "getSettings", arguments: "{}" } }]);
        RendererUtils.detectThinkingTags.mockImplementation((text) => ({
            hasThinkingTags: false, contentWithoutTags: text || "", format: 'text'
        }));
        mockParseAllTextualToolCalls.mockReturnValue([]);
        const expected = "( Using tool: getSettings... )";
        const result = AssistantMessageRenderer.prepareDisplayContent(message.content || "", message, mockPlugin, mockView);
        expect(result).toBe(expected);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT2xsYW1hVmlldy5wYXJzZUFsbFRleHR1YWxUb29sQ2FsbHMudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIk9sbGFtYVZpZXcucGFyc2VBbGxUZXh0dWFsVG9vbENhbGxzLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEseUVBQXlFO0FBRXpFLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBSWhGLE9BQU8sS0FBSyxhQUFhLE1BQU0sd0JBQXdCLENBQUMsQ0FBQyxpQkFBaUI7QUFFMUUscUJBQXFCO0FBQ3JCLE1BQU0sNEJBQTRCLEdBQUcsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDO0FBRS9DLG9GQUFvRjtBQUNwRixNQUFNLGdCQUFnQixHQUFHO0lBQ3JCLEtBQUssRUFBRTtRQUNILE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFDO0tBQ2pDO0NBQ0csQ0FBQztBQUVULE1BQU0sUUFBUSxHQUFHO0lBQ2Ysd0JBQXdCLEVBQUUsNEJBQTRCO0lBQ3RELDRGQUE0RjtJQUM1RixNQUFNLEVBQUU7UUFDSixHQUFHLEVBQUUsZ0JBQWdCO1FBQ3JCLFFBQVEsRUFBRTtZQUNSLGVBQWUsRUFBRSxLQUFLLENBQUMsdUJBQXVCO1NBQy9DO1FBQ0QsTUFBTSxFQUFFO1lBQ04sS0FBSyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7U0FDckU7S0FDSjtDQUNtQixDQUFDO0FBRXZCLHVCQUF1QjtBQUN2QixNQUFNLGdCQUFnQixHQUFHO0lBQ3JCLEtBQUssRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO0lBQ2hCLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO0lBQ2YsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7SUFDZixLQUFLLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtDQUNuQixDQUFDO0FBQ0YsTUFBTSxVQUFVLEdBQUc7SUFDakIsUUFBUSxFQUFFO1FBQ1IsYUFBYSxFQUFFLElBQUk7S0FDcEI7SUFDRCxNQUFNLEVBQUUsZ0JBQWdCO0lBQ3hCLEdBQUcsRUFBRSxnQkFBZ0IsQ0FBQyxtQ0FBbUM7Q0FDbkMsQ0FBQztBQUV6Qix3QkFBd0I7QUFDeEIsSUFBSSxDQUFDLElBQUksQ0FBQyx3QkFBd0IsRUFBRSxHQUFHLEVBQUU7SUFDckMsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO0lBQzlELHVDQUNPLFFBQVEsS0FDWCxrQkFBa0IsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxJQUFZLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUN4RSxrQkFBa0IsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxJQUFZLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDaEUsZUFBZSxFQUFFLEtBQUs7WUFDdEIsa0JBQWtCLEVBQUUsSUFBSTtZQUN4QixNQUFNLEVBQUUsTUFBTTtTQUNqQixDQUFDLENBQUM7UUFDSCxtRkFBbUY7UUFDbkYscUJBQXFCLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxJQUMvRDtBQUNOLENBQUMsQ0FBQyxDQUFDO0FBR0gsUUFBUSxDQUFDLGdEQUFnRCxFQUFFLEdBQUcsRUFBRTtJQUM5RCxNQUFNLGlCQUFpQixHQUFHLENBQUMsT0FBZSxFQUFFLFVBQXVCLEVBQW9CLEVBQUUsQ0FBQyxDQUFDO1FBQ3pGLElBQUksRUFBRSxXQUFXLEVBQUUsbUJBQW1CO1FBQ3RDLE9BQU8sRUFBRSxPQUFPO1FBQ2hCLFNBQVMsRUFBRSxJQUFJLElBQUksRUFBRTtRQUNyQixVQUFVLEVBQUUsVUFBVTtLQUN2QixDQUFDLENBQUM7SUFFSCxVQUFVLENBQUMsR0FBRyxFQUFFO1FBQ2IsYUFBYSxDQUFDLGtCQUFnQyxDQUFDLFNBQVMsRUFBRSxDQUFDLGtCQUFrQixDQUFDLENBQUMsSUFBWSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN0RyxhQUFhLENBQUMsa0JBQWdDLENBQUMsU0FBUyxFQUFFLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxJQUFZLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDOUYsZUFBZSxFQUFFLEtBQUssRUFBRSxrQkFBa0IsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLE1BQU07U0FDbkUsQ0FBQyxDQUFDLENBQUM7UUFFSiw0QkFBNEIsQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUV6QyxNQUFNLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUM7SUFDeEUsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsZ0ZBQWdGLEVBQUUsR0FBRyxFQUFFO1FBQ3hGLE1BQU0sZ0JBQWdCLHFCQUFRLFVBQVUsQ0FBQyxRQUFRLENBQUUsQ0FBQztRQUNwRCxVQUFVLENBQUMsUUFBUSxDQUFDLGFBQWEsR0FBRyxLQUFLLENBQUM7UUFDMUMsTUFBTSxPQUFPLEdBQUcsOEVBQThFLENBQUM7UUFDL0YsTUFBTSxPQUFPLEdBQUcsaUJBQWlCLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFMUMsYUFBYSxDQUFDLGtCQUFnQyxDQUFDLGVBQWUsQ0FBQztZQUM1RCxlQUFlLEVBQUUsSUFBSSxFQUFFLGtCQUFrQixFQUFFLHVEQUF1RCxFQUFFLE1BQU0sRUFBRSxNQUFNO1NBQ3JILENBQUMsQ0FBQztRQUVILE1BQU0sTUFBTSxHQUFHLHdCQUF3QixDQUFDLHFCQUFxQixDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQ3RHLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsdURBQXVELENBQUMsQ0FBQztRQUM3RSxVQUFVLENBQUMsUUFBUSxDQUFDLGFBQWEsR0FBRyxnQkFBZ0IsQ0FBQyxhQUFhLENBQUM7SUFDckUsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsZ0VBQWdFLEVBQUUsR0FBRyxFQUFFO1FBQ3hFLE1BQU0sT0FBTyxHQUFHLG1EQUFtRCxDQUFDO1FBQ3BFLE1BQU0sT0FBTyxHQUFHLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzFDLGFBQWEsQ0FBQyxrQkFBZ0MsQ0FBQyxlQUFlLENBQUM7WUFDNUQsZUFBZSxFQUFFLElBQUksRUFBRSxrQkFBa0IsRUFBRSx5QkFBeUIsRUFBRSxNQUFNLEVBQUUsTUFBTTtTQUN2RixDQUFDLENBQUM7UUFDSCw0QkFBNEIsQ0FBQyxlQUFlLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFakQsTUFBTSxNQUFNLEdBQUcsd0JBQXdCLENBQUMscUJBQXFCLENBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDdEcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO0lBQ2pELENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLG9FQUFvRSxFQUFFLEdBQUcsRUFBRTtRQUM1RSxNQUFNLGVBQWUsR0FBRyx1SEFBdUgsQ0FBQztRQUNoSixNQUFNLG1CQUFtQixHQUFHLHNGQUFzRixDQUFDO1FBQ25ILE1BQU0sT0FBTyxHQUFHLGlCQUFpQixDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBRWxELGFBQWEsQ0FBQyxrQkFBZ0MsQ0FBQyxlQUFlLENBQUM7WUFDNUQsZUFBZSxFQUFFLElBQUksRUFBRSxrQkFBa0IsRUFBRSxtQkFBbUIsRUFBRSxNQUFNLEVBQUUsTUFBTTtTQUNqRixDQUFDLENBQUM7UUFDSCw0QkFBNEIsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLElBQVksRUFBRSxFQUFFO1lBQzdELElBQUksSUFBSSxLQUFLLG1CQUFtQixFQUFFLENBQUM7Z0JBQy9CLE9BQU8sQ0FBQyxFQUFFLElBQUksRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDbEQsQ0FBQztZQUNELE9BQU8sRUFBRSxDQUFDO1FBQ2QsQ0FBQyxDQUFDLENBQUM7UUFFSCxNQUFNLFFBQVEsR0FBRyxxREFBcUQsQ0FBQztRQUN2RSxNQUFNLE1BQU0sR0FBRyx3QkFBd0IsQ0FBQyxxQkFBcUIsQ0FBQyxlQUFlLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUM5RyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2hDLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLHFFQUFxRSxFQUFFLEdBQUcsRUFBRTtRQUM3RSxNQUFNLGVBQWUsR0FBRyxzRkFBc0YsQ0FBQztRQUMvRyxNQUFNLE9BQU8sR0FBRyxpQkFBaUIsQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUVsRCxhQUFhLENBQUMsa0JBQWdDLENBQUMsZUFBZSxDQUFDO1lBQzVELGVBQWUsRUFBRSxLQUFLLEVBQUUsa0JBQWtCLEVBQUUsZUFBZSxFQUFFLE1BQU0sRUFBRSxNQUFNO1NBQzlFLENBQUMsQ0FBQztRQUNILDRCQUE0QixDQUFDLGVBQWUsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFFdEcsTUFBTSxRQUFRLEdBQUcsNkJBQTZCLENBQUM7UUFDL0MsTUFBTSxNQUFNLEdBQUcsd0JBQXdCLENBQUMscUJBQXFCLENBQUMsZUFBZSxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDOUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNoQyxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxxREFBcUQsRUFBRSxHQUFHLEVBQUU7UUFDN0QsTUFBTSxlQUFlLEdBQUcsd0dBQXdHLENBQUM7UUFDakksTUFBTSxPQUFPLEdBQUcsaUJBQWlCLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDbEQsYUFBYSxDQUFDLGtCQUFnQyxDQUFDLGVBQWUsQ0FBQztZQUM1RCxlQUFlLEVBQUUsS0FBSyxFQUFFLGtCQUFrQixFQUFFLGVBQWUsRUFBRSxNQUFNLEVBQUUsTUFBTTtTQUM5RSxDQUFDLENBQUM7UUFDSCw0QkFBNEIsQ0FBQyxlQUFlLENBQUM7WUFDekMsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxFQUFFLEVBQUU7WUFDaEMsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxFQUFFLEVBQUU7U0FDbkMsQ0FBQyxDQUFDO1FBRUgsTUFBTSxRQUFRLEdBQUcsc0RBQXNELENBQUM7UUFDeEUsTUFBTSxNQUFNLEdBQUcsd0JBQXdCLENBQUMscUJBQXFCLENBQUMsZUFBZSxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDOUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNoQyxDQUFDLENBQUMsQ0FBQztJQUVILGtEQUFrRDtJQUNsRCxFQUFFLENBQUMsZ0hBQWdILEVBQUUsR0FBRyxFQUFFO1FBQ3hILE1BQU0sZUFBZSxHQUFHLGdFQUFnRSxDQUFDO1FBQ3pGLE1BQU0sbUJBQW1CLEdBQUcsMkNBQTJDLENBQUM7UUFDeEUsTUFBTSxPQUFPLEdBQUcsaUJBQWlCLENBQUMsZUFBZSxDQUFDLENBQUM7UUFFbEQsYUFBYSxDQUFDLGtCQUFnQyxDQUFDLGVBQWUsQ0FBQztZQUM1RCxlQUFlLEVBQUUsSUFBSSxFQUFFLGtCQUFrQixFQUFFLG1CQUFtQixFQUFFLE1BQU0sRUFBRSxNQUFNO1NBQ2pGLENBQUMsQ0FBQztRQUNILGtHQUFrRztRQUNsRyw0QkFBNEIsQ0FBQyxlQUFlLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFakQsTUFBTSxzQkFBc0IsR0FBRyw0Q0FBNEMsQ0FBQztRQUM1RSxNQUFNLE1BQU0sR0FBRyx3QkFBd0IsQ0FBQyxxQkFBcUIsQ0FBQyxlQUFlLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUM5RyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLENBQUM7UUFFNUMsaUdBQWlHO1FBQ2pHLE1BQU0sYUFBYSxHQUFJLGdCQUFnQixDQUFDLElBQWtCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUN0RSxNQUFNLHlCQUF5QixHQUFHLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FDeEQsT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtZQUMzQixJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLHVCQUF1QixDQUFDLElBQUksNkNBQTZDO1lBQzFGLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMseUhBQXlILENBQUMsQ0FDOUksQ0FBQztRQUNGLE1BQU0sQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ2xELENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLHNFQUFzRSxFQUFFLEdBQUcsRUFBRTtRQUM5RSxNQUFNLE9BQU8sR0FBRyxpQkFBaUIsQ0FDN0IseURBQXlELEVBQ3pELENBQUMsRUFBQyxJQUFJLEVBQUUsVUFBVSxFQUFFLEVBQUUsRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLEVBQUMsSUFBSSxFQUFFLFlBQVksRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFDLEVBQWEsQ0FBQyxDQUNqRyxDQUFDO1FBQ0QsYUFBYSxDQUFDLGtCQUFnQyxDQUFDLGVBQWUsQ0FBQztZQUM1RCxlQUFlLEVBQUUsSUFBSSxFQUFFLGtCQUFrQixFQUFFLDZCQUE2QixFQUFFLE1BQU0sRUFBRSxNQUFNO1NBQzNGLENBQUMsQ0FBQztRQUNILDRCQUE0QixDQUFDLGVBQWUsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUVqRCxNQUFNLFFBQVEsR0FBRyw4REFBOEQsQ0FBQztRQUNoRixNQUFNLE1BQU0sR0FBRyx3QkFBd0IsQ0FBQyxxQkFBcUIsQ0FBQyxPQUFPLENBQUMsT0FBUSxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDL0csTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNoQyxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxzRUFBc0UsRUFBRSxHQUFHLEVBQUU7UUFDOUUsTUFBTSxPQUFPLEdBQUcsaUJBQWlCLENBQzdCLEVBQUUsRUFDRixDQUFDLEVBQUMsSUFBSSxFQUFFLFVBQVUsRUFBRSxFQUFFLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxFQUFDLElBQUksRUFBRSxhQUFhLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBQyxFQUFhLENBQUMsQ0FDbEcsQ0FBQztRQUNELGFBQWEsQ0FBQyxrQkFBZ0MsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLElBQVksRUFBRSxFQUFFLENBQUMsQ0FBQztZQUNsRixlQUFlLEVBQUUsS0FBSyxFQUFFLGtCQUFrQixFQUFFLElBQUksSUFBSSxFQUFFLEVBQUUsTUFBTSxFQUFFLE1BQU07U0FDekUsQ0FBQyxDQUFDLENBQUM7UUFDSiw0QkFBNEIsQ0FBQyxlQUFlLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFakQsTUFBTSxRQUFRLEdBQUcsZ0NBQWdDLENBQUM7UUFDbEQsTUFBTSxNQUFNLEdBQUcsd0JBQXdCLENBQUMscUJBQXFCLENBQUMsT0FBTyxDQUFDLE9BQU8sSUFBSSxFQUFFLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUNwSCxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2hDLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLDhEQUE4RCxFQUFFLEdBQUcsRUFBRTtRQUN0RSxNQUFNLE9BQU8sR0FBRyxpQkFBaUIsQ0FDN0IsRUFBRSxFQUNGLENBQUMsRUFBQyxJQUFJLEVBQUUsVUFBVSxFQUFFLEVBQUUsRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLEVBQUMsSUFBSSxFQUFFLGFBQWEsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFDLEVBQWEsQ0FBQyxDQUNsRyxDQUFDO1FBQ0EsYUFBYSxDQUFDLGtCQUFnQyxDQUFDLGtCQUFrQixDQUFDLENBQUMsSUFBWSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQ25GLGVBQWUsRUFBRSxLQUFLLEVBQUUsa0JBQWtCLEVBQUUsSUFBSSxJQUFJLEVBQUUsRUFBRSxNQUFNLEVBQUUsTUFBTTtTQUN6RSxDQUFDLENBQUMsQ0FBQztRQUNKLDRCQUE0QixDQUFDLGVBQWUsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUVqRCxNQUFNLFFBQVEsR0FBRyxnQ0FBZ0MsQ0FBQztRQUNsRCxNQUFNLE1BQU0sR0FBRyx3QkFBd0IsQ0FBQyxxQkFBcUIsQ0FBQyxPQUFPLENBQUMsT0FBTyxJQUFJLEVBQUUsRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQ3BILE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDaEMsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHRlc3RzL3JlbmRlcmVycy9Bc3Npc3RhbnRNZXNzYWdlUmVuZGVyZXIucHJlcGFyZURpc3BsYXlDb250ZW50LnRlc3QudHNcblxuaW1wb3J0IHsgQXNzaXN0YW50TWVzc2FnZVJlbmRlcmVyIH0gZnJvbSAnQC9yZW5kZXJlcnMvQXNzaXN0YW50TWVzc2FnZVJlbmRlcmVyJztcbmltcG9ydCB7IEFzc2lzdGFudE1lc3NhZ2UsIFRvb2xDYWxsLCBNZXNzYWdlUm9sZSB9IGZyb20gJ0AvdHlwZXMnOyAvLyDQn9C10YDQtdC60L7QvdCw0LnRgtC10YHRjywg0YnQviBNZXNzYWdlUm9sZSDRgtGD0YJcbmltcG9ydCB7IE9sbGFtYVZpZXcgfSBmcm9tICdAL09sbGFtYVZpZXcnOyAvLyDQkNC00LDQv9GC0YPQudGC0LUg0YjQu9GP0YVcbmltcG9ydCBPbGxhbWFQbHVnaW4gZnJvbSAnQC9tYWluJzsgICAgICAgIC8vINCQ0LTQsNC/0YLRg9C50YLQtSDRiNC70Y/RhVxuaW1wb3J0ICogYXMgUmVuZGVyZXJVdGlscyBmcm9tICdAL01lc3NhZ2VSZW5kZXJlclV0aWxzJzsgLy8g0JDQtNCw0L/RgtGD0LnRgtC1INGI0LvRj9GFXG5cbi8vINCc0L7QuiDQtNC70Y8gT2xsYW1hVmlld1xuY29uc3QgbW9ja1BhcnNlQWxsVGV4dHVhbFRvb2xDYWxscyA9IGplc3QuZm4oKTtcblxuLy8g0JzRltC90ZbQvNCw0LvRjNC90LjQuSDQvNC+0Log0LTQu9GPIHBsdWdpbi5hcHAsINC/0L7RgtGA0ZbQsdC90LjQuSDQtNC70Y8gUmVuZGVyZXJVdGlscy5yZW5kZXJNYXJrZG93bkNvbnRlbnRcbmNvbnN0IG1vY2tBcHBGb3JQbHVnaW4gPSB7XG4gICAgdmF1bHQ6IHtcbiAgICAgICAgZ2V0Um9vdDogKCkgPT4gKHsgcGF0aDogXCIvXCIgfSlcbiAgICB9XG59IGFzIGFueTtcblxuY29uc3QgbW9ja1ZpZXcgPSB7XG4gIHBhcnNlQWxsVGV4dHVhbFRvb2xDYWxsczogbW9ja1BhcnNlQWxsVGV4dHVhbFRvb2xDYWxscyxcbiAgLy8g0JTQvtC00LDRlNC80L4g0LzQvtC6IHBsdWdpbiDQstGB0LXRgNC10LTQuNC90ZYgbW9ja1ZpZXcsINC+0YHQutGW0LvRjNC60LggcmVuZGVyTWFya2Rvd25Db250ZW50INC80L7QttC1INC50L7Qs9C+INC+0YfRltC60YPQstCw0YLQuFxuICBwbHVnaW46IHsgXG4gICAgICBhcHA6IG1vY2tBcHBGb3JQbHVnaW4sXG4gICAgICBzZXR0aW5nczogeyBcbiAgICAgICAgZml4QnJva2VuRW1vamlzOiBmYWxzZSAvLyDQn9GA0LjQutC70LDQtCDQvdCw0LvQsNGI0YLRg9Cy0LDQvdC90Y9cbiAgICAgIH0sXG4gICAgICBsb2dnZXI6IHsgLy8g0JTQvtC00LDQvNC+INC70L7Qs9C10YAg0ZYg0YHRjtC00LgsINGP0LrRidC+IHJlbmRlck1hcmtkb3duQ29udGVudCDQudC+0LPQviDQstC40LrQvtGA0LjRgdGC0L7QstGD0ZRcbiAgICAgICAgZGVidWc6IGplc3QuZm4oKSwgaW5mbzogamVzdC5mbigpLCB3YXJuOiBqZXN0LmZuKCksIGVycm9yOiBqZXN0LmZuKCksXG4gICAgICB9XG4gIH1cbn0gYXMgYW55IGFzIE9sbGFtYVZpZXc7IFxuXG4vLyDQnNC+0Log0LTQu9GPIE9sbGFtYVBsdWdpblxuY29uc3QgbW9ja1BsdWdpbkxvZ2dlciA9IHtcbiAgICBkZWJ1ZzogamVzdC5mbigpLFxuICAgIGluZm86IGplc3QuZm4oKSxcbiAgICB3YXJuOiBqZXN0LmZuKCksXG4gICAgZXJyb3I6IGplc3QuZm4oKSxcbn07XG5jb25zdCBtb2NrUGx1Z2luID0ge1xuICBzZXR0aW5nczoge1xuICAgIGVuYWJsZVRvb2xVc2U6IHRydWUsXG4gIH0sXG4gIGxvZ2dlcjogbW9ja1BsdWdpbkxvZ2dlcixcbiAgYXBwOiBtb2NrQXBwRm9yUGx1Z2luIC8vINCS0LjQutC+0YDQuNGB0YLQvtCy0YPRlNC80L4g0YLQvtC5INGB0LDQvNC40Lkg0LzQvtC6IGFwcFxufSBhcyBhbnkgYXMgT2xsYW1hUGx1Z2luO1xuXG4vLyDQnNC+0LrRg9GU0LzQviBSZW5kZXJlclV0aWxzXG5qZXN0Lm1vY2soJ0AvTWVzc2FnZVJlbmRlcmVyVXRpbHMnLCAoKSA9PiB7XG4gICAgY29uc3Qgb3JpZ2luYWwgPSBqZXN0LnJlcXVpcmVBY3R1YWwoJ0AvTWVzc2FnZVJlbmRlcmVyVXRpbHMnKTtcbiAgICByZXR1cm4ge1xuICAgICAgICAuLi5vcmlnaW5hbCxcbiAgICAgICAgZGVjb2RlSHRtbEVudGl0aWVzOiBqZXN0LmZuKCkubW9ja0ltcGxlbWVudGF0aW9uKCh0ZXh0OiBzdHJpbmcpID0+IHRleHQpLFxuICAgICAgICBkZXRlY3RUaGlua2luZ1RhZ3M6IGplc3QuZm4oKS5tb2NrSW1wbGVtZW50YXRpb24oKHRleHQ6IHN0cmluZykgPT4gKHtcbiAgICAgICAgICAgIGhhc1RoaW5raW5nVGFnczogZmFsc2UsXG4gICAgICAgICAgICBjb250ZW50V2l0aG91dFRhZ3M6IHRleHQsXG4gICAgICAgICAgICBmb3JtYXQ6ICd0ZXh0J1xuICAgICAgICB9KSksXG4gICAgICAgIC8vINCc0L7QutGD0ZTQvNC+IHJlbmRlck1hcmtkb3duQ29udGVudCwg0YnQvtCxINCy0ZbQvSDQvdGW0YfQvtCz0L4g0L3QtSDRgNC+0LHQuNCyINGWINC90LUg0LLQuNC60LvQuNC60LDQsiDQv9C+0LzQuNC70L7QuiBET01cbiAgICAgICAgcmVuZGVyTWFya2Rvd25Db250ZW50OiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUodW5kZWZpbmVkKSwgXG4gICAgfTtcbn0pO1xuXG5cbmRlc2NyaWJlKCdBc3Npc3RhbnRNZXNzYWdlUmVuZGVyZXIucHJlcGFyZURpc3BsYXlDb250ZW50JywgKCkgPT4ge1xuICBjb25zdCBjcmVhdGVUZXN0TWVzc2FnZSA9IChjb250ZW50OiBzdHJpbmcsIHRvb2xfY2FsbHM/OiBUb29sQ2FsbFtdKTogQXNzaXN0YW50TWVzc2FnZSA9PiAoe1xuICAgIHJvbGU6IFwiYXNzaXN0YW50XCIsIC8vINCv0LLQvdC+IFwiYXNzaXN0YW50XCJcbiAgICBjb250ZW50OiBjb250ZW50LFxuICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKSwgXG4gICAgdG9vbF9jYWxsczogdG9vbF9jYWxsc1xuICB9KTtcblxuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAoUmVuZGVyZXJVdGlscy5kZWNvZGVIdG1sRW50aXRpZXMgYXMgamVzdC5Nb2NrKS5tb2NrQ2xlYXIoKS5tb2NrSW1wbGVtZW50YXRpb24oKHRleHQ6IHN0cmluZykgPT4gdGV4dCk7XG4gICAgKFJlbmRlcmVyVXRpbHMuZGV0ZWN0VGhpbmtpbmdUYWdzIGFzIGplc3QuTW9jaykubW9ja0NsZWFyKCkubW9ja0ltcGxlbWVudGF0aW9uKCh0ZXh0OiBzdHJpbmcpID0+ICh7XG4gICAgICAgIGhhc1RoaW5raW5nVGFnczogZmFsc2UsIGNvbnRlbnRXaXRob3V0VGFnczogdGV4dCwgZm9ybWF0OiAndGV4dCdcbiAgICB9KSk7XG4gICAgXG4gICAgbW9ja1BhcnNlQWxsVGV4dHVhbFRvb2xDYWxscy5tb2NrQ2xlYXIoKTtcbiAgICBcbiAgICBPYmplY3QudmFsdWVzKG1vY2tQbHVnaW5Mb2dnZXIpLmZvckVhY2gobW9ja0ZuID0+IG1vY2tGbi5tb2NrQ2xlYXIoKSk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgcmV0dXJuIG9yaWdpbmFsIGNvbnRlbnQgKGFmdGVyIHRoaW5rIHN0cmlwcGluZykgaWYgdG9vbCB1c2UgaXMgZGlzYWJsZWQnLCAoKSA9PiB7XG4gICAgY29uc3Qgb3JpZ2luYWxTZXR0aW5ncyA9IHsgLi4ubW9ja1BsdWdpbi5zZXR0aW5ncyB9O1xuICAgIG1vY2tQbHVnaW4uc2V0dGluZ3MuZW5hYmxlVG9vbFVzZSA9IGZhbHNlO1xuICAgIGNvbnN0IGNvbnRlbnQgPSBcIjx0aGluaz50aGlua2luZzwvdGhpbms+PHRvb2xfY2FsbD57XFxcIm5hbWVcXFwiOlxcXCJ0ZXN0XFxcIn08L3Rvb2xfY2FsbD4gU29tZSB0ZXh0LlwiO1xuICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVUZXN0TWVzc2FnZShjb250ZW50KTtcbiAgICBcbiAgICAoUmVuZGVyZXJVdGlscy5kZXRlY3RUaGlua2luZ1RhZ3MgYXMgamVzdC5Nb2NrKS5tb2NrUmV0dXJuVmFsdWUoe1xuICAgICAgICBoYXNUaGlua2luZ1RhZ3M6IHRydWUsIGNvbnRlbnRXaXRob3V0VGFnczogXCI8dG9vbF9jYWxsPntcXFwibmFtZVxcXCI6XFxcInRlc3RcXFwifTwvdG9vbF9jYWxsPiBTb21lIHRleHQuXCIsIGZvcm1hdDogJ3RleHQnXG4gICAgfSk7XG5cbiAgICBjb25zdCByZXN1bHQgPSBBc3Npc3RhbnRNZXNzYWdlUmVuZGVyZXIucHJlcGFyZURpc3BsYXlDb250ZW50KGNvbnRlbnQsIG1lc3NhZ2UsIG1vY2tQbHVnaW4sIG1vY2tWaWV3KTtcbiAgICBleHBlY3QocmVzdWx0KS50b0JlKFwiPHRvb2xfY2FsbD57XFxcIm5hbWVcXFwiOlxcXCJ0ZXN0XFxcIn08L3Rvb2xfY2FsbD4gU29tZSB0ZXh0LlwiKTtcbiAgICBtb2NrUGx1Z2luLnNldHRpbmdzLmVuYWJsZVRvb2xVc2UgPSBvcmlnaW5hbFNldHRpbmdzLmVuYWJsZVRvb2xVc2U7IFxuICB9KTtcblxuICBpdCgnc2hvdWxkIHJldHVybiBjb250ZW50IHdpdGhvdXQgdGhpbmsgdGFncyBpZiBubyB0b29sIGluZGljYXRvcnMnLCAoKSA9PiB7XG4gICAgY29uc3QgY29udGVudCA9IFwiPHRoaW5rPlRoaW5raW5nLi4uPC90aGluaz5KdXN0IGEgbm9ybWFsIHJlc3BvbnNlLlwiO1xuICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVUZXN0TWVzc2FnZShjb250ZW50KTtcbiAgICAoUmVuZGVyZXJVdGlscy5kZXRlY3RUaGlua2luZ1RhZ3MgYXMgamVzdC5Nb2NrKS5tb2NrUmV0dXJuVmFsdWUoe1xuICAgICAgICBoYXNUaGlua2luZ1RhZ3M6IHRydWUsIGNvbnRlbnRXaXRob3V0VGFnczogXCJKdXN0IGEgbm9ybWFsIHJlc3BvbnNlLlwiLCBmb3JtYXQ6ICd0ZXh0J1xuICAgIH0pO1xuICAgIG1vY2tQYXJzZUFsbFRleHR1YWxUb29sQ2FsbHMubW9ja1JldHVyblZhbHVlKFtdKTtcblxuICAgIGNvbnN0IHJlc3VsdCA9IEFzc2lzdGFudE1lc3NhZ2VSZW5kZXJlci5wcmVwYXJlRGlzcGxheUNvbnRlbnQoY29udGVudCwgbWVzc2FnZSwgbW9ja1BsdWdpbiwgbW9ja1ZpZXcpO1xuICAgIGV4cGVjdChyZXN1bHQpLnRvQmUoXCJKdXN0IGEgbm9ybWFsIHJlc3BvbnNlLlwiKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCByZXBsYWNlIHNpbmdsZSB0ZXh0dWFsIHRvb2wgY2FsbCBhbmQga2VlcCBhY2NvbXBhbnlpbmcgdGV4dCcsICgpID0+IHtcbiAgICBjb25zdCBvcmlnaW5hbENvbnRlbnQgPSBcIjx0aGluaz5MZXQgbWUgdXNlIGEgdG9vbC48L3RoaW5rPjx0b29sX2NhbGw+e1xcXCJuYW1lXFxcIjpcXFwibGlzdEZpbGVzXFxcIixcXFwiYXJndW1lbnRzXFxcIjp7fX08L3Rvb2xfY2FsbD4gSGVyZSBhcmUgdGhlIGZpbGVzLlwiO1xuICAgIGNvbnN0IGNvbnRlbnRXaXRob3V0VGhpbmsgPSBcIjx0b29sX2NhbGw+e1xcXCJuYW1lXFxcIjpcXFwibGlzdEZpbGVzXFxcIixcXFwiYXJndW1lbnRzXFxcIjp7fX08L3Rvb2xfY2FsbD4gSGVyZSBhcmUgdGhlIGZpbGVzLlwiO1xuICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVUZXN0TWVzc2FnZShvcmlnaW5hbENvbnRlbnQpO1xuXG4gICAgKFJlbmRlcmVyVXRpbHMuZGV0ZWN0VGhpbmtpbmdUYWdzIGFzIGplc3QuTW9jaykubW9ja1JldHVyblZhbHVlKHtcbiAgICAgICAgaGFzVGhpbmtpbmdUYWdzOiB0cnVlLCBjb250ZW50V2l0aG91dFRhZ3M6IGNvbnRlbnRXaXRob3V0VGhpbmssIGZvcm1hdDogJ3RleHQnXG4gICAgfSk7XG4gICAgbW9ja1BhcnNlQWxsVGV4dHVhbFRvb2xDYWxscy5tb2NrSW1wbGVtZW50YXRpb24oKHRleHQ6IHN0cmluZykgPT4ge1xuICAgICAgICBpZiAodGV4dCA9PT0gY29udGVudFdpdGhvdXRUaGluaykgeyBcbiAgICAgICAgICAgIHJldHVybiBbeyBuYW1lOiBcImxpc3RGaWxlc1wiLCBhcmd1bWVudHM6IHt9IH1dO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9KTtcblxuICAgIGNvbnN0IGV4cGVjdGVkID0gXCIoIFVzaW5nIHRvb2w6IGxpc3RGaWxlcy4uLiApXFxuXFxuSGVyZSBhcmUgdGhlIGZpbGVzLlwiO1xuICAgIGNvbnN0IHJlc3VsdCA9IEFzc2lzdGFudE1lc3NhZ2VSZW5kZXJlci5wcmVwYXJlRGlzcGxheUNvbnRlbnQob3JpZ2luYWxDb250ZW50LCBtZXNzYWdlLCBtb2NrUGx1Z2luLCBtb2NrVmlldyk7XG4gICAgZXhwZWN0KHJlc3VsdCkudG9CZShleHBlY3RlZCk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgZGlzcGxheSAoVXNpbmcgdG9vbC4uLikgaWYgb25seSB0ZXh0dWFsIHRvb2wgY2FsbCBpcyBwcmVzZW50JywgKCkgPT4ge1xuICAgIGNvbnN0IG9yaWdpbmFsQ29udGVudCA9IFwiPHRvb2xfY2FsbD57XFxcIm5hbWVcXFwiOlxcXCJyZWFkRmlsZVxcXCIsXFxcImFyZ3VtZW50c1xcXCI6e1xcXCJwYXRoXFxcIjpcXFwiZmlsZS50eHRcXFwifX08L3Rvb2xfY2FsbD5cIjtcbiAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlVGVzdE1lc3NhZ2Uob3JpZ2luYWxDb250ZW50KTtcblxuICAgIChSZW5kZXJlclV0aWxzLmRldGVjdFRoaW5raW5nVGFncyBhcyBqZXN0Lk1vY2spLm1vY2tSZXR1cm5WYWx1ZSh7IFxuICAgICAgICBoYXNUaGlua2luZ1RhZ3M6IGZhbHNlLCBjb250ZW50V2l0aG91dFRhZ3M6IG9yaWdpbmFsQ29udGVudCwgZm9ybWF0OiAndGV4dCdcbiAgICB9KTtcbiAgICBtb2NrUGFyc2VBbGxUZXh0dWFsVG9vbENhbGxzLm1vY2tSZXR1cm5WYWx1ZShbeyBuYW1lOiBcInJlYWRGaWxlXCIsIGFyZ3VtZW50czogeyBwYXRoOiBcImZpbGUudHh0XCIgfSB9XSk7XG4gICAgXG4gICAgY29uc3QgZXhwZWN0ZWQgPSBcIiggVXNpbmcgdG9vbDogcmVhZEZpbGUuLi4gKVwiO1xuICAgIGNvbnN0IHJlc3VsdCA9IEFzc2lzdGFudE1lc3NhZ2VSZW5kZXJlci5wcmVwYXJlRGlzcGxheUNvbnRlbnQob3JpZ2luYWxDb250ZW50LCBtZXNzYWdlLCBtb2NrUGx1Z2luLCBtb2NrVmlldyk7XG4gICAgZXhwZWN0KHJlc3VsdCkudG9CZShleHBlY3RlZCk7XG4gIH0pO1xuICBcbiAgaXQoJ3Nob3VsZCBoYW5kbGUgbXVsdGlwbGUgdGV4dHVhbCB0b29sIGNhbGxzIGNvcnJlY3RseScsICgpID0+IHtcbiAgICBjb25zdCBvcmlnaW5hbENvbnRlbnQgPSBcIjx0b29sX2NhbGw+e1xcXCJuYW1lXFxcIjpcXFwidG9vbDFcXFwifTwvdG9vbF9jYWxsPjx0b29sX2NhbGw+e1xcXCJuYW1lXFxcIjpcXFwidG9vbDJcXFwifTwvdG9vbF9jYWxsPlNvbWUgZmluYWwgdGV4dC5cIjtcbiAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlVGVzdE1lc3NhZ2Uob3JpZ2luYWxDb250ZW50KTtcbiAgICAoUmVuZGVyZXJVdGlscy5kZXRlY3RUaGlua2luZ1RhZ3MgYXMgamVzdC5Nb2NrKS5tb2NrUmV0dXJuVmFsdWUoe1xuICAgICAgICBoYXNUaGlua2luZ1RhZ3M6IGZhbHNlLCBjb250ZW50V2l0aG91dFRhZ3M6IG9yaWdpbmFsQ29udGVudCwgZm9ybWF0OiAndGV4dCdcbiAgICB9KTtcbiAgICBtb2NrUGFyc2VBbGxUZXh0dWFsVG9vbENhbGxzLm1vY2tSZXR1cm5WYWx1ZShbXG4gICAgICAgIHsgbmFtZTogXCJ0b29sMVwiLCBhcmd1bWVudHM6IHt9IH0sXG4gICAgICAgIHsgbmFtZTogXCJ0b29sMlwiLCBhcmd1bWVudHM6IHt9IH1cbiAgICBdKTtcblxuICAgIGNvbnN0IGV4cGVjdGVkID0gXCIoIFVzaW5nIHRvb2xzOiB0b29sMSwgdG9vbDIuLi4gKVxcblxcblNvbWUgZmluYWwgdGV4dC5cIjtcbiAgICBjb25zdCByZXN1bHQgPSBBc3Npc3RhbnRNZXNzYWdlUmVuZGVyZXIucHJlcGFyZURpc3BsYXlDb250ZW50KG9yaWdpbmFsQ29udGVudCwgbWVzc2FnZSwgbW9ja1BsdWdpbiwgbW9ja1ZpZXcpO1xuICAgIGV4cGVjdChyZXN1bHQpLnRvQmUoZXhwZWN0ZWQpO1xuICB9KTtcblxuICAvLyDQptC10Lkg0YLQtdGB0YIg0L/QtdGA0LXQstGW0YDRj9GUINC70L7Qs9GW0LrRgyBwcmVwYXJlRGlzcGxheUNvbnRlbnRcbiAgaXQoJ3Nob3VsZCBkaXNwbGF5IChBdHRlbXB0aW5nIHRvIHVzZSB0b29sKHMpLi4uKSBhbmQgbG9nIHdhcm4gZnJvbSBwcmVwYXJlRGlzcGxheUNvbnRlbnQgd2hlbiBuYW1lcyBub3QgZXh0cmFjdGVkJywgKCkgPT4ge1xuICAgIGNvbnN0IG9yaWdpbmFsQ29udGVudCA9IFwiPHRoaW5rPlRyeWluZzwvdGhpbms+PHRvb2xfY2FsbD5JTlZBTElEIEpTT048L3Rvb2xfY2FsbD5FeHRyYS5cIjtcbiAgICBjb25zdCBjb250ZW50V2l0aG91dFRoaW5rID0gXCI8dG9vbF9jYWxsPklOVkFMSUQgSlNPTjwvdG9vbF9jYWxsPkV4dHJhLlwiO1xuICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVUZXN0TWVzc2FnZShvcmlnaW5hbENvbnRlbnQpO1xuXG4gICAgKFJlbmRlcmVyVXRpbHMuZGV0ZWN0VGhpbmtpbmdUYWdzIGFzIGplc3QuTW9jaykubW9ja1JldHVyblZhbHVlKHtcbiAgICAgICAgaGFzVGhpbmtpbmdUYWdzOiB0cnVlLCBjb250ZW50V2l0aG91dFRhZ3M6IGNvbnRlbnRXaXRob3V0VGhpbmssIGZvcm1hdDogJ3RleHQnXG4gICAgfSk7XG4gICAgLy8g0KHQuNC80YPQu9GO0ZTQvNC+LCDRidC+IHBhcnNlQWxsVGV4dHVhbFRvb2xDYWxscyAo0LLQuNC60LvQuNC60LDQvdC40Lkg0LcgcHJlcGFyZURpc3BsYXlDb250ZW50KSDQvdGW0YfQvtCz0L4g0L3QtSDQt9C90LDRhdC+0LTQuNGC0YxcbiAgICBtb2NrUGFyc2VBbGxUZXh0dWFsVG9vbENhbGxzLm1vY2tSZXR1cm5WYWx1ZShbXSk7IFxuICAgIFxuICAgIGNvbnN0IGV4cGVjdGVkRGlzcGxheUNvbnRlbnQgPSBcIiggQXR0ZW1wdGluZyB0byB1c2UgdG9vbChzKS4uLiApXFxuXFxuRXh0cmEuXCI7XG4gICAgY29uc3QgcmVzdWx0ID0gQXNzaXN0YW50TWVzc2FnZVJlbmRlcmVyLnByZXBhcmVEaXNwbGF5Q29udGVudChvcmlnaW5hbENvbnRlbnQsIG1lc3NhZ2UsIG1vY2tQbHVnaW4sIG1vY2tWaWV3KTtcbiAgICBleHBlY3QocmVzdWx0KS50b0JlKGV4cGVjdGVkRGlzcGxheUNvbnRlbnQpO1xuICAgIFxuICAgIC8vINCf0LXRgNC10LLRltGA0Y/RlNC80L4sINGJ0L4gbW9ja1BsdWdpbkxvZ2dlci53YXJuINCx0YPQsiDQstC40LrQu9C40LrQsNC90LjQuSDQtyDQn9Ce0JLQhtCU0J7QnNCb0JXQndCd0K/QnCDQktCG0JQgUFJFUEFSRURJU1BMQVlDT05URU5UXG4gICAgY29uc3Qgd2FybkNhbGxzQXJncyA9IChtb2NrUGx1Z2luTG9nZ2VyLndhcm4gYXMgamVzdC5Nb2NrKS5tb2NrLmNhbGxzO1xuICAgIGNvbnN0IHByZXBhcmVEaXNwbGF5Q29udGVudFdhcm4gPSB3YXJuQ2FsbHNBcmdzLmZpbmQoYXJncyA9PiBcbiAgICAgICAgdHlwZW9mIGFyZ3NbMF0gPT09ICdzdHJpbmcnICYmIFxuICAgICAgICBhcmdzWzBdLmluY2x1ZGVzKFwiW0FSZW5kZXIgU1RBVElDIFBSRVBdXCIpICYmIC8vINCG0LTQtdC90YLQuNGE0ZbQutCw0YLQvtGAINC70L7Qs9GDINC3IHByZXBhcmVEaXNwbGF5Q29udGVudFxuICAgICAgICBhcmdzWzBdLmluY2x1ZGVzKFwiVG9vbCBjYWxsIGluZGljYXRvcnMgd2VyZSBwcmVzZW50LCBidXQgTk8gdG9vbCBuYW1lcyB3ZXJlIGV4dHJhY3RlZC4gRGlzcGxheWluZyBnZW5lcmljICdBdHRlbXB0aW5nIHRvIHVzZS4uLicgbWVzc2FnZS5cIilcbiAgICApO1xuICAgIGV4cGVjdChwcmVwYXJlRGlzcGxheUNvbnRlbnRXYXJuKS50b0JlRGVmaW5lZCgpO1xuICB9KTtcbiAgXG4gIGl0KCdzaG91bGQgY29ycmVjdGx5IHByb2Nlc3MgbmF0aXZlIHRvb2xfY2FsbHMgd2l0aCBhY2NvbXBhbnlpbmcgY29udGVudCcsICgpID0+IHtcbiAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlVGVzdE1lc3NhZ2UoXG4gICAgICAgIFwiPHRoaW5rPkxldCBtZSB0aGluay48L3RoaW5rPk9rYXksIEkgbmVlZCB0byB1c2UgYSB0b29sLlwiLFxuICAgICAgICBbe3R5cGU6IFwiZnVuY3Rpb25cIiwgaWQ6IFwiY2FsbDFcIiwgZnVuY3Rpb246IHtuYW1lOiBcImdldFdlYXRoZXJcIiwgYXJndW1lbnRzOiBcInt9XCJ9fSBhcyBUb29sQ2FsbF0gXG4gICAgKTtcbiAgICAoUmVuZGVyZXJVdGlscy5kZXRlY3RUaGlua2luZ1RhZ3MgYXMgamVzdC5Nb2NrKS5tb2NrUmV0dXJuVmFsdWUoe1xuICAgICAgICBoYXNUaGlua2luZ1RhZ3M6IHRydWUsIGNvbnRlbnRXaXRob3V0VGFnczogXCJPa2F5LCBJIG5lZWQgdG8gdXNlIGEgdG9vbC5cIiwgZm9ybWF0OiAndGV4dCdcbiAgICB9KTtcbiAgICBtb2NrUGFyc2VBbGxUZXh0dWFsVG9vbENhbGxzLm1vY2tSZXR1cm5WYWx1ZShbXSk7IFxuXG4gICAgY29uc3QgZXhwZWN0ZWQgPSBcIiggVXNpbmcgdG9vbDogZ2V0V2VhdGhlci4uLiApXFxuXFxuT2theSwgSSBuZWVkIHRvIHVzZSBhIHRvb2wuXCI7XG4gICAgY29uc3QgcmVzdWx0ID0gQXNzaXN0YW50TWVzc2FnZVJlbmRlcmVyLnByZXBhcmVEaXNwbGF5Q29udGVudChtZXNzYWdlLmNvbnRlbnQhLCBtZXNzYWdlLCBtb2NrUGx1Z2luLCBtb2NrVmlldyk7XG4gICAgZXhwZWN0KHJlc3VsdCkudG9CZShleHBlY3RlZCk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgY29ycmVjdGx5IHByb2Nlc3MgbmF0aXZlIHRvb2xfY2FsbHMgd2l0aCBlbXB0eSBzdHJpbmcgY29udGVudCcsICgpID0+IHtcbiAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlVGVzdE1lc3NhZ2UoXG4gICAgICAgIFwiXCIsIFxuICAgICAgICBbe3R5cGU6IFwiZnVuY3Rpb25cIiwgaWQ6IFwiY2FsbDFcIiwgZnVuY3Rpb246IHtuYW1lOiBcImdldFNldHRpbmdzXCIsIGFyZ3VtZW50czogXCJ7fVwifX0gYXMgVG9vbENhbGxdIFxuICAgICk7XG4gICAgKFJlbmRlcmVyVXRpbHMuZGV0ZWN0VGhpbmtpbmdUYWdzIGFzIGplc3QuTW9jaykubW9ja0ltcGxlbWVudGF0aW9uKCh0ZXh0OiBzdHJpbmcpID0+ICh7XG4gICAgICAgIGhhc1RoaW5raW5nVGFnczogZmFsc2UsIGNvbnRlbnRXaXRob3V0VGFnczogdGV4dCB8fCBcIlwiLCBmb3JtYXQ6ICd0ZXh0J1xuICAgIH0pKTtcbiAgICBtb2NrUGFyc2VBbGxUZXh0dWFsVG9vbENhbGxzLm1vY2tSZXR1cm5WYWx1ZShbXSk7XG5cbiAgICBjb25zdCBleHBlY3RlZCA9IFwiKCBVc2luZyB0b29sOiBnZXRTZXR0aW5ncy4uLiApXCI7XG4gICAgY29uc3QgcmVzdWx0ID0gQXNzaXN0YW50TWVzc2FnZVJlbmRlcmVyLnByZXBhcmVEaXNwbGF5Q29udGVudChtZXNzYWdlLmNvbnRlbnQgfHwgXCJcIiwgbWVzc2FnZSwgbW9ja1BsdWdpbiwgbW9ja1ZpZXcpO1xuICAgIGV4cGVjdChyZXN1bHQpLnRvQmUoZXhwZWN0ZWQpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGNvcnJlY3RseSBwcm9jZXNzIG5hdGl2ZSB0b29sX2NhbGxzIHdpdGggbnVsbCBjb250ZW50JywgKCkgPT4ge1xuICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVUZXN0TWVzc2FnZShcbiAgICAgICAgXCJcIiwgXG4gICAgICAgIFt7dHlwZTogXCJmdW5jdGlvblwiLCBpZDogXCJjYWxsMVwiLCBmdW5jdGlvbjoge25hbWU6IFwiZ2V0U2V0dGluZ3NcIiwgYXJndW1lbnRzOiBcInt9XCJ9fSBhcyBUb29sQ2FsbF0gXG4gICAgKTtcbiAgICAgKFJlbmRlcmVyVXRpbHMuZGV0ZWN0VGhpbmtpbmdUYWdzIGFzIGplc3QuTW9jaykubW9ja0ltcGxlbWVudGF0aW9uKCh0ZXh0OiBzdHJpbmcpID0+ICh7XG4gICAgICAgIGhhc1RoaW5raW5nVGFnczogZmFsc2UsIGNvbnRlbnRXaXRob3V0VGFnczogdGV4dCB8fCBcIlwiLCBmb3JtYXQ6ICd0ZXh0JyBcbiAgICB9KSk7XG4gICAgbW9ja1BhcnNlQWxsVGV4dHVhbFRvb2xDYWxscy5tb2NrUmV0dXJuVmFsdWUoW10pO1xuXG4gICAgY29uc3QgZXhwZWN0ZWQgPSBcIiggVXNpbmcgdG9vbDogZ2V0U2V0dGluZ3MuLi4gKVwiO1xuICAgIGNvbnN0IHJlc3VsdCA9IEFzc2lzdGFudE1lc3NhZ2VSZW5kZXJlci5wcmVwYXJlRGlzcGxheUNvbnRlbnQobWVzc2FnZS5jb250ZW50IHx8IFwiXCIsIG1lc3NhZ2UsIG1vY2tQbHVnaW4sIG1vY2tWaWV3KTtcbiAgICBleHBlY3QocmVzdWx0KS50b0JlKGV4cGVjdGVkKTtcbiAgfSk7XG59KTsiXX0=