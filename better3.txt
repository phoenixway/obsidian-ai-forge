import {
    setIcon,
    MarkdownRenderer
} from "obsidian";
import OllamaPlugin from "./main";
import { OllamaView } from "./ollamaView";

export enum MessageType {
    USER = "user",
    ASSISTANT = "assistant",
    ERROR = "error",
    SYSTEM = "system"
}

export interface Message {
    role: MessageType;
    content: string;
    timestamp: Date;
}

export interface RequestOptions {
    num_ctx?: number;
}

export interface OllamaRequestBody {
    model: string;
    prompt: string;
    stream: boolean;
    temperature: number;
    system?: string;
    options?: RequestOptions;
}

export class MessageService {
    private plugin: OllamaPlugin;
    private view: OllamaView | null = null;
    private messages: Message[] = [];
    private isProcessing = false;
    private messagesPairCount = 0;

    constructor(plugin: OllamaPlugin) {
        this.plugin = plugin;
    }

    public setView(view: OllamaView): void {
        this.view = view;
    }

    public async loadMessageHistory(): Promise<void> {
        if (!this.view) return;

        try {
            const history = await this.plugin.loadMessageHistory();
            this.messages = Array.isArray(history)
                ? history.map(msg => ({ ...msg, timestamp: new Date(msg.timestamp) }))
                : [];

            this.view.clearChatContainer();
            this.messages.forEach(msg => this.renderMessage(msg));
            this.view.scrollToBottom();
            this.initializeThinkingBlocks();
        } catch (error) {
            console.error("Error loading history:", error);
            this.view.showEmptyHistory();
        }
    }

    public async saveMessageHistory(): Promise<void> {
        if (!this.messages.length) return;

        try {
            await this.plugin.saveMessageHistory(JSON.stringify(
                this.messages.map(msg => ({
                    role: msg.role,
                    content: msg.content,
                    timestamp: msg.timestamp.toISOString()
                }))
            ));
        } catch (error) {
            console.error("Error saving history:", error);
        }
    }

    public async sendMessage(content: string): Promise<void> {
        if (this.isProcessing || !content.trim() || !this.view) return;
        this.view.clearInputField();
        this.view.hideEmptyState();
        this.addMessage(MessageType.USER, content);
        await this.processWithOllama(content);
    }

    public addMessage(role: MessageType, content: string): void {
        const message = { role, content, timestamp: new Date() };
        this.messages.push(message);
        this.renderMessage(message);
        this.trackMessagePairs(role);
        this.saveMessageHistory();
        setTimeout(() => this.view?.scrollToBottom(), 100);
    }

    public clearChatMessages(): void {
        this.messages = [];
        this.view?.clearChatContainer();
        this.view?.showEmptyHistory();
    }

    private renderMessage(message: Message): void {
        if (!this.view) return;

        const messageGroup = this.getOrCreateMessageGroup(message);
        const messageEl = this.view.createMessageElement(messageGroup, this.getMessageClass(message));
        const contentContainer = this.view.createContentContainer(messageEl);
        const contentEl = this.view.createContentElement(contentContainer);

        this.populateMessageContent(message, contentEl);
        if (message.role !== MessageType.SYSTEM) this.createCopyButton(contentContainer, message);
        if (this.isLastMessageInGroup(message)) this.addTimestamp(messageEl, message.timestamp);
    }

    private async processWithOllama(content: string): Promise<void> {
        if (!this.view) return;

        this.isProcessing = true;
        const loadingMessageEl = this.view.addLoadingMessage();

        try {
            const formattedPrompt = await this.plugin.promptService.prepareFullPrompt(
                content, this.messages.length <= 1
            );

            const requestBody: OllamaRequestBody = {
                model: this.plugin.settings.modelName,
                prompt: formattedPrompt,
                stream: false,
                temperature: this.plugin.settings.temperature || 0.2,
                options: { num_ctx: this.plugin.settings.contextWindow || 8192 }
            };

            if (this.shouldUseSystemPrompt()) {
                requestBody.system = this.plugin.promptService.getSystemPrompt();
            }

            const data = await this.plugin.apiService.generateResponse(requestBody);

            this.removeLoadingMessage(loadingMessageEl);
            this.addMessage(MessageType.ASSISTANT, data.response);
            this.initializeThinkingBlocks();
        } catch (error) {
            this.handleProcessingError(error, loadingMessageEl);
        } finally {
            this.isProcessing = false;
        }
    }

    private shouldUseSystemPrompt(): boolean {
        const { followRole, systemPromptInterval = 0 } = this.plugin.settings;
        return followRole && (systemPromptInterval === 0 || this.messagesPairCount % systemPromptInterval === 0);
    }

    private handleProcessingError(error: any, loadingMessageEl: HTMLElement): void {
        console.error("Processing error:", error);
        this.removeLoadingMessage(loadingMessageEl);
        this.addMessage(MessageType.ERROR, `Connection error: ${error?.message || "Unknown error"}`);
    }

    private getOrCreateMessageGroup(message: Message): HTMLElement {
        const lastGroup = this.view?.getChatContainer().lastElementChild as HTMLElement;
        if (this.isFirstMessageInGroup(message)) {
            return this.view!.createGroupElement(this.getMessageGroupClass(message));
        }
        return lastGroup;
    }

    private getMessageClass(message: Message): string {
        const baseClass = "message bubble";
        return baseClass + (message.role === MessageType.USER ? " user-bubble" : " ollama-bubble");
    }

    private getMessageGroupClass(message: Message): string {
        return `message-group ${message.role.toLowerCase()}-message-group`;
    }

    private populateMessageContent(message: Message, contentEl: HTMLElement): void {
        if (message.role === MessageType.ASSISTANT) {
            this.renderMarkdown(message.content, contentEl);
        } else {
            contentEl.textContent = message.content;
        }
    }

    private createCopyButton(container: HTMLElement, message: Message): void {
        const button = container.createEl("button", { cls: "copy-button", attr: { title: "Copy" } });
        setIcon(button, "copy");

        button.addEventListener("click", () => {
            navigator.clipboard.writeText(message.content);
            button.setText("Copied!");
            setTimeout(() => { button.empty(); setIcon(button, "copy"); }, 2000);
        });
    }

    private addTimestamp(element: HTMLElement, timestamp: Date): void {
        element.createDiv({ cls: "message-timestamp", text: timestamp.toLocaleTimeString() });
    }

    private trackMessagePairs(role: MessageType): void {
        if (role === MessageType.ASSISTANT && this.messages.length >= 2) {
            if (this.messages[this.messages.length - 2].role === MessageType.USER) {
                this.messagesPairCount++;
            }
        }
    }

    private removeLoadingMessage(el: HTMLElement): void {
        el?.parentNode?.removeChild(el);
    }

    private isFirstMessageInGroup(message: Message): boolean {
        return this.messages.indexOf(message) === 0 || this.messages[this.messages.indexOf(message) - 1].role !== message.role;
    }

    private isLastMessageInGroup(message: Message): boolean {
        return this.messages.indexOf(message) === this.messages.length - 1;
    }
}
