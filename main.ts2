// main.ts
import {
  Plugin,
  WorkspaceLeaf,
  Notice,
  normalizePath,
  TFile,
  TFolder,
  Vault,
  DataAdapter,
  debounce // Імпортуємо debounce
} from "obsidian";
import { OllamaView, VIEW_TYPE_OLLAMA, MessageRole } from "./OllamaView";
import { OllamaSettingTab, DEFAULT_SETTINGS, OllamaPluginSettings } from "./settings";
import { RagService } from "./ragService";
import { OllamaService } from "./OllamaService"; // Перейменований ApiService
import { PromptService } from './PromptService';
// MessageService більше не існує
import { ChatManager } from "./ChatManager"; // Новий клас
import { RoleInfo } from "./ChatManager"; // Інтерфейс RoleInfo тепер може бути тут або в ChatManager
import { Chat, ChatMetadata } from "./Chat"; // Імпортуємо Chat та його типи
import { exec, ExecException } from 'child_process'; // Для виконання системних команд
import * as path from 'path'; // Для роботи зі шляхами

const SESSIONS_INDEX_KEY = 'chatSessionsIndex_v1'; // Key for storing index in plugin data
const ACTIVE_SESSION_ID_KEY = 'activeChatSessionId_v1'; // Key for storing active ID


// Інтерфейси (можна винести в types.ts)
interface RAGDocument { id: string; content: string; metadata: { source: string; path: string; }; }
interface Embedding { documentId: string; vector: number[]; }

export default class OllamaPlugin extends Plugin {
  settings: OllamaPluginSettings;
  settingTab: OllamaSettingTab;
  view: OllamaView | null = null;

  // --- Нові сервіси та менеджер ---
  ragService!: RagService; // Додаємо '!' для позначки, що буде ініціалізовано в onload
  ollamaService!: OllamaService; // Перейменований ApiService
  promptService!: PromptService;
  chatManager!: ChatManager; // Новий менеджер чатів
  // messageService: MessageService; // ВИДАЛЕНО

  // ---------------------------------

  private eventHandlers: Record<string, Array<(data: any) => any>> = {};
  private roleListCache: RoleInfo[] | null = null;
  private roleCacheClearTimeout: NodeJS.Timeout | null = null;
  private indexUpdateTimeout: NodeJS.Timeout | null = null;

  // RAG data (залишаємо для прикладу, але краще інкапсулювати в RagService)
  documents: RAGDocument[] = [];
  embeddings: Embedding[] = [];

  // --- Event Emitter Methods ---
  on(event: string, callback: (data: any) => any): () => void { if (!this.eventHandlers[event]) this.eventHandlers[event] = []; this.eventHandlers[event].push(callback); return () => { this.eventHandlers[event] = this.eventHandlers[event]?.filter(h => h !== callback); if (this.eventHandlers[event]?.length === 0) { delete this.eventHandlers[event]; } }; }
  emit(event: string, data?: any): void { const h = this.eventHandlers[event]; if (h) h.slice().forEach(handler => { try { handler(data); } catch (e) { console.error(`[OllamaPlugin] Error in event handler for ${event}:`, e); } }); }


  async onload() {
    console.log("Loading Ollama Plugin (MVC Arch)...");
    await this.loadSettings();

    // Ініціалізація (порядок може бути важливим)
    this.ollamaService = new OllamaService(this);
    this.promptService = new PromptService(this);
    this.ragService = new RagService(this);
    this.chatManager = new ChatManager(this); // Ініціалізуємо ChatManager

    await this.chatManager.initialize(); // Завантажуємо індекс чатів та активний ID

    // Реєстрація View
    this.registerView(VIEW_TYPE_OLLAMA, (leaf) => {
      console.log("OllamaPlugin: Registering view.");
      this.view = new OllamaView(leaf, this);
      // this.ollamaService.setOllamaViewRef(this.view); 
      return this.view;
    });

    // Обробник помилок з'єднання (з OllamaService)
    this.ollamaService.on('connection-error', (error) => { console.error("[OllamaPlugin] Connection error event:", error); this.emit('ollama-connection-error', error.message); if (!this.view) { new Notice(`Failed to connect to Ollama: ${error.message}`); } });

    // --- Реєстрація обробників подій для View ---
    this.register(this.on('ollama-connection-error', (message) => { this.view?.addMessageToDisplay?.('error', message, new Date()); }));
    this.register(this.on('active-chat-changed', this.handleActiveChatChangedLocally));

    this.register(this.on('chat-list-updated', () => {
      // View оновить меню, коли його відкриють, або якщо активний чат змінився (через 'active-chat-changed')
      console.log("[OllamaPlugin] Event 'chat-list-updated' received.");
      // if (this.view?.isMenuOpen()) {
      //     // this.view?.renderModelList(); // НЕ ВИКЛИКАЄМО
      //     // this.view?.renderRoleList(); // НЕ ВИКЛИКАЄМО
      // }
    }));
    this.register(this.on('settings-updated', () => {
      // View оновить меню, коли його відкриють. Зміна URL обробляється в updateOllamaServiceConfig.
      console.log("[OllamaPlugin] Event 'settings-updated' received.");
      // if(this.view?.isMenuOpen()){
      //    // this.view.renderModelList(); // НЕ ВИКЛИКАЄМО
      //    // this.view.renderRoleList(); // НЕ ВИКЛИКАЄМО
      // }
    }));

    // this.register(this.on('message-added', (data) => { this.view?.handleMessageAdded?.(data); })); // View має слухати це
    // this.register(this.on('messages-cleared', (chatId) => { this.view?.handleMessagesCleared?.(chatId); })); // View має слухати це
    // this.register(this.on('roles-updated', () => { if (this.view?.isMenuOpen()) { this.view?.renderRoleList(); } })); // View слухає це
    // this.register(this.on('model-changed', (modelName) => { this.view?.handleModelChange?.(modelName); })); // View слухає це
    // this.register(this.on('role-changed', (roleName) => { this.view?.handleRoleChange?.(roleName); })); // View слухає це



    // this.register(this.on('roles-updated', () => { if (this.view?.isMenuOpen()) { this.view?.renderRoleList(); } }));


    // Ribbon & Commands
    this.addRibbonIcon("message-square", "Open Ollama Chat", () => { this.activateView(); });
    this.addCommand({ id: "open-ollama-view", name: "Open Ollama Chat", callback: () => { this.activateView(); }, });
    this.addCommand({ id: "index-rag-documents", name: "Index documents for RAG", callback: async () => { await this.ragService.indexDocuments(); }, });
    this.addCommand({ id: "clear-ollama-history", name: "Clear Active Chat History", callback: async () => { await this.chatManager.clearActiveChatMessages(); }, }); // Викликаємо ChatManager
    this.addCommand({ id: "refresh-ollama-roles", name: "Refresh Ollama Roles List", callback: async () => { await this.listRoleFiles(true); this.emit('roles-updated'); new Notice("Role list refreshed."); } });
    this.addCommand({ id: "ollama-new-chat", name: "Ollama: New Chat", callback: async () => { const newChat = await this.chatManager.createNewChat(); if (newChat) { await this.activateView(); new Notice(`Created new chat: ${newChat.metadata.name}`); } } });
    this.addCommand({ id: "ollama-switch-chat", name: "Ollama: Switch Chat", callback: async () => { await this.showChatSwitcher(); } }); // Потребує UI
    this.addCommand({ id: "ollama-rename-chat", name: "Ollama: Rename Active Chat", callback: async () => { await this.renameActiveChat(); } });
    this.addCommand({ id: "ollama-delete-chat", name: "Ollama: Delete Active Chat", callback: async () => { await this.deleteActiveChatWithConfirmation(); } });

    // Settings Tab
    this.settingTab = new OllamaSettingTab(this.app, this);
    this.addSettingTab(this.settingTab);

    // Layout Ready
    this.app.workspace.onLayoutReady(async () => { if (this.settings.ragEnabled) { setTimeout(() => { this.ragService?.indexDocuments(); }, 5000); } });

    // File Watcher Setup
    const debouncedRoleClear = debounce(() => { console.log("[Ollama] Role change detected, clearing cache & emitting."); this.roleListCache = null; this.emit('roles-updated'); }, 1500, true);
    const fileChangeHandler = (file: TFile | TFolder | null) => { if (!file) return; this.handleFileChange(file.path, debouncedRoleClear); };
    const handleModify = (file: TFile) => fileChangeHandler(file);
    const handleDelete = (file: TFile | TFolder) => fileChangeHandler(file);
    const handleRename = (file: TFile | TFolder, oldPath: string) => { fileChangeHandler(file); this.handleFileChange(oldPath, debouncedRoleClear); };
    const handleCreate = (file: TFile | TFolder) => fileChangeHandler(file);
    this.registerEvent(this.app.vault.on("modify", handleModify)); this.registerEvent(this.app.vault.on("delete", handleDelete)); this.registerEvent(this.app.vault.on("rename", handleRename)); this.registerEvent(this.app.vault.on("create", handleCreate));
  }

  // Обробник змін файлів
  private handleFileChange(changedPath: string, debouncedRoleClear: () => void) {
    // ... (логіка handleFileChange без змін) ...
    const normPath = normalizePath(changedPath); const userR = this.settings.userRolesFolderPath ? normalizePath(this.settings.userRolesFolderPath) : null; const defaultR = normalizePath(this.manifest.dir + '/roles'); if (((userR && normPath.startsWith(userR + '/')) || normPath.startsWith(defaultR + '/')) && normPath.toLowerCase().endsWith('.md')) { debouncedRoleClear(); } const ragF = this.settings.ragFolderPath ? normalizePath(this.settings.ragFolderPath) : null; if (this.settings.ragEnabled && ragF && normPath.startsWith(ragF + '/')) { this.debounceIndexUpdate(); }
  }

  onunload() {
    console.log("Unloading Ollama Plugin...");
    this.app.workspace.getLeavesOfType(VIEW_TYPE_OLLAMA).forEach(leaf => leaf.detach());
    if (this.indexUpdateTimeout) clearTimeout(this.indexUpdateTimeout);
    if (this.roleCacheClearTimeout) clearTimeout(this.roleCacheClearTimeout);
    this.promptService?.clearModelDetailsCache?.();
    this.promptService?.clearRoleCache?.(); // Очищаємо кеш ролей
    this.roleListCache = null;
  }

  // Оновлення базового URL для OllamaService
  updateOllamaServiceUrl() {
    if (this.ollamaService) {
      // OllamaService тепер читає URL з settings напряму, але ми можемо очистити кеш моделей
      console.log("[OllamaPlugin] Server URL changed, clearing model details cache.");
      this.promptService?.clearModelDetailsCache();
    }
  }

  private debounceIndexUpdate() { /* ... */ if (this.indexUpdateTimeout) clearTimeout(this.indexUpdateTimeout); this.indexUpdateTimeout = setTimeout(() => { console.log("RAG index update."); this.ragService?.indexDocuments(); this.indexUpdateTimeout = null; }, 30000); }

  async activateView() {
    const { workspace } = this.app;
    let leaf: WorkspaceLeaf | null = null;
    const existingLeaves = workspace.getLeavesOfType(VIEW_TYPE_OLLAMA);

    if (existingLeaves.length > 0) {
      leaf = existingLeaves[0];
    } else {
      leaf = workspace.getRightLeaf(false) ?? workspace.getLeaf(true);
      if (leaf) { await leaf.setViewState({ type: VIEW_TYPE_OLLAMA, active: true }); }
      else { console.error("Failed leaf create."); new Notice("Failed to open view."); return; }
    }

    if (leaf) {
      workspace.revealLeaf(leaf);
      const viewInstance = leaf.view;
      if (viewInstance instanceof OllamaView) {
        this.view = viewInstance; // Оновлюємо посилання на активний View
        // Немає потреби передавати View в сервіси напряму тут,
        // зв'язок іде через події або ChatManager/Plugin
        // --- ВИДАЛІТЬ АБО ЗАКОМЕНТУЙТЕ ЦЕЙ РЯДОК ---
        // this.ollamaService?.setOllamaViewRef?.(this.view); // НЕ ПОТРІБНО
        // -----------------------------------------
        console.log("View activated.");
      } else { console.error("View not OllamaView?"); }
    }
  }
  // --- Settings Management ---
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
    // Migration: customRoleFilePath -> selectedRolePath
    if ((this.settings as any).customRoleFilePath !== undefined && this.settings.selectedRolePath === undefined) {
      console.log("[Ollama] Migrating settings: 'customRoleFilePath' -> 'selectedRolePath'");
      this.settings.selectedRolePath = (this.settings as any).customRoleFilePath || ""; // Assign or default to empty
    }
    // Ensure removed keys are deleted after merging defaults and loaded data
    delete (this.settings as any).customRoleFilePath;
    delete (this.settings as any).useDefaultRoleDefinition;
  }

  async saveSettings() {
    // Ensure removed keys don't get saved
    delete (this.settings as any).customRoleFilePath;
    delete (this.settings as any).useDefaultRoleDefinition;
    await this.saveData(this.settings);
    this.updateOllamaServiceUrl(); // Update URL/clear cache in service
    this.roleListCache = null; // Clear role cache (folder path might change)
    this.promptService?.clearRoleCache?.(); // Clear role content cache
    console.log("OllamaPlugin: Settings saved.");
    this.emit('settings-updated');
  }

  // --- Data Helpers for ChatManager (using plugin's data persistence) ---
  async saveDataKey(key: string, value: any): Promise<void> {
    const data = await this.loadData() || {}; data[key] = value; await this.saveData(data);
  }
  async loadDataKey(key: string): Promise<any> {
    const data = await this.loadData() || {}; return data[key];
  }

  // --- History Persistence (DELEGATED) ---
  // saveMessageHistory REMOVED - Handled by ChatManager/Chat
  // loadMessageHistory REMOVED - Handled by ChatManager/Chat
  // clearMessageHistory MODIFIED - Calls ChatManager
  async clearMessageHistory() {
    console.log("[OllamaPlugin] Clearing active chat messages via ChatManager.");
    await this.chatManager.clearActiveChatMessages();
    // Notice тепер обробляється через подію messages-cleared у View
  }


  // --- List Role Files Method --- (залишається тут)
  async listRoleFiles(forceRefresh: boolean = false): Promise<RoleInfo[]> {
    if (this.roleListCache && !forceRefresh) return this.roleListCache;
    console.log("[Ollama] Fetching/caching role list...");
    const roles: RoleInfo[] = []; const adapter = this.app.vault.adapter;
    const defaultRolesDir = normalizePath(this.manifest.dir + '/roles');
    try { /* ... логіка читання default roles ... */ if (await adapter.exists(defaultRolesDir) && (await adapter.stat(defaultRolesDir))?.type === 'folder') { const files = await adapter.list(defaultRolesDir); for (const p of files.files) { if (p.toLowerCase().endsWith('.md')) { const f = path.basename(p); const n = f.substring(0, f.length - 3); roles.push({ name: n, path: p, isCustom: false }); } } } } catch (e) { console.error("Err list default roles:", e); }
    const userRolesDir = this.settings.userRolesFolderPath?.trim();
    if (userRolesDir) { const normDir = normalizePath(userRolesDir); try { /* ... логіка читання user roles ... */ if (await adapter.exists(normDir) && (await adapter.stat(normDir))?.type === 'folder') { const files = await adapter.list(normDir); const names = new Set(roles.map(r => r.name)); for (const p of files.files) { if (p.toLowerCase().endsWith('.md')) { const f = path.basename(p); const n = f.substring(0, f.length - 3); if (!names.has(n)) { roles.push({ name: n, path: p, isCustom: true }); names.add(n); } else {/* skip duplicate */ } } } } else { console.warn("User roles folder invalid:", normDir); } } catch (e) { console.error("Err list user roles:", e); } }
    roles.sort((a, b) => a.name.localeCompare(b.name)); this.roleListCache = roles; console.log(`[Ollama] Found ${roles.length} roles.`); return roles;
  }

  // --- Execute System Command Method --- (залишається тут)
  async executeSystemCommand(command: string): Promise<{ stdout: string; stderr: string; error: ExecException | null }> {
    console.log(`[Ollama] Executing: ${command}`); if (!command?.trim()) { console.warn("Empty command."); return { stdout: "", stderr: "Empty command.", error: new Error("Empty command") as ExecException }; }
    // @ts-ignore
    if (typeof process === 'undefined' || !process?.versions?.node) { console.error("Node.js required."); new Notice("Cannot execute system commands."); return { stdout: "", stderr: "Node.js required.", error: new Error("Node.js required") as ExecException }; }
    return new Promise((resolve) => { exec(command, (error, stdout, stderr) => { if (error) console.error(`Exec error: ${error}`); if (stderr) console.error(`Exec stderr: ${stderr}`); if (stdout) console.log(`Exec stdout: ${stdout}`); resolve({ stdout: stdout.toString(), stderr: stderr.toString(), error }); }); });
  }

  // --- Session Management Command Helpers ---
  async showChatSwitcher() {
    const chats = this.chatManager.listAvailableChats();
    if (chats.length === 0) {
      new Notice("No chat sessions available. Create one first.");
      return;
    }

    // Прибираємо непрацюючий псевдокод з getSuggestModals
    // TODO: Implement a custom Suggester Modal extending FuzzySuggestModal<ChatMetadata>
    // For now, just show a notice.
    new Notice("Switch Chat UI needs implementation (requires custom Suggester Modal).");

    // --- Приклад, ЯК ЦЕ МОГЛО Б ВИГЛЯДАТИ з кастомним Suggester ---
    // const modal = new ChatSwitcherModal(this.app, chats, async (selectedChat) => {
    //     if (selectedChat) {
    //         await this.chatManager.setActiveChat(selectedChat.id);
    //     }
    // });
    // modal.open();
    // --------------------------------------------------------------
  }

  async renameActiveChat() {
    const activeChat = await this.chatManager.getActiveChat();
    if (!activeChat) {
      new Notice("No active chat to rename.");
      return;
    }
    const oldName = activeChat.metadata.name;
    const newName = prompt(`Enter new name for chat "${oldName}":`, oldName); // Use simple prompt

    if (newName && newName.trim() !== "" && newName !== oldName) {
      const success = await this.chatManager.renameChat(activeChat.metadata.id, newName);
      if (success) {
        new Notice(`Chat renamed to "${newName.trim()}"`);
      } else {
        new Notice("Failed to rename chat.");
      }
    }
  }

  async deleteActiveChatWithConfirmation() {
    const activeChat = await this.chatManager.getActiveChat();
    if (!activeChat) {
      new Notice("No active chat to delete.");
      return;
    }
    if (confirm(`Are you sure you want to delete the chat "${activeChat.metadata.name}"? This cannot be undone.`)) {
      const success = await this.chatManager.deleteChat(activeChat.metadata.id);
      if (success) {
        new Notice(`Chat "${activeChat.metadata.name}" deleted.`);
      } else {
        new Notice("Failed to delete chat.");
      }
    }
  }

  // main.ts (within OllamaPlugin class)

  /**
   * Sets the active chat session.
   * Updates global settings like model, role path, temperature to match the activated chat.
   * Loads the chat content into the cache.
   */
  async setActiveChat(id: string | null): Promise<void> {
    if (id && !this.sessionIndex[id]) {
      console.error(`[ChatManager] Attempted to set active chat to non-existent ID: ${id}`);
      return;
    }
    // Don't do anything if the ID isn't actually changing
    if (id === this.activeChatId) {
      // console.log(`[ChatManager] Chat ${id} is already active.`);
      // Ensure it's loaded, though
      if (id) await this.getChat(id);
      return;
    }

    this.activeChatId = id;
    await this.saveDataKey(ACTIVE_SESSION_ID_KEY, id); // Persist the active ID
    console.log(`[ChatManager] Active chat set to: ${id}`);
    this.emit('active-chat-changed', id); // Notify View/UI

    // Load chat data and update global settings accordingly
    if (id) {
      const chat = await this.getChat(id); // Load chat into cache
      if (chat) {
        let settingsChanged = false;
        // Sync Model
        if (this.settings.modelName !== chat.metadata.modelName) {
          this.settings.modelName = chat.metadata.modelName;
          settingsChanged = true;
          this.emit('model-changed', chat.metadata.modelName); // Specific event for view placeholder etc.
        }
        // Sync Role Path
        if (this.settings.selectedRolePath !== chat.metadata.selectedRolePath) {
          this.settings.selectedRolePath = chat.metadata.selectedRolePath;
          settingsChanged = true;
          const roleName = this.findRoleNameByPath(chat.metadata.selectedRolePath); // Get name for event
          this.emit('role-changed', roleName); // Specific event
        }
        // Sync Temperature
        if (this.settings.temperature !== chat.metadata.temperature) {
          this.settings.temperature = chat.metadata.temperature;
          settingsChanged = true;
        }

        // Save global settings IF they were changed to reflect the active chat
        if (settingsChanged) {
          await this.saveSettings(); // Await this to ensure consistency before proceeding
        }

        // --- ЗМІНЕНО ТУТ: Використовуємо this.promptService ---
        // Ensure prompt service loads the correct role content for the *newly* active chat
        const rolePathToLoad = chat.metadata.selectedRolePath;
        const roleContent = await this.promptService.getRoleDefinition(rolePathToLoad); // Use this.promptService
        this.promptService.setSystemPrompt(roleContent); // Use this.promptService
        // --- КІНЕЦЬ ЗМІН ---
        console.log(`[ChatManager] System prompt updated for active chat. Role path: ${rolePathToLoad || 'None'}`);

      } else {
        // Failed to load the chat that was supposed to be activated
        console.error(`[ChatManager] Failed to load the newly activated chat ${id}. Resetting active chat.`);
        await this.setActiveChat(null); // Try setting active chat to null
      }
    } else {
      // No active chat selected (set to null)
      this.promptService.setSystemPrompt(null); // Clear system prompt
      // Optionally reset global settings to defaults? Or keep last? Keep last for now.
      console.log("[ChatManager] No active chat, system prompt cleared.");
    }
  }


  // Helper to find role name for event emitting
  findRoleNameByPath(rolePath: string): string {
    if (!rolePath) return "Default Assistant";
    // Use cache if available
    const cachedRole = this.roleListCache?.find(r => r.path === rolePath);
    if (cachedRole) return cachedRole.name;
    // Fallback: extract from path if cache miss (shouldn't happen often)
    try { return path.basename(rolePath, '.md'); }
    catch { return "Unknown Role"; }
  }

  private async handleActiveChatChangedLocally(data: { chatId: string | null, chat: Chat | null }) {
    console.log(`[OllamaPlugin] Handling active-chat-changed event. New ID: ${data.chatId}`);
    const chat = data.chat;
    if (chat) {
      let settingsChanged = false;
      // ... (логіка синхронізації settings з chat.metadata) ...
      if (this.settings.modelName !== chat.metadata.modelName) { this.settings.modelName = chat.metadata.modelName; settingsChanged = true; this.emit('model-changed', chat.metadata.modelName); }
      if (this.settings.selectedRolePath !== chat.metadata.selectedRolePath) { this.settings.selectedRolePath = chat.metadata.selectedRolePath; settingsChanged = true; const roleName = this.findRoleNameByPath(chat.metadata.selectedRolePath); this.emit('role-changed', roleName); }
      if (this.settings.temperature !== chat.metadata.temperature) { this.settings.temperature = chat.metadata.temperature; settingsChanged = true; }

      if (settingsChanged) {
        await this.saveSettings(); // Зберігаємо оновлені глобальні налаштування
      }
      // Оновлюємо системний промпт в сервісі
      const roleContent = await this.promptService.getRoleDefinition(chat.metadata.selectedRolePath);
      this.promptService.setSystemPrompt(roleContent);

    } else { // Немає активного чату
      this.promptService.setSystemPrompt(null);
    }
    // View вже підписаний на подію 'active-chat-changed', яку згенерував ChatManager,
    // тому йому не потрібно нічого додатково повідомляти звідси.
    // View сам викличе this.loadAndDisplayActiveChat() у своєму обробнику.
  }

} // End of OllamaPlugin class



